// This file was automatically generated by SqlOrm

/***************************************************************************************************
 *
 * $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
 *
 * Copyright (C) 2017 Fabrice Salvaire
 * Contact: http://www.fabrice-salvaire.fr
 *
 * This file is part of the Alpine Toolkit software.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * $ALPINE_TOOLKIT_END_LICENSE$
 *
 **************************************************************************************************/

/**************************************************************************************************/

#include "bleau_schema.h"
#include "alpine_toolkit.h"

#include "orm/database_query.h"
#include "orm/type_conversion.h"

#include <QtDebug>

/**************************************************************************************************/

// QC_BEGIN_NAMESPACE


BleauPlaceSchema::BleauPlaceSchema()
: QoSchema(QLatin1String("BleauPlace"), QLatin1String("place"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("coordinate"),
      QLatin1String("QGeoCoordinate"),
      QLatin1String("text"),
      QLatin1String("coordinate"),
      QLatin1String("coordinate"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_sql_column_ctor(QLatin1String("SELECT AddGeometryColumn('place', 'coordinate', 4326, 'POINT', 'XY');"));
    field.set_sql_value_ctor(ST_GeomFromWKB());
    field.set_sql_value_getter(ST_AsBinary(QoSqlField((QLatin1String("coordinate")))));
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("name"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("name"),
      QLatin1String("name"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("category"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("category"),
      QLatin1String("category"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("note"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("note"),
      QLatin1String("note"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

BleauPlaceSchema::~BleauPlaceSchema()
{}

/**************************************************************************************************/

BleauPlace::BleauPlace()
  : QObject(),
    QoRow<BleauPlaceSchema>(),
    m_id(),
    m_coordinate(),
    m_name(),
    m_category(),
    m_note()
{
}

BleauPlace::BleauPlace(const BleauPlace & other)
  : QObject(),
    QoRow<BleauPlaceSchema>(other),
    m_id(other.m_id),
    m_coordinate(other.m_coordinate),
    m_name(other.m_name),
    m_category(other.m_category),
    m_note(other.m_note)
{
}

BleauPlace::BleauPlace(const QJsonObject & json_object)
 : BleauPlace()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_coordinate = orm_type_conversion::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_name = json_object[QLatin1String("name")].toString();
  m_category = json_object[QLatin1String("category")].toString();
  m_note = json_object[QLatin1String("note")].toString();
}

BleauPlace::BleauPlace(const QVariantHash & variant_hash)
 : BleauPlace()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_category = variant_hash[QLatin1String("category")].toString();
  m_note = variant_hash[QLatin1String("note")].toString();
}

BleauPlace::BleauPlace(const QVariantList & variants)
 : BleauPlace()
{
  m_id = variants[0].toInt();
  m_coordinate = variants[1].value<QGeoCoordinate>();
  m_name = variants[2].toString();
  m_category = variants[3].toString();
  m_note = variants[4].toString();
}

BleauPlace::BleauPlace(const QSqlRecord & record)
 : QoRow<BleauPlaceSchema>(record)
{
  m_id = record.value(0).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(record.value(1));
  m_name = record.value(2).toString();
  m_category = record.value(3).toString();
  m_note = record.value(4).toString();
}

BleauPlace::BleauPlace(const QSqlQuery & query, int offset)
 : QoRow<BleauPlaceSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(query.value(offset++));
  m_name = query.value(offset++).toString();
  m_category = query.value(offset++).toString();
  m_note = query.value(offset).toString();
}

BleauPlace::~BleauPlace()
{
// qATInfo() << "--- Delete" << "BleauPlace" << *this;
}

// bit array ?
BleauPlace &
BleauPlace::operator=(const BleauPlace & other)
{
  if (this != &other) {
    QoRow<BleauPlaceSchema>::operator=(other);
    m_id = other.m_id;
    m_coordinate = other.m_coordinate;
    m_name = other.m_name;
    m_category = other.m_category;
    m_note = other.m_note;
  }

  return *this;
}

// bit array ?
bool
BleauPlace::operator==(const BleauPlace & other) const
{
  if (not QoRow<BleauPlaceSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_category != other.m_category)
    return false;
  if (m_note != other.m_note)
    return false;

  return true;
}

void
BleauPlace::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauPlace::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::COORDINATE);

    emit coordinateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauPlace::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NAME);

    emit nameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauPlace::set_category(const QString & value)
{
  if (m_category != value) {
    m_category = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CATEGORY);

    emit categoryChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauPlace::set_note(const QString & value)
{
  if (m_note != value) {
    m_note = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NOTE);

    emit noteChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
BleauPlace::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_category_modified())
      json_object.insert(QLatin1String("category"), QJsonValue(m_category));
    if (is_note_modified())
      json_object.insert(QLatin1String("note"), QJsonValue(m_note));
  } else {
    json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("category"), QJsonValue(m_category));
    json_object.insert(QLatin1String("note"), QJsonValue(m_note));
  }

  return json_object;
}

QVariantHash
BleauPlace::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_category_modified())
      variant_hash[QLatin1String("category")] = m_category;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("category")] = m_category;
    variant_hash[QLatin1String("note")] = m_note;
  }

  return variant_hash;
}

QVariantList
BleauPlace::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_category;
  variants << m_note;

  return variants;
}

QVariantHash
BleauPlace::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_category_modified())
      variant_hash[QLatin1String("category")] = m_category;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("category")] = m_category;
    variant_hash[QLatin1String("note")] = m_note;
  }

  return variant_hash;
}

QVariantList
BleauPlace::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << orm_type_conversion::dump_wkb_point(m_coordinate);
  variants << m_name;
  variants << m_category;
  variants << m_note;

  return variants;
}

QVariant
BleauPlace::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case Schema::Fields::NAME:
     return m_name;
   case Schema::Fields::CATEGORY:
     return m_category;
   case Schema::Fields::NOTE:
     return m_note;
   default:
     return QVariant(); // error
  }
}

void
BleauPlace::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case Schema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case Schema::Fields::CATEGORY: {
     m_category = value.toString();
     break;
   }
   case Schema::Fields::NOTE: {
     m_note = value.toString();
     break;
   }
  }
}

void
BleauPlace::set_insert_id(int id)
{
  set_id(id);

}

bool
BleauPlace::can_update() const
{
  return m_id > 0;
}

QVariantHash
BleauPlace::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const BleauPlace & obj)
{
  out << obj.id();
  out << obj.coordinate();
  out << obj.name();
  out << obj.category();
  out << obj.note();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BleauPlace & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_category(_QString);
  in >> _QString;
  obj.set_note(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauPlace & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("BleauPlace(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.coordinate();
  debug << QStringLiteral(", ");
  debug << obj.name();
  debug << QStringLiteral(", ");
  debug << obj.category();
  debug << QStringLiteral(", ");
  debug << obj.note();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauPlacePtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("BleauPlacePtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

BleauPlaceCache::BleauPlaceCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

BleauPlaceCache::~BleauPlaceCache()
{}

void
BleauPlaceCache::add(BleauPlacePtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &BleauPlace::changed,
                   this, &BleauPlaceCache::on_changed);
}

void
BleauPlaceCache::remove(BleauPlacePtr & ptr)
{
  Q_UNUSED(ptr);
}

void
BleauPlaceCache::on_changed()
{
  BleauPlace * row = qobject_cast<BleauPlace *>(QObject::sender());
  qATInfo() << "On changed" << row;
  BleauPlacePtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

BleauPlaceModel::BleauPlaceModel()
  : QAbstractListModel(),
    m_items()
{}

BleauPlaceModel::BleauPlaceModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

BleauPlaceModel::~BleauPlaceModel()
{}

int
BleauPlaceModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
BleauPlaceModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "BleauPlaceModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case COORDINATE:
    return QVariant::fromValue(item->coordinate());
  case NAME:
    return item->name();
  case CATEGORY:
    return item->category();
  case NOTE:
    return item->note();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
BleauPlaceModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").toLatin1();
  role_names[COORDINATE] = QStringLiteral("coordinate").toLatin1();
  role_names[NAME] = QStringLiteral("name").toLatin1();
  role_names[CATEGORY] = QStringLiteral("category").toLatin1();
  role_names[NOTE] = QStringLiteral("note").toLatin1();

  return role_names;
}

void
BleauPlaceModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
BleauPlaceModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

BleauMassifSchema::BleauMassifSchema()
: QoSchema(QLatin1String("BleauMassif"), QLatin1String("massif"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("coordinate"),
      QLatin1String("QGeoCoordinate"),
      QLatin1String("text"),
      QLatin1String("coordinate"),
      QLatin1String("coordinate"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_sql_column_ctor(QLatin1String("SELECT AddGeometryColumn('massif', 'coordinate', 4326, 'POINT', 'XY');"));
    field.set_sql_value_ctor(ST_GeomFromWKB());
    field.set_sql_value_getter(ST_AsBinary(QoSqlField((QLatin1String("coordinate")))));
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("name"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("name"),
      QLatin1String("name"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("access"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("access"),
      QLatin1String("access"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("alternative_name"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("alternative_name"),
      QLatin1String("alternative_name"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("chaos_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("chaos_type"),
      QLatin1String("chaos_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("note"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("note"),
      QLatin1String("note"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("parcelles"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("parcelles"),
      QLatin1String("parcelles"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rdv"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("rdv"),
      QLatin1String("rdv"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("secteur"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("secteur"),
      QLatin1String("secteur"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("velo"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("velo"),
      QLatin1String("velo"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

BleauMassifSchema::~BleauMassifSchema()
{}

/**************************************************************************************************/

BleauMassif::BleauMassif()
  : QObject(),
    QoRow<BleauMassifSchema>(),
    m_id(),
    m_coordinate(),
    m_name(),
    m_access(),
    m_alternative_name(),
    m_chaos_type(),
    m_note(),
    m_parcelles(),
    m_rdv(),
    m_secteur(),
    m_velo()
{
}

BleauMassif::BleauMassif(const BleauMassif & other)
  : QObject(),
    QoRow<BleauMassifSchema>(other),
    m_id(other.m_id),
    m_coordinate(other.m_coordinate),
    m_name(other.m_name),
    m_access(other.m_access),
    m_alternative_name(other.m_alternative_name),
    m_chaos_type(other.m_chaos_type),
    m_note(other.m_note),
    m_parcelles(other.m_parcelles),
    m_rdv(other.m_rdv),
    m_secteur(other.m_secteur),
    m_velo(other.m_velo)
{
}

BleauMassif::BleauMassif(const QJsonObject & json_object)
 : BleauMassif()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_coordinate = orm_type_conversion::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_name = json_object[QLatin1String("name")].toString();
  m_access = json_object[QLatin1String("access")].toString();
  m_alternative_name = json_object[QLatin1String("alternative_name")].toString();
  m_chaos_type = json_object[QLatin1String("chaos_type")].toString();
  m_note = json_object[QLatin1String("note")].toString();
  m_parcelles = json_object[QLatin1String("parcelles")].toString();
  m_rdv = json_object[QLatin1String("rdv")].toString();
  m_secteur = json_object[QLatin1String("secteur")].toString();
  m_velo = json_object[QLatin1String("velo")].toString();
}

BleauMassif::BleauMassif(const QVariantHash & variant_hash)
 : BleauMassif()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_access = variant_hash[QLatin1String("access")].toString();
  m_alternative_name = variant_hash[QLatin1String("alternative_name")].toString();
  m_chaos_type = variant_hash[QLatin1String("chaos_type")].toString();
  m_note = variant_hash[QLatin1String("note")].toString();
  m_parcelles = variant_hash[QLatin1String("parcelles")].toString();
  m_rdv = variant_hash[QLatin1String("rdv")].toString();
  m_secteur = variant_hash[QLatin1String("secteur")].toString();
  m_velo = variant_hash[QLatin1String("velo")].toString();
}

BleauMassif::BleauMassif(const QVariantList & variants)
 : BleauMassif()
{
  m_id = variants[0].toInt();
  m_coordinate = variants[1].value<QGeoCoordinate>();
  m_name = variants[2].toString();
  m_access = variants[3].toString();
  m_alternative_name = variants[4].toString();
  m_chaos_type = variants[5].toString();
  m_note = variants[6].toString();
  m_parcelles = variants[7].toString();
  m_rdv = variants[8].toString();
  m_secteur = variants[9].toString();
  m_velo = variants[10].toString();
}

BleauMassif::BleauMassif(const QSqlRecord & record)
 : QoRow<BleauMassifSchema>(record)
{
  m_id = record.value(0).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(record.value(1));
  m_name = record.value(2).toString();
  m_access = record.value(3).toString();
  m_alternative_name = record.value(4).toString();
  m_chaos_type = record.value(5).toString();
  m_note = record.value(6).toString();
  m_parcelles = record.value(7).toString();
  m_rdv = record.value(8).toString();
  m_secteur = record.value(9).toString();
  m_velo = record.value(10).toString();
}

BleauMassif::BleauMassif(const QSqlQuery & query, int offset)
 : QoRow<BleauMassifSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(query.value(offset++));
  m_name = query.value(offset++).toString();
  m_access = query.value(offset++).toString();
  m_alternative_name = query.value(offset++).toString();
  m_chaos_type = query.value(offset++).toString();
  m_note = query.value(offset++).toString();
  m_parcelles = query.value(offset++).toString();
  m_rdv = query.value(offset++).toString();
  m_secteur = query.value(offset++).toString();
  m_velo = query.value(offset).toString();
}

BleauMassif::~BleauMassif()
{
// qATInfo() << "--- Delete" << "BleauMassif" << *this;
}

// bit array ?
BleauMassif &
BleauMassif::operator=(const BleauMassif & other)
{
  if (this != &other) {
    QoRow<BleauMassifSchema>::operator=(other);
    m_id = other.m_id;
    m_coordinate = other.m_coordinate;
    m_name = other.m_name;
    m_access = other.m_access;
    m_alternative_name = other.m_alternative_name;
    m_chaos_type = other.m_chaos_type;
    m_note = other.m_note;
    m_parcelles = other.m_parcelles;
    m_rdv = other.m_rdv;
    m_secteur = other.m_secteur;
    m_velo = other.m_velo;
  }

  return *this;
}

// bit array ?
bool
BleauMassif::operator==(const BleauMassif & other) const
{
  if (not QoRow<BleauMassifSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_access != other.m_access)
    return false;
  if (m_alternative_name != other.m_alternative_name)
    return false;
  if (m_chaos_type != other.m_chaos_type)
    return false;
  if (m_note != other.m_note)
    return false;
  if (m_parcelles != other.m_parcelles)
    return false;
  if (m_rdv != other.m_rdv)
    return false;
  if (m_secteur != other.m_secteur)
    return false;
  if (m_velo != other.m_velo)
    return false;

  return true;
}

void
BleauMassif::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::COORDINATE);

    emit coordinateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NAME);

    emit nameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_access(const QString & value)
{
  if (m_access != value) {
    m_access = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACCESS);

    emit accessChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_alternative_name(const QString & value)
{
  if (m_alternative_name != value) {
    m_alternative_name = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ALTERNATIVE_NAME);

    emit alternative_nameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_chaos_type(const QString & value)
{
  if (m_chaos_type != value) {
    m_chaos_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CHAOS_TYPE);

    emit chaos_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_note(const QString & value)
{
  if (m_note != value) {
    m_note = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NOTE);

    emit noteChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_parcelles(const QString & value)
{
  if (m_parcelles != value) {
    m_parcelles = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARCELLES);

    emit parcellesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_rdv(const QString & value)
{
  if (m_rdv != value) {
    m_rdv = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::RDV);

    emit rdvChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_secteur(const QString & value)
{
  if (m_secteur != value) {
    m_secteur = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SECTEUR);

    emit secteurChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauMassif::set_velo(const QString & value)
{
  if (m_velo != value) {
    m_velo = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VELO);

    emit veloChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
BleauMassif::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_access_modified())
      json_object.insert(QLatin1String("access"), QJsonValue(m_access));
    if (is_alternative_name_modified())
      json_object.insert(QLatin1String("alternative_name"), QJsonValue(m_alternative_name));
    if (is_chaos_type_modified())
      json_object.insert(QLatin1String("chaos_type"), QJsonValue(m_chaos_type));
    if (is_note_modified())
      json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    if (is_parcelles_modified())
      json_object.insert(QLatin1String("parcelles"), QJsonValue(m_parcelles));
    if (is_rdv_modified())
      json_object.insert(QLatin1String("rdv"), QJsonValue(m_rdv));
    if (is_secteur_modified())
      json_object.insert(QLatin1String("secteur"), QJsonValue(m_secteur));
    if (is_velo_modified())
      json_object.insert(QLatin1String("velo"), QJsonValue(m_velo));
  } else {
    json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("access"), QJsonValue(m_access));
    json_object.insert(QLatin1String("alternative_name"), QJsonValue(m_alternative_name));
    json_object.insert(QLatin1String("chaos_type"), QJsonValue(m_chaos_type));
    json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    json_object.insert(QLatin1String("parcelles"), QJsonValue(m_parcelles));
    json_object.insert(QLatin1String("rdv"), QJsonValue(m_rdv));
    json_object.insert(QLatin1String("secteur"), QJsonValue(m_secteur));
    json_object.insert(QLatin1String("velo"), QJsonValue(m_velo));
  }

  return json_object;
}

QVariantHash
BleauMassif::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_access_modified())
      variant_hash[QLatin1String("access")] = m_access;
    if (is_alternative_name_modified())
      variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    if (is_chaos_type_modified())
      variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_parcelles_modified())
      variant_hash[QLatin1String("parcelles")] = m_parcelles;
    if (is_rdv_modified())
      variant_hash[QLatin1String("rdv")] = m_rdv;
    if (is_secteur_modified())
      variant_hash[QLatin1String("secteur")] = m_secteur;
    if (is_velo_modified())
      variant_hash[QLatin1String("velo")] = m_velo;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("access")] = m_access;
    variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("parcelles")] = m_parcelles;
    variant_hash[QLatin1String("rdv")] = m_rdv;
    variant_hash[QLatin1String("secteur")] = m_secteur;
    variant_hash[QLatin1String("velo")] = m_velo;
  }

  return variant_hash;
}

QVariantList
BleauMassif::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_access;
  variants << m_alternative_name;
  variants << m_chaos_type;
  variants << m_note;
  variants << m_parcelles;
  variants << m_rdv;
  variants << m_secteur;
  variants << m_velo;

  return variants;
}

QVariantHash
BleauMassif::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_access_modified())
      variant_hash[QLatin1String("access")] = m_access;
    if (is_alternative_name_modified())
      variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    if (is_chaos_type_modified())
      variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_parcelles_modified())
      variant_hash[QLatin1String("parcelles")] = m_parcelles;
    if (is_rdv_modified())
      variant_hash[QLatin1String("rdv")] = m_rdv;
    if (is_secteur_modified())
      variant_hash[QLatin1String("secteur")] = m_secteur;
    if (is_velo_modified())
      variant_hash[QLatin1String("velo")] = m_velo;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("access")] = m_access;
    variant_hash[QLatin1String("alternative_name")] = m_alternative_name;
    variant_hash[QLatin1String("chaos_type")] = m_chaos_type;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("parcelles")] = m_parcelles;
    variant_hash[QLatin1String("rdv")] = m_rdv;
    variant_hash[QLatin1String("secteur")] = m_secteur;
    variant_hash[QLatin1String("velo")] = m_velo;
  }

  return variant_hash;
}

QVariantList
BleauMassif::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << orm_type_conversion::dump_wkb_point(m_coordinate);
  variants << m_name;
  variants << m_access;
  variants << m_alternative_name;
  variants << m_chaos_type;
  variants << m_note;
  variants << m_parcelles;
  variants << m_rdv;
  variants << m_secteur;
  variants << m_velo;

  return variants;
}

QVariant
BleauMassif::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case Schema::Fields::NAME:
     return m_name;
   case Schema::Fields::ACCESS:
     return m_access;
   case Schema::Fields::ALTERNATIVE_NAME:
     return m_alternative_name;
   case Schema::Fields::CHAOS_TYPE:
     return m_chaos_type;
   case Schema::Fields::NOTE:
     return m_note;
   case Schema::Fields::PARCELLES:
     return m_parcelles;
   case Schema::Fields::RDV:
     return m_rdv;
   case Schema::Fields::SECTEUR:
     return m_secteur;
   case Schema::Fields::VELO:
     return m_velo;
   default:
     return QVariant(); // error
  }
}

void
BleauMassif::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case Schema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case Schema::Fields::ACCESS: {
     m_access = value.toString();
     break;
   }
   case Schema::Fields::ALTERNATIVE_NAME: {
     m_alternative_name = value.toString();
     break;
   }
   case Schema::Fields::CHAOS_TYPE: {
     m_chaos_type = value.toString();
     break;
   }
   case Schema::Fields::NOTE: {
     m_note = value.toString();
     break;
   }
   case Schema::Fields::PARCELLES: {
     m_parcelles = value.toString();
     break;
   }
   case Schema::Fields::RDV: {
     m_rdv = value.toString();
     break;
   }
   case Schema::Fields::SECTEUR: {
     m_secteur = value.toString();
     break;
   }
   case Schema::Fields::VELO: {
     m_velo = value.toString();
     break;
   }
  }
}

void
BleauMassif::set_insert_id(int id)
{
  set_id(id);

  for (const auto & item_weak_ref : m_circuits)
    item_weak_ref.toStrongRef().data()->set_massif_id(id); // Fixme: check ref
}

void
BleauMassif::load_relations()
{
  qATInfo() << "Load relations of" << *this;
  {
    // Load one-to-many relation circuits
    BleauCircuit::PtrList rows = database_schema()->query_by_foreign_key<BleauCircuit>(
      QLatin1String("massif_id"),
      m_id); // true
    m_circuits = rows;
  }
}

void
BleauMassif::save_relations()
{
  qATInfo() << "Save relations of" << *this;
  for (const auto & item_weak_ref : m_circuits) {
    BleauCircuit * item_ptr = item_weak_ref.toStrongRef().data();
    if (not item_ptr->exists_on_database())
      database_schema()->add(*item_ptr);
  }
}

bool
BleauMassif::can_update() const
{
  return m_id > 0;
}

QVariantHash
BleauMassif::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const BleauMassif & obj)
{
  out << obj.id();
  out << obj.coordinate();
  out << obj.name();
  out << obj.access();
  out << obj.alternative_name();
  out << obj.chaos_type();
  out << obj.note();
  out << obj.parcelles();
  out << obj.rdv();
  out << obj.secteur();
  out << obj.velo();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BleauMassif & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_access(_QString);
  in >> _QString;
  obj.set_alternative_name(_QString);
  in >> _QString;
  obj.set_chaos_type(_QString);
  in >> _QString;
  obj.set_note(_QString);
  in >> _QString;
  obj.set_parcelles(_QString);
  in >> _QString;
  obj.set_rdv(_QString);
  in >> _QString;
  obj.set_secteur(_QString);
  in >> _QString;
  obj.set_velo(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauMassif & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("BleauMassif(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.coordinate();
  debug << QStringLiteral(", ");
  debug << obj.name();
  debug << QStringLiteral(", ");
  debug << obj.access();
  debug << QStringLiteral(", ");
  debug << obj.alternative_name();
  debug << QStringLiteral(", ");
  debug << obj.chaos_type();
  debug << QStringLiteral(", ");
  debug << obj.note();
  debug << QStringLiteral(", ");
  debug << obj.parcelles();
  debug << QStringLiteral(", ");
  debug << obj.rdv();
  debug << QStringLiteral(", ");
  debug << obj.secteur();
  debug << QStringLiteral(", ");
  debug << obj.velo();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauMassifPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("BleauMassifPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

BleauMassifCache::BleauMassifCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

BleauMassifCache::~BleauMassifCache()
{}

void
BleauMassifCache::add(BleauMassifPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &BleauMassif::changed,
                   this, &BleauMassifCache::on_changed);
}

void
BleauMassifCache::remove(BleauMassifPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
BleauMassifCache::on_changed()
{
  BleauMassif * row = qobject_cast<BleauMassif *>(QObject::sender());
  qATInfo() << "On changed" << row;
  BleauMassifPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

BleauMassifModel::BleauMassifModel()
  : QAbstractListModel(),
    m_items()
{}

BleauMassifModel::BleauMassifModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

BleauMassifModel::~BleauMassifModel()
{}

int
BleauMassifModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
BleauMassifModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "BleauMassifModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case COORDINATE:
    return QVariant::fromValue(item->coordinate());
  case NAME:
    return item->name();
  case ACCESS:
    return item->access();
  case ALTERNATIVE_NAME:
    return item->alternative_name();
  case CHAOS_TYPE:
    return item->chaos_type();
  case NOTE:
    return item->note();
  case PARCELLES:
    return item->parcelles();
  case RDV:
    return item->rdv();
  case SECTEUR:
    return item->secteur();
  case VELO:
    return item->velo();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
BleauMassifModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").toLatin1();
  role_names[COORDINATE] = QStringLiteral("coordinate").toLatin1();
  role_names[NAME] = QStringLiteral("name").toLatin1();
  role_names[ACCESS] = QStringLiteral("access").toLatin1();
  role_names[ALTERNATIVE_NAME] = QStringLiteral("alternative_name").toLatin1();
  role_names[CHAOS_TYPE] = QStringLiteral("chaos_type").toLatin1();
  role_names[NOTE] = QStringLiteral("note").toLatin1();
  role_names[PARCELLES] = QStringLiteral("parcelles").toLatin1();
  role_names[RDV] = QStringLiteral("rdv").toLatin1();
  role_names[SECTEUR] = QStringLiteral("secteur").toLatin1();
  role_names[VELO] = QStringLiteral("velo").toLatin1();

  return role_names;
}

void
BleauMassifModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
BleauMassifModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

BleauCircuitSchema::BleauCircuitSchema()
: QoSchema(QLatin1String("BleauCircuit"), QLatin1String("circuit"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("coordinate"),
      QLatin1String("QGeoCoordinate"),
      QLatin1String("text"),
      QLatin1String("coordinate"),
      QLatin1String("coordinate"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_sql_column_ctor(QLatin1String("SELECT AddGeometryColumn('circuit', 'coordinate', 4326, 'POINT', 'XY');"));
    field.set_sql_value_ctor(ST_GeomFromWKB());
    field.set_sql_value_getter(ST_AsBinary(QoSqlField((QLatin1String("coordinate")))));
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("colour"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("colour"),
      QLatin1String("colour"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("creation_date"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("creation_date"),
      QLatin1String("creation_date"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("gestion"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("gestion"),
      QLatin1String("gestion"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("grade"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("grade"),
      QLatin1String("grade"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaForeignKey field(
      QLatin1String("massif_id"),
      QLatin1String("massif.id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("massif_id"),
      QLatin1String("massif_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("note"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("note"),
      QLatin1String("note"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("number"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("number"),
      QLatin1String("number"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("opener"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("opener"),
      QLatin1String("opener"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("refection_date"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("refection_date"),
      QLatin1String("refection_date"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("refection_note"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("refection_note"),
      QLatin1String("refection_note"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("status"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("status"),
      QLatin1String("status"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("topos"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("topos"),
      QLatin1String("topos"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

BleauCircuitSchema::~BleauCircuitSchema()
{}

/**************************************************************************************************/

BleauCircuit::BleauCircuit()
  : QObject(),
    QoRow<BleauCircuitSchema>(),
    m_id(),
    m_coordinate(),
    m_colour(),
    m_creation_date(),
    m_gestion(),
    m_grade(),
    m_massif_id(),
    m_note(),
    m_number(),
    m_opener(),
    m_refection_date(),
    m_refection_note(),
    m_status(),
    m_topos()
{
}

BleauCircuit::BleauCircuit(const BleauCircuit & other)
  : QObject(),
    QoRow<BleauCircuitSchema>(other),
    m_id(other.m_id),
    m_coordinate(other.m_coordinate),
    m_colour(other.m_colour),
    m_creation_date(other.m_creation_date),
    m_gestion(other.m_gestion),
    m_grade(other.m_grade),
    m_massif_id(other.m_massif_id),
    m_note(other.m_note),
    m_number(other.m_number),
    m_opener(other.m_opener),
    m_refection_date(other.m_refection_date),
    m_refection_note(other.m_refection_note),
    m_status(other.m_status),
    m_topos(other.m_topos)
{
}

BleauCircuit::BleauCircuit(const QJsonObject & json_object)
 : BleauCircuit()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_coordinate = orm_type_conversion::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_colour = json_object[QLatin1String("colour")].toString();
  m_creation_date = json_object[QLatin1String("creation_date")].toInt();
  m_gestion = json_object[QLatin1String("gestion")].toString();
  m_grade = json_object[QLatin1String("grade")].toString();
  m_massif_id = json_object[QLatin1String("massif_id")].toInt();
  m_note = json_object[QLatin1String("note")].toString();
  m_number = json_object[QLatin1String("number")].toInt();
  m_opener = json_object[QLatin1String("opener")].toString();
  m_refection_date = json_object[QLatin1String("refection_date")].toInt();
  m_refection_note = json_object[QLatin1String("refection_note")].toString();
  m_status = json_object[QLatin1String("status")].toString();
  m_topos = orm_type_conversion::load_string_list(json_object[QLatin1String("topos")]);
}

BleauCircuit::BleauCircuit(const QVariantHash & variant_hash)
 : BleauCircuit()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_colour = variant_hash[QLatin1String("colour")].toString();
  m_creation_date = variant_hash[QLatin1String("creation_date")].toInt();
  m_gestion = variant_hash[QLatin1String("gestion")].toString();
  m_grade = variant_hash[QLatin1String("grade")].toString();
  m_massif_id = variant_hash[QLatin1String("massif_id")].toInt();
  m_note = variant_hash[QLatin1String("note")].toString();
  m_number = variant_hash[QLatin1String("number")].toInt();
  m_opener = variant_hash[QLatin1String("opener")].toString();
  m_refection_date = variant_hash[QLatin1String("refection_date")].toInt();
  m_refection_note = variant_hash[QLatin1String("refection_note")].toString();
  m_status = variant_hash[QLatin1String("status")].toString();
  m_topos = variant_hash[QLatin1String("topos")].toStringList();
}

BleauCircuit::BleauCircuit(const QVariantList & variants)
 : BleauCircuit()
{
  m_id = variants[0].toInt();
  m_coordinate = variants[1].value<QGeoCoordinate>();
  m_colour = variants[2].toString();
  m_creation_date = variants[3].toInt();
  m_gestion = variants[4].toString();
  m_grade = variants[5].toString();
  m_massif_id = variants[6].toInt();
  m_note = variants[7].toString();
  m_number = variants[8].toInt();
  m_opener = variants[9].toString();
  m_refection_date = variants[10].toInt();
  m_refection_note = variants[11].toString();
  m_status = variants[12].toString();
  m_topos = variants[13].toStringList();
}

BleauCircuit::BleauCircuit(const QSqlRecord & record)
 : QoRow<BleauCircuitSchema>(record)
{
  m_id = record.value(0).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(record.value(1));
  m_colour = record.value(2).toString();
  m_creation_date = record.value(3).toInt();
  m_gestion = record.value(4).toString();
  m_grade = record.value(5).toString();
  m_massif_id = record.value(6).toInt();
  m_note = record.value(7).toString();
  m_number = record.value(8).toInt();
  m_opener = record.value(9).toString();
  m_refection_date = record.value(10).toInt();
  m_refection_note = record.value(11).toString();
  m_status = record.value(12).toString();
  m_topos = record.value(13).toStringList();
}

BleauCircuit::BleauCircuit(const QSqlQuery & query, int offset)
 : QoRow<BleauCircuitSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(query.value(offset++));
  m_colour = query.value(offset++).toString();
  m_creation_date = query.value(offset++).toInt();
  m_gestion = query.value(offset++).toString();
  m_grade = query.value(offset++).toString();
  m_massif_id = query.value(offset++).toInt();
  m_note = query.value(offset++).toString();
  m_number = query.value(offset++).toInt();
  m_opener = query.value(offset++).toString();
  m_refection_date = query.value(offset++).toInt();
  m_refection_note = query.value(offset++).toString();
  m_status = query.value(offset++).toString();
  m_topos = query.value(offset).toStringList();
}

BleauCircuit::~BleauCircuit()
{
// qATInfo() << "--- Delete" << "BleauCircuit" << *this;
}

// bit array ?
BleauCircuit &
BleauCircuit::operator=(const BleauCircuit & other)
{
  if (this != &other) {
    QoRow<BleauCircuitSchema>::operator=(other);
    m_id = other.m_id;
    m_coordinate = other.m_coordinate;
    m_colour = other.m_colour;
    m_creation_date = other.m_creation_date;
    m_gestion = other.m_gestion;
    m_grade = other.m_grade;
    m_massif_id = other.m_massif_id;
    m_note = other.m_note;
    m_number = other.m_number;
    m_opener = other.m_opener;
    m_refection_date = other.m_refection_date;
    m_refection_note = other.m_refection_note;
    m_status = other.m_status;
    m_topos = other.m_topos;
  }

  return *this;
}

// bit array ?
bool
BleauCircuit::operator==(const BleauCircuit & other) const
{
  if (not QoRow<BleauCircuitSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_colour != other.m_colour)
    return false;
  if (m_creation_date != other.m_creation_date)
    return false;
  if (m_gestion != other.m_gestion)
    return false;
  if (m_grade != other.m_grade)
    return false;
  if (m_massif_id != other.m_massif_id)
    return false;
  if (m_note != other.m_note)
    return false;
  if (m_number != other.m_number)
    return false;
  if (m_opener != other.m_opener)
    return false;
  if (m_refection_date != other.m_refection_date)
    return false;
  if (m_refection_note != other.m_refection_note)
    return false;
  if (m_status != other.m_status)
    return false;
  if (m_topos != other.m_topos)
    return false;

  return true;
}

void
BleauCircuit::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::COORDINATE);

    emit coordinateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_colour(const QString & value)
{
  if (m_colour != value) {
    m_colour = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::COLOUR);

    emit colourChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_creation_date(int value)
{
  if (m_creation_date != value) {
    m_creation_date = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CREATION_DATE);

    emit creation_dateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_gestion(const QString & value)
{
  if (m_gestion != value) {
    m_gestion = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GESTION);

    emit gestionChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_grade(const QString & value)
{
  if (m_grade != value) {
    m_grade = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GRADE);

    emit gradeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_massif_id(int value)
{
  if (m_massif_id != value) {
    m_massif_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MASSIF_ID);

    emit massif_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_note(const QString & value)
{
  if (m_note != value) {
    m_note = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NOTE);

    emit noteChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_number(int value)
{
  if (m_number != value) {
    m_number = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NUMBER);

    emit numberChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_opener(const QString & value)
{
  if (m_opener != value) {
    m_opener = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::OPENER);

    emit openerChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_refection_date(int value)
{
  if (m_refection_date != value) {
    m_refection_date = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::REFECTION_DATE);

    emit refection_dateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_refection_note(const QString & value)
{
  if (m_refection_note != value) {
    m_refection_note = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::REFECTION_NOTE);

    emit refection_noteChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_status(const QString & value)
{
  if (m_status != value) {
    m_status = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::STATUS);

    emit statusChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauCircuit::set_topos(const QStringList & value)
{
  if (m_topos != value) {
    m_topos = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TOPOS);

    emit toposChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
BleauCircuit::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    if (is_colour_modified())
      json_object.insert(QLatin1String("colour"), QJsonValue(m_colour));
    if (is_creation_date_modified())
      json_object.insert(QLatin1String("creation_date"), QJsonValue(m_creation_date));
    if (is_gestion_modified())
      json_object.insert(QLatin1String("gestion"), QJsonValue(m_gestion));
    if (is_grade_modified())
      json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    if (is_note_modified())
      json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    if (is_number_modified())
      json_object.insert(QLatin1String("number"), QJsonValue(m_number));
    if (is_opener_modified())
      json_object.insert(QLatin1String("opener"), QJsonValue(m_opener));
    if (is_refection_date_modified())
      json_object.insert(QLatin1String("refection_date"), QJsonValue(m_refection_date));
    if (is_refection_note_modified())
      json_object.insert(QLatin1String("refection_note"), QJsonValue(m_refection_note));
    if (is_status_modified())
      json_object.insert(QLatin1String("status"), QJsonValue(m_status));
    if (is_topos_modified())
      json_object.insert(QLatin1String("topos"), orm_type_conversion::dump_string_list(m_topos));
  } else {
    json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("colour"), QJsonValue(m_colour));
    json_object.insert(QLatin1String("creation_date"), QJsonValue(m_creation_date));
    json_object.insert(QLatin1String("gestion"), QJsonValue(m_gestion));
    json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    json_object.insert(QLatin1String("note"), QJsonValue(m_note));
    json_object.insert(QLatin1String("number"), QJsonValue(m_number));
    json_object.insert(QLatin1String("opener"), QJsonValue(m_opener));
    json_object.insert(QLatin1String("refection_date"), QJsonValue(m_refection_date));
    json_object.insert(QLatin1String("refection_note"), QJsonValue(m_refection_note));
    json_object.insert(QLatin1String("status"), QJsonValue(m_status));
    json_object.insert(QLatin1String("topos"), orm_type_conversion::dump_string_list(m_topos));
  }

  return json_object;
}

QVariantHash
BleauCircuit::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_colour_modified())
      variant_hash[QLatin1String("colour")] = m_colour;
    if (is_creation_date_modified())
      variant_hash[QLatin1String("creation_date")] = m_creation_date;
    if (is_gestion_modified())
      variant_hash[QLatin1String("gestion")] = m_gestion;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_massif_id_modified())
      variant_hash[QLatin1String("massif_id")] = m_massif_id;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
    if (is_opener_modified())
      variant_hash[QLatin1String("opener")] = m_opener;
    if (is_refection_date_modified())
      variant_hash[QLatin1String("refection_date")] = m_refection_date;
    if (is_refection_note_modified())
      variant_hash[QLatin1String("refection_note")] = m_refection_note;
    if (is_status_modified())
      variant_hash[QLatin1String("status")] = m_status;
    if (is_topos_modified())
      variant_hash[QLatin1String("topos")] = m_topos;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("colour")] = m_colour;
    variant_hash[QLatin1String("creation_date")] = m_creation_date;
    variant_hash[QLatin1String("gestion")] = m_gestion;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("massif_id")] = m_massif_id;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("number")] = m_number;
    variant_hash[QLatin1String("opener")] = m_opener;
    variant_hash[QLatin1String("refection_date")] = m_refection_date;
    variant_hash[QLatin1String("refection_note")] = m_refection_note;
    variant_hash[QLatin1String("status")] = m_status;
    variant_hash[QLatin1String("topos")] = m_topos;
  }

  return variant_hash;
}

QVariantList
BleauCircuit::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_colour;
  variants << m_creation_date;
  variants << m_gestion;
  variants << m_grade;
  variants << m_massif_id;
  variants << m_note;
  variants << m_number;
  variants << m_opener;
  variants << m_refection_date;
  variants << m_refection_note;
  variants << m_status;
  variants << m_topos;

  return variants;
}

QVariantHash
BleauCircuit::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    if (is_colour_modified())
      variant_hash[QLatin1String("colour")] = m_colour;
    if (is_creation_date_modified())
      variant_hash[QLatin1String("creation_date")] = m_creation_date;
    if (is_gestion_modified())
      variant_hash[QLatin1String("gestion")] = m_gestion;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_massif_id_modified())
      variant_hash[QLatin1String("massif_id")] = m_massif_id;
    if (is_note_modified())
      variant_hash[QLatin1String("note")] = m_note;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
    if (is_opener_modified())
      variant_hash[QLatin1String("opener")] = m_opener;
    if (is_refection_date_modified())
      variant_hash[QLatin1String("refection_date")] = m_refection_date;
    if (is_refection_note_modified())
      variant_hash[QLatin1String("refection_note")] = m_refection_note;
    if (is_status_modified())
      variant_hash[QLatin1String("status")] = m_status;
    if (is_topos_modified())
      variant_hash[QLatin1String("topos")] = m_topos;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    variant_hash[QLatin1String("colour")] = m_colour;
    variant_hash[QLatin1String("creation_date")] = m_creation_date;
    variant_hash[QLatin1String("gestion")] = m_gestion;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("massif_id")] = m_massif_id;
    variant_hash[QLatin1String("note")] = m_note;
    variant_hash[QLatin1String("number")] = m_number;
    variant_hash[QLatin1String("opener")] = m_opener;
    variant_hash[QLatin1String("refection_date")] = m_refection_date;
    variant_hash[QLatin1String("refection_note")] = m_refection_note;
    variant_hash[QLatin1String("status")] = m_status;
    variant_hash[QLatin1String("topos")] = m_topos;
  }

  return variant_hash;
}

QVariantList
BleauCircuit::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << orm_type_conversion::dump_wkb_point(m_coordinate);
  variants << m_colour;
  variants << m_creation_date;
  variants << m_gestion;
  variants << m_grade;
  variants << m_massif_id;
  variants << m_note;
  variants << m_number;
  variants << m_opener;
  variants << m_refection_date;
  variants << m_refection_note;
  variants << m_status;
  variants << m_topos;

  return variants;
}

QVariant
BleauCircuit::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case Schema::Fields::COLOUR:
     return m_colour;
   case Schema::Fields::CREATION_DATE:
     return m_creation_date;
   case Schema::Fields::GESTION:
     return m_gestion;
   case Schema::Fields::GRADE:
     return m_grade;
   case Schema::Fields::MASSIF_ID:
     return m_massif_id;
   case Schema::Fields::NOTE:
     return m_note;
   case Schema::Fields::NUMBER:
     return m_number;
   case Schema::Fields::OPENER:
     return m_opener;
   case Schema::Fields::REFECTION_DATE:
     return m_refection_date;
   case Schema::Fields::REFECTION_NOTE:
     return m_refection_note;
   case Schema::Fields::STATUS:
     return m_status;
   case Schema::Fields::TOPOS:
     return m_topos;
   default:
     return QVariant(); // error
  }
}

void
BleauCircuit::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case Schema::Fields::COLOUR: {
     m_colour = value.toString();
     break;
   }
   case Schema::Fields::CREATION_DATE: {
     m_creation_date = value.toInt();
     break;
   }
   case Schema::Fields::GESTION: {
     m_gestion = value.toString();
     break;
   }
   case Schema::Fields::GRADE: {
     m_grade = value.toString();
     break;
   }
   case Schema::Fields::MASSIF_ID: {
     m_massif_id = value.toInt();
     break;
   }
   case Schema::Fields::NOTE: {
     m_note = value.toString();
     break;
   }
   case Schema::Fields::NUMBER: {
     m_number = value.toInt();
     break;
   }
   case Schema::Fields::OPENER: {
     m_opener = value.toString();
     break;
   }
   case Schema::Fields::REFECTION_DATE: {
     m_refection_date = value.toInt();
     break;
   }
   case Schema::Fields::REFECTION_NOTE: {
     m_refection_note = value.toString();
     break;
   }
   case Schema::Fields::STATUS: {
     m_status = value.toString();
     break;
   }
   case Schema::Fields::TOPOS: {
     m_topos = value.toStringList();
     break;
   }
  }
}

void
BleauCircuit::set_insert_id(int id)
{
  set_id(id);

  for (const auto & item_weak_ref : m_boulders)
    item_weak_ref.toStrongRef().data()->set_circuit_id(id); // Fixme: check ref
}

bool
BleauCircuit::can_save() const
{
  if (m_massif_id == 0)
    return false;

  return true;
}

void
BleauCircuit::load_relations()
{
  qATInfo() << "Load relations of" << *this;
  {
    // Load one-to-many relation boulders
    BleauBoulder::PtrList rows = database_schema()->query_by_foreign_key<BleauBoulder>(
      QLatin1String("circuit_id"),
      m_id); // true
    m_boulders = rows;
  }
  massif();
}

void
BleauCircuit::save_relations()
{
  qATInfo() << "Save relations of" << *this;
  for (const auto & item_weak_ref : m_boulders) {
    BleauBoulder * item_ptr = item_weak_ref.toStrongRef().data();
    if (not item_ptr->exists_on_database())
      database_schema()->add(*item_ptr);
  }
}

BleauMassifPtr
BleauCircuit::massif()
{
  if (m_massif.isNull())
    // Fixme: query_by_id must be defined in QoDatabaseSchema but we cannot call register_row
    m_massif = database_schema()->query_by_id<BleauMassif>(m_massif_id);
  return m_massif;
}

bool
BleauCircuit::can_update() const
{
  return m_id > 0;
}

QVariantHash
BleauCircuit::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const BleauCircuit & obj)
{
  out << obj.id();
  out << obj.coordinate();
  out << obj.colour();
  out << obj.creation_date();
  out << obj.gestion();
  out << obj.grade();
  out << obj.massif_id();
  out << obj.note();
  out << obj.number();
  out << obj.opener();
  out << obj.refection_date();
  out << obj.refection_note();
  out << obj.status();
  out << obj.topos();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BleauCircuit & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;
  QStringList _QStringList;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_colour(_QString);
  in >> _int;
  obj.set_creation_date(_int);
  in >> _QString;
  obj.set_gestion(_QString);
  in >> _QString;
  obj.set_grade(_QString);
  in >> _int;
  obj.set_massif_id(_int);
  in >> _QString;
  obj.set_note(_QString);
  in >> _int;
  obj.set_number(_int);
  in >> _QString;
  obj.set_opener(_QString);
  in >> _int;
  obj.set_refection_date(_int);
  in >> _QString;
  obj.set_refection_note(_QString);
  in >> _QString;
  obj.set_status(_QString);
  in >> _QStringList;
  obj.set_topos(_QStringList);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauCircuit & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("BleauCircuit(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.coordinate();
  debug << QStringLiteral(", ");
  debug << obj.colour();
  debug << QStringLiteral(", ");
  debug << obj.creation_date();
  debug << QStringLiteral(", ");
  debug << obj.gestion();
  debug << QStringLiteral(", ");
  debug << obj.grade();
  debug << QStringLiteral(", ");
  debug << obj.massif_id();
  debug << QStringLiteral(", ");
  debug << obj.note();
  debug << QStringLiteral(", ");
  debug << obj.number();
  debug << QStringLiteral(", ");
  debug << obj.opener();
  debug << QStringLiteral(", ");
  debug << obj.refection_date();
  debug << QStringLiteral(", ");
  debug << obj.refection_note();
  debug << QStringLiteral(", ");
  debug << obj.status();
  debug << QStringLiteral(", ");
  debug << obj.topos();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

void
BleauCircuitPtr::set_massif(BleauMassifPtr & value)
{
  if (m_ptr->m_massif)
    m_ptr->m_massif->circuits().remove(*this);
  m_ptr->m_massif = value;
  m_ptr->set_massif_id(value->id());
  value->circuits().append(*this);
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauCircuitPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("BleauCircuitPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

BleauCircuitCache::BleauCircuitCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

BleauCircuitCache::~BleauCircuitCache()
{}

void
BleauCircuitCache::add(BleauCircuitPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &BleauCircuit::changed,
                   this, &BleauCircuitCache::on_changed);
}

void
BleauCircuitCache::remove(BleauCircuitPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
BleauCircuitCache::on_changed()
{
  BleauCircuit * row = qobject_cast<BleauCircuit *>(QObject::sender());
  qATInfo() << "On changed" << row;
  BleauCircuitPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

BleauCircuitModel::BleauCircuitModel()
  : QAbstractListModel(),
    m_items()
{}

BleauCircuitModel::BleauCircuitModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

BleauCircuitModel::~BleauCircuitModel()
{}

int
BleauCircuitModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
BleauCircuitModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "BleauCircuitModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case COORDINATE:
    return QVariant::fromValue(item->coordinate());
  case COLOUR:
    return item->colour();
  case CREATION_DATE:
    return item->creation_date();
  case GESTION:
    return item->gestion();
  case GRADE:
    return item->grade();
  case MASSIF_ID:
    return item->massif_id();
  case NOTE:
    return item->note();
  case NUMBER:
    return item->number();
  case OPENER:
    return item->opener();
  case REFECTION_DATE:
    return item->refection_date();
  case REFECTION_NOTE:
    return item->refection_note();
  case STATUS:
    return item->status();
  case TOPOS:
    return item->topos();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
BleauCircuitModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").toLatin1();
  role_names[COORDINATE] = QStringLiteral("coordinate").toLatin1();
  role_names[COLOUR] = QStringLiteral("colour").toLatin1();
  role_names[CREATION_DATE] = QStringLiteral("creation_date").toLatin1();
  role_names[GESTION] = QStringLiteral("gestion").toLatin1();
  role_names[GRADE] = QStringLiteral("grade").toLatin1();
  role_names[MASSIF_ID] = QStringLiteral("massif_id").toLatin1();
  role_names[NOTE] = QStringLiteral("note").toLatin1();
  role_names[NUMBER] = QStringLiteral("number").toLatin1();
  role_names[OPENER] = QStringLiteral("opener").toLatin1();
  role_names[REFECTION_DATE] = QStringLiteral("refection_date").toLatin1();
  role_names[REFECTION_NOTE] = QStringLiteral("refection_note").toLatin1();
  role_names[STATUS] = QStringLiteral("status").toLatin1();
  role_names[TOPOS] = QStringLiteral("topos").toLatin1();

  return role_names;
}

void
BleauCircuitModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
BleauCircuitModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

BleauBoulderSchema::BleauBoulderSchema()
: QoSchema(QLatin1String("BleauBoulder"), QLatin1String("boulder"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("coordinate"),
      QLatin1String("QGeoCoordinate"),
      QLatin1String("text"),
      QLatin1String("coordinate"),
      QLatin1String("coordinate"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_sql_column_ctor(QLatin1String("SELECT AddGeometryColumn('boulder', 'coordinate', 4326, 'POINT', 'XY');"));
    field.set_sql_value_ctor(ST_GeomFromWKB());
    field.set_sql_value_getter(ST_AsBinary(QoSqlField((QLatin1String("coordinate")))));
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("name"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("name"),
      QLatin1String("name"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("comment"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("comment"),
      QLatin1String("comment"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("grade"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("grade"),
      QLatin1String("grade"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("number"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("number"),
      QLatin1String("number"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaForeignKey field(
      QLatin1String("circuit_id"),
      QLatin1String("circuit.id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("circuit_id"),
      QLatin1String("circuit_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

BleauBoulderSchema::~BleauBoulderSchema()
{}

/**************************************************************************************************/

BleauBoulder::BleauBoulder()
  : QObject(),
    QoRow<BleauBoulderSchema>(),
    m_id(),
    m_coordinate(),
    m_name(),
    m_comment(),
    m_grade(),
    m_number(),
    m_circuit_id()
{
}

BleauBoulder::BleauBoulder(const BleauBoulder & other)
  : QObject(),
    QoRow<BleauBoulderSchema>(other),
    m_id(other.m_id),
    m_coordinate(other.m_coordinate),
    m_name(other.m_name),
    m_comment(other.m_comment),
    m_grade(other.m_grade),
    m_number(other.m_number),
    m_circuit_id(other.m_circuit_id)
{
}

BleauBoulder::BleauBoulder(const QJsonObject & json_object)
 : BleauBoulder()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_coordinate = orm_type_conversion::load_json_coordinate(json_object[QLatin1String("coordinate")]);
  m_name = json_object[QLatin1String("name")].toString();
  m_comment = json_object[QLatin1String("comment")].toString();
  m_grade = json_object[QLatin1String("grade")].toString();
  m_number = json_object[QLatin1String("number")].toString();
  m_circuit_id = json_object[QLatin1String("circuit_id")].toInt();
}

BleauBoulder::BleauBoulder(const QVariantHash & variant_hash)
 : BleauBoulder()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_coordinate = variant_hash[QLatin1String("coordinate")].value<QGeoCoordinate>();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_comment = variant_hash[QLatin1String("comment")].toString();
  m_grade = variant_hash[QLatin1String("grade")].toString();
  m_number = variant_hash[QLatin1String("number")].toString();
  m_circuit_id = variant_hash[QLatin1String("circuit_id")].toInt();
}

BleauBoulder::BleauBoulder(const QVariantList & variants)
 : BleauBoulder()
{
  m_id = variants[0].toInt();
  m_coordinate = variants[1].value<QGeoCoordinate>();
  m_name = variants[2].toString();
  m_comment = variants[3].toString();
  m_grade = variants[4].toString();
  m_number = variants[5].toString();
  m_circuit_id = variants[6].toInt();
}

BleauBoulder::BleauBoulder(const QSqlRecord & record)
 : QoRow<BleauBoulderSchema>(record)
{
  m_id = record.value(0).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(record.value(1));
  m_name = record.value(2).toString();
  m_comment = record.value(3).toString();
  m_grade = record.value(4).toString();
  m_number = record.value(5).toString();
  m_circuit_id = record.value(6).toInt();
}

BleauBoulder::BleauBoulder(const QSqlQuery & query, int offset)
 : QoRow<BleauBoulderSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_coordinate = orm_type_conversion::load_wkb_point(query.value(offset++));
  m_name = query.value(offset++).toString();
  m_comment = query.value(offset++).toString();
  m_grade = query.value(offset++).toString();
  m_number = query.value(offset++).toString();
  m_circuit_id = query.value(offset).toInt();
}

BleauBoulder::~BleauBoulder()
{
// qATInfo() << "--- Delete" << "BleauBoulder" << *this;
}

// bit array ?
BleauBoulder &
BleauBoulder::operator=(const BleauBoulder & other)
{
  if (this != &other) {
    QoRow<BleauBoulderSchema>::operator=(other);
    m_id = other.m_id;
    m_coordinate = other.m_coordinate;
    m_name = other.m_name;
    m_comment = other.m_comment;
    m_grade = other.m_grade;
    m_number = other.m_number;
    m_circuit_id = other.m_circuit_id;
  }

  return *this;
}

// bit array ?
bool
BleauBoulder::operator==(const BleauBoulder & other) const
{
  if (not QoRow<BleauBoulderSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_coordinate != other.m_coordinate)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_comment != other.m_comment)
    return false;
  if (m_grade != other.m_grade)
    return false;
  if (m_number != other.m_number)
    return false;
  if (m_circuit_id != other.m_circuit_id)
    return false;

  return true;
}

void
BleauBoulder::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauBoulder::set_coordinate(const QGeoCoordinate & value)
{
  if (m_coordinate != value) {
    m_coordinate = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::COORDINATE);

    emit coordinateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauBoulder::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NAME);

    emit nameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauBoulder::set_comment(const QString & value)
{
  if (m_comment != value) {
    m_comment = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::COMMENT);

    emit commentChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauBoulder::set_grade(const QString & value)
{
  if (m_grade != value) {
    m_grade = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GRADE);

    emit gradeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauBoulder::set_number(const QString & value)
{
  if (m_number != value) {
    m_number = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NUMBER);

    emit numberChanged();
    if (not is_changed)
      emit changed();
  }
}

void
BleauBoulder::set_circuit_id(int value)
{
  if (m_circuit_id != value) {
    m_circuit_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CIRCUIT_ID);

    emit circuit_idChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
BleauBoulder::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_coordinate_modified())
      json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_comment_modified())
      json_object.insert(QLatin1String("comment"), QJsonValue(m_comment));
    if (is_grade_modified())
      json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    if (is_number_modified())
      json_object.insert(QLatin1String("number"), QJsonValue(m_number));
  } else {
    json_object.insert(QLatin1String("coordinate"), orm_type_conversion::dump_json_coordinate(m_coordinate));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("comment"), QJsonValue(m_comment));
    json_object.insert(QLatin1String("grade"), QJsonValue(m_grade));
    json_object.insert(QLatin1String("number"), QJsonValue(m_number));
  }

  return json_object;
}

QVariantHash
BleauBoulder::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_comment_modified())
      variant_hash[QLatin1String("comment")] = m_comment;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
    if (is_circuit_id_modified())
      variant_hash[QLatin1String("circuit_id")] = m_circuit_id;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = QVariant::fromValue(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("comment")] = m_comment;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("number")] = m_number;
    variant_hash[QLatin1String("circuit_id")] = m_circuit_id;
  }

  return variant_hash;
}

QVariantList
BleauBoulder::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << QVariant::fromValue(m_coordinate);
  variants << m_name;
  variants << m_comment;
  variants << m_grade;
  variants << m_number;
  variants << m_circuit_id;

  return variants;
}

QVariantHash
BleauBoulder::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_coordinate_modified())
      variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_comment_modified())
      variant_hash[QLatin1String("comment")] = m_comment;
    if (is_grade_modified())
      variant_hash[QLatin1String("grade")] = m_grade;
    if (is_number_modified())
      variant_hash[QLatin1String("number")] = m_number;
    if (is_circuit_id_modified())
      variant_hash[QLatin1String("circuit_id")] = m_circuit_id;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("coordinate")] = orm_type_conversion::dump_wkb_point(m_coordinate);
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("comment")] = m_comment;
    variant_hash[QLatin1String("grade")] = m_grade;
    variant_hash[QLatin1String("number")] = m_number;
    variant_hash[QLatin1String("circuit_id")] = m_circuit_id;
  }

  return variant_hash;
}

QVariantList
BleauBoulder::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << orm_type_conversion::dump_wkb_point(m_coordinate);
  variants << m_name;
  variants << m_comment;
  variants << m_grade;
  variants << m_number;
  variants << m_circuit_id;

  return variants;
}

QVariant
BleauBoulder::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::COORDINATE:
     return QVariant::fromValue(m_coordinate);
   case Schema::Fields::NAME:
     return m_name;
   case Schema::Fields::COMMENT:
     return m_comment;
   case Schema::Fields::GRADE:
     return m_grade;
   case Schema::Fields::NUMBER:
     return m_number;
   case Schema::Fields::CIRCUIT_ID:
     return m_circuit_id;
   default:
     return QVariant(); // error
  }
}

void
BleauBoulder::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::COORDINATE: {
     m_coordinate = value.value<QGeoCoordinate>();
     break;
   }
   case Schema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case Schema::Fields::COMMENT: {
     m_comment = value.toString();
     break;
   }
   case Schema::Fields::GRADE: {
     m_grade = value.toString();
     break;
   }
   case Schema::Fields::NUMBER: {
     m_number = value.toString();
     break;
   }
   case Schema::Fields::CIRCUIT_ID: {
     m_circuit_id = value.toInt();
     break;
   }
  }
}

void
BleauBoulder::set_insert_id(int id)
{
  set_id(id);

}

bool
BleauBoulder::can_save() const
{
  if (m_circuit_id == 0)
    return false;

  return true;
}

void
BleauBoulder::load_relations()
{
  qATInfo() << "Load relations of" << *this;
  circuit();
}

void
BleauBoulder::save_relations()
{
  qATInfo() << "Save relations of" << *this;
}

BleauCircuitPtr
BleauBoulder::circuit()
{
  if (m_circuit.isNull())
    // Fixme: query_by_id must be defined in QoDatabaseSchema but we cannot call register_row
    m_circuit = database_schema()->query_by_id<BleauCircuit>(m_circuit_id);
  return m_circuit;
}

bool
BleauBoulder::can_update() const
{
  return m_id > 0;
}

QVariantHash
BleauBoulder::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const BleauBoulder & obj)
{
  out << obj.id();
  out << obj.coordinate();
  out << obj.name();
  out << obj.comment();
  out << obj.grade();
  out << obj.number();
  out << obj.circuit_id();

  return out;
}

QDataStream &
operator>>(QDataStream & in, BleauBoulder & obj)
{
  QGeoCoordinate _QGeoCoordinate;
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QGeoCoordinate;
  obj.set_coordinate(_QGeoCoordinate);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_comment(_QString);
  in >> _QString;
  obj.set_grade(_QString);
  in >> _QString;
  obj.set_number(_QString);
  in >> _int;
  obj.set_circuit_id(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauBoulder & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("BleauBoulder(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.coordinate();
  debug << QStringLiteral(", ");
  debug << obj.name();
  debug << QStringLiteral(", ");
  debug << obj.comment();
  debug << QStringLiteral(", ");
  debug << obj.grade();
  debug << QStringLiteral(", ");
  debug << obj.number();
  debug << QStringLiteral(", ");
  debug << obj.circuit_id();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

void
BleauBoulderPtr::set_circuit(BleauCircuitPtr & value)
{
  if (m_ptr->m_circuit)
    m_ptr->m_circuit->boulders().remove(*this);
  m_ptr->m_circuit = value;
  m_ptr->set_circuit_id(value->id());
  value->boulders().append(*this);
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const BleauBoulderPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("BleauBoulderPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

BleauBoulderCache::BleauBoulderCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

BleauBoulderCache::~BleauBoulderCache()
{}

void
BleauBoulderCache::add(BleauBoulderPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &BleauBoulder::changed,
                   this, &BleauBoulderCache::on_changed);
}

void
BleauBoulderCache::remove(BleauBoulderPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
BleauBoulderCache::on_changed()
{
  BleauBoulder * row = qobject_cast<BleauBoulder *>(QObject::sender());
  qATInfo() << "On changed" << row;
  BleauBoulderPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

BleauBoulderModel::BleauBoulderModel()
  : QAbstractListModel(),
    m_items()
{}

BleauBoulderModel::BleauBoulderModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

BleauBoulderModel::~BleauBoulderModel()
{}

int
BleauBoulderModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
BleauBoulderModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "BleauBoulderModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case COORDINATE:
    return QVariant::fromValue(item->coordinate());
  case NAME:
    return item->name();
  case COMMENT:
    return item->comment();
  case GRADE:
    return item->grade();
  case NUMBER:
    return item->number();
  case CIRCUIT_ID:
    return item->circuit_id();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
BleauBoulderModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").toLatin1();
  role_names[COORDINATE] = QStringLiteral("coordinate").toLatin1();
  role_names[NAME] = QStringLiteral("name").toLatin1();
  role_names[COMMENT] = QStringLiteral("comment").toLatin1();
  role_names[GRADE] = QStringLiteral("grade").toLatin1();
  role_names[NUMBER] = QStringLiteral("number").toLatin1();
  role_names[CIRCUIT_ID] = QStringLiteral("circuit_id").toLatin1();

  return role_names;
}

void
BleauBoulderModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
BleauBoulderModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}
BleauSchema::BleauSchema(QoDatabase & database)
  : QoDatabaseSchema(database),
    m_place(nullptr),
    m_massif(nullptr),
    m_circuit(nullptr),
    m_boulder(nullptr),
    m_place_cache(),
    m_massif_cache(),
    m_circuit_cache(),
    m_boulder_cache()
{
  m_place = &register_table(BleauPlaceSchema::instance());
  m_massif = &register_table(BleauMassifSchema::instance());
  m_circuit = &register_table(BleauCircuitSchema::instance());
  m_boulder = &register_table(BleauBoulderSchema::instance());
}

BleauSchema::~BleauSchema()
{}

template<>
void
BleauSchema::register_row<BleauPlace>(BleauPlacePtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_place_cache.add(row);
}
template<>
void
BleauSchema::register_row<BleauMassif>(BleauMassifPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_massif_cache.add(row);
}
template<>
void
BleauSchema::register_row<BleauCircuit>(BleauCircuitPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_circuit_cache.add(row);
}
template<>
void
BleauSchema::register_row<BleauBoulder>(BleauBoulderPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_boulder_cache.add(row);
}

/**************************************************************************************************/
// QC_END_NAMESPACE
