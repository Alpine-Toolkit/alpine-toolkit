// This file was automatically generated by SqlOrm

/***************************************************************************************************
 *
 * $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
 *
 * Copyright (C) 2017 Fabrice Salvaire
 * Contact: http://www.fabrice-salvaire.fr
 *
 * This file is part of the Alpine Toolkit software.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * $ALPINE_TOOLKIT_END_LICENSE$
 *
 **************************************************************************************************/

/**************************************************************************************************/

#include "camptocamp_schema.h"
#include "alpine_toolkit.h"

#include "orm/database_query.h"
#include "orm/type_conversion.h"

#include <QtDebug>

/**************************************************************************************************/

// QC_BEGIN_NAMESPACE


C2cAreaAssociationsSchema::C2cAreaAssociationsSchema()
: QoSchema(QLatin1String("C2cAreaAssociations"), QLatin1String("c2c_area_associations"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("area_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("area_id"),
      QLatin1String("area_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cAreaAssociationsSchema::~C2cAreaAssociationsSchema()
{}

/**************************************************************************************************/

C2cAreaAssociations::C2cAreaAssociations()
  : QObject(),
    QoRow<C2cAreaAssociationsSchema>(),
    m_area_id(),
    m_document_id()
{
}

C2cAreaAssociations::C2cAreaAssociations(const C2cAreaAssociations & other)
  : QObject(),
    QoRow<C2cAreaAssociationsSchema>(other),
    m_area_id(other.m_area_id),
    m_document_id(other.m_document_id)
{
}

C2cAreaAssociations::C2cAreaAssociations(const QJsonObject & json_object)
 : C2cAreaAssociations()
{
  m_area_id = json_object[QLatin1String("area_id")].toInt();
  m_document_id = json_object[QLatin1String("document_id")].toInt();
}

C2cAreaAssociations::C2cAreaAssociations(const QVariantHash & variant_hash)
 : C2cAreaAssociations()
{
  m_area_id = variant_hash[QLatin1String("area_id")].toInt();
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
}

C2cAreaAssociations::C2cAreaAssociations(const QVariantList & variants)
 : C2cAreaAssociations()
{
  m_area_id = variants[0].toInt();
  m_document_id = variants[1].toInt();
}

C2cAreaAssociations::C2cAreaAssociations(const QSqlRecord & record)
 : QoRow<C2cAreaAssociationsSchema>(record)
{
  m_area_id = record.value(0).toInt();
  m_document_id = record.value(1).toInt();
}

C2cAreaAssociations::C2cAreaAssociations(const QSqlQuery & query, int offset)
 : QoRow<C2cAreaAssociationsSchema>(query)
{
  m_area_id = query.value(offset++).toInt();
  m_document_id = query.value(offset).toInt();
}

C2cAreaAssociations::~C2cAreaAssociations()
{
// qATInfo() << "--- Delete" << "C2cAreaAssociations" << *this;
}

// bit array ?
C2cAreaAssociations &
C2cAreaAssociations::operator=(const C2cAreaAssociations & other)
{
  if (this != &other) {
    QoRow<C2cAreaAssociationsSchema>::operator=(other);
    m_area_id = other.m_area_id;
    m_document_id = other.m_document_id;
  }

  return *this;
}

// bit array ?
bool
C2cAreaAssociations::operator==(const C2cAreaAssociations & other) const
{
  if (not QoRow<C2cAreaAssociationsSchema>::operator==(other))
    return false;
  if (m_area_id != other.m_area_id)
    return false;
  if (m_document_id != other.m_document_id)
    return false;

  return true;
}

void
C2cAreaAssociations::set_area_id(int value)
{
  if (m_area_id != value) {
    m_area_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AREA_ID);

    emit area_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cAreaAssociations::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cAreaAssociations::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_area_id_modified())
      json_object.insert(QLatin1String("area_id"), QJsonValue(m_area_id));
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
  } else {
    json_object.insert(QLatin1String("area_id"), QJsonValue(m_area_id));
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
  }

  return json_object;
}

QVariantHash
C2cAreaAssociations::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_area_id_modified())
      variant_hash[QLatin1String("area_id")] = m_area_id;
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
  } else {
    variant_hash[QLatin1String("area_id")] = m_area_id;
    variant_hash[QLatin1String("document_id")] = m_document_id;
  }

  return variant_hash;
}

QVariantList
C2cAreaAssociations::to_variant_list() const
{
  QVariantList variants;

  variants << m_area_id;
  variants << m_document_id;

  return variants;
}

QVariantHash
C2cAreaAssociations::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_area_id_modified())
      variant_hash[QLatin1String("area_id")] = m_area_id;
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("area_id")] = m_area_id;
    variant_hash[QLatin1String("document_id")] = m_document_id;
  }

  return variant_hash;
}

QVariantList
C2cAreaAssociations::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_area_id;
  variants << m_document_id;

  return variants;
}

QVariant
C2cAreaAssociations::field(int position) const
{
  switch(position) {
   case Schema::Fields::AREA_ID:
     return m_area_id;
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   default:
     return QVariant(); // error
  }
}

void
C2cAreaAssociations::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::AREA_ID: {
     m_area_id = value.toInt();
     break;
   }
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
  }
}

void
C2cAreaAssociations::set_insert_id(int id)
{
  set_area_id(id);

}

bool
C2cAreaAssociations::can_update() const
{
  return m_area_id > 0;
}

QVariantHash
C2cAreaAssociations::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("area_id")] = m_area_id;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cAreaAssociations & obj)
{
  out << obj.area_id();
  out << obj.document_id();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cAreaAssociations & obj)
{
  int _int;
  in >> _int;
  obj.set_area_id(_int);
  in >> _int;
  obj.set_document_id(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cAreaAssociations & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cAreaAssociations(");
  debug << obj.area_id();
  debug << QStringLiteral(", ");
  debug << obj.document_id();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cAreaAssociationsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cAreaAssociationsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cAreaAssociationsCache::C2cAreaAssociationsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cAreaAssociationsCache::~C2cAreaAssociationsCache()
{}

void
C2cAreaAssociationsCache::add(C2cAreaAssociationsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cAreaAssociations::changed,
                   this, &C2cAreaAssociationsCache::on_changed);
}

void
C2cAreaAssociationsCache::remove(C2cAreaAssociationsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cAreaAssociationsCache::on_changed()
{
  C2cAreaAssociations * row = qobject_cast<C2cAreaAssociations *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cAreaAssociationsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cAreaAssociationsModel::C2cAreaAssociationsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cAreaAssociationsModel::C2cAreaAssociationsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cAreaAssociationsModel::~C2cAreaAssociationsModel()
{}

int
C2cAreaAssociationsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cAreaAssociationsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cAreaAssociationsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case AREA_ID:
    return item->area_id();
  case DOCUMENT_ID:
    return item->document_id();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cAreaAssociationsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[AREA_ID] = QStringLiteral("area_id").latin1();
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();

  return role_names;
}

void
C2cAreaAssociationsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cAreaAssociationsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cAreasSchema::C2cAreasSchema()
: QoSchema(QLatin1String("C2cAreas"), QLatin1String("c2c_areas"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("area_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("area_type"),
      QLatin1String("area_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cAreasSchema::~C2cAreasSchema()
{}

/**************************************************************************************************/

C2cAreas::C2cAreas()
  : QObject(),
    QoRow<C2cAreasSchema>(),
    m_document_id(),
    m_area_type()
{
}

C2cAreas::C2cAreas(const C2cAreas & other)
  : QObject(),
    QoRow<C2cAreasSchema>(other),
    m_document_id(other.m_document_id),
    m_area_type(other.m_area_type)
{
}

C2cAreas::C2cAreas(const QJsonObject & json_object)
 : C2cAreas()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_area_type = json_object[QLatin1String("area_type")].toString();
}

C2cAreas::C2cAreas(const QVariantHash & variant_hash)
 : C2cAreas()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_area_type = variant_hash[QLatin1String("area_type")].toString();
}

C2cAreas::C2cAreas(const QVariantList & variants)
 : C2cAreas()
{
  m_document_id = variants[0].toInt();
  m_area_type = variants[1].toString();
}

C2cAreas::C2cAreas(const QSqlRecord & record)
 : QoRow<C2cAreasSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_area_type = record.value(1).toString();
}

C2cAreas::C2cAreas(const QSqlQuery & query, int offset)
 : QoRow<C2cAreasSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_area_type = query.value(offset).toString();
}

C2cAreas::~C2cAreas()
{
// qATInfo() << "--- Delete" << "C2cAreas" << *this;
}

// bit array ?
C2cAreas &
C2cAreas::operator=(const C2cAreas & other)
{
  if (this != &other) {
    QoRow<C2cAreasSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_area_type = other.m_area_type;
  }

  return *this;
}

// bit array ?
bool
C2cAreas::operator==(const C2cAreas & other) const
{
  if (not QoRow<C2cAreasSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_area_type != other.m_area_type)
    return false;

  return true;
}

void
C2cAreas::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cAreas::set_area_type(const QString & value)
{
  if (m_area_type != value) {
    m_area_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AREA_TYPE);

    emit area_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cAreas::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_area_type_modified())
      json_object.insert(QLatin1String("area_type"), QJsonValue(m_area_type));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("area_type"), QJsonValue(m_area_type));
  }

  return json_object;
}

QVariantHash
C2cAreas::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_area_type_modified())
      variant_hash[QLatin1String("area_type")] = m_area_type;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("area_type")] = m_area_type;
  }

  return variant_hash;
}

QVariantList
C2cAreas::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_area_type;

  return variants;
}

QVariantHash
C2cAreas::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_area_type_modified())
      variant_hash[QLatin1String("area_type")] = m_area_type;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("area_type")] = m_area_type;
  }

  return variant_hash;
}

QVariantList
C2cAreas::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_area_type;

  return variants;
}

QVariant
C2cAreas::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::AREA_TYPE:
     return m_area_type;
   default:
     return QVariant(); // error
  }
}

void
C2cAreas::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::AREA_TYPE: {
     m_area_type = value.toString();
     break;
   }
  }
}

void
C2cAreas::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cAreas::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cAreas::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cAreas & obj)
{
  out << obj.document_id();
  out << obj.area_type();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cAreas & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QString;
  obj.set_area_type(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cAreas & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cAreas(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.area_type();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cAreasPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cAreasPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cAreasCache::C2cAreasCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cAreasCache::~C2cAreasCache()
{}

void
C2cAreasCache::add(C2cAreasPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cAreas::changed,
                   this, &C2cAreasCache::on_changed);
}

void
C2cAreasCache::remove(C2cAreasPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cAreasCache::on_changed()
{
  C2cAreas * row = qobject_cast<C2cAreas *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cAreasPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cAreasModel::C2cAreasModel()
  : QAbstractListModel(),
    m_items()
{}

C2cAreasModel::C2cAreasModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cAreasModel::~C2cAreasModel()
{}

int
C2cAreasModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cAreasModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cAreasModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case AREA_TYPE:
    return item->area_type();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cAreasModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[AREA_TYPE] = QStringLiteral("area_type").latin1();

  return role_names;
}

void
C2cAreasModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cAreasModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cArticlesSchema::C2cArticlesSchema()
: QoSchema(QLatin1String("C2cArticles"), QLatin1String("c2c_articles"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("article_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("article_type"),
      QLatin1String("article_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("categories"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("categories"),
      QLatin1String("categories"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cArticlesSchema::~C2cArticlesSchema()
{}

/**************************************************************************************************/

C2cArticles::C2cArticles()
  : QObject(),
    QoRow<C2cArticlesSchema>(),
    m_document_id(),
    m_activities(),
    m_article_type(),
    m_categories()
{
}

C2cArticles::C2cArticles(const C2cArticles & other)
  : QObject(),
    QoRow<C2cArticlesSchema>(other),
    m_document_id(other.m_document_id),
    m_activities(other.m_activities),
    m_article_type(other.m_article_type),
    m_categories(other.m_categories)
{
}

C2cArticles::C2cArticles(const QJsonObject & json_object)
 : C2cArticles()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_article_type = json_object[QLatin1String("article_type")].toString();
  m_categories = orm_type_conversion::load_string_list(json_object[QLatin1String("categories")]);
}

C2cArticles::C2cArticles(const QVariantHash & variant_hash)
 : C2cArticles()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_article_type = variant_hash[QLatin1String("article_type")].toString();
  m_categories = variant_hash[QLatin1String("categories")].toStringList();
}

C2cArticles::C2cArticles(const QVariantList & variants)
 : C2cArticles()
{
  m_document_id = variants[0].toInt();
  m_activities = variants[1].toStringList();
  m_article_type = variants[2].toString();
  m_categories = variants[3].toStringList();
}

C2cArticles::C2cArticles(const QSqlRecord & record)
 : QoRow<C2cArticlesSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_activities = record.value(1).toStringList();
  m_article_type = record.value(2).toString();
  m_categories = record.value(3).toStringList();
}

C2cArticles::C2cArticles(const QSqlQuery & query, int offset)
 : QoRow<C2cArticlesSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_activities = query.value(offset++).toStringList();
  m_article_type = query.value(offset++).toString();
  m_categories = query.value(offset).toStringList();
}

C2cArticles::~C2cArticles()
{
// qATInfo() << "--- Delete" << "C2cArticles" << *this;
}

// bit array ?
C2cArticles &
C2cArticles::operator=(const C2cArticles & other)
{
  if (this != &other) {
    QoRow<C2cArticlesSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_activities = other.m_activities;
    m_article_type = other.m_article_type;
    m_categories = other.m_categories;
  }

  return *this;
}

// bit array ?
bool
C2cArticles::operator==(const C2cArticles & other) const
{
  if (not QoRow<C2cArticlesSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_article_type != other.m_article_type)
    return false;
  if (m_categories != other.m_categories)
    return false;

  return true;
}

void
C2cArticles::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cArticles::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cArticles::set_article_type(const QString & value)
{
  if (m_article_type != value) {
    m_article_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ARTICLE_TYPE);

    emit article_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cArticles::set_categories(const QStringList & value)
{
  if (m_categories != value) {
    m_categories = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CATEGORIES);

    emit categoriesChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cArticles::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_article_type_modified())
      json_object.insert(QLatin1String("article_type"), QJsonValue(m_article_type));
    if (is_categories_modified())
      json_object.insert(QLatin1String("categories"), orm_type_conversion::dump_string_list(m_categories));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("article_type"), QJsonValue(m_article_type));
    json_object.insert(QLatin1String("categories"), orm_type_conversion::dump_string_list(m_categories));
  }

  return json_object;
}

QVariantHash
C2cArticles::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_article_type_modified())
      variant_hash[QLatin1String("article_type")] = m_article_type;
    if (is_categories_modified())
      variant_hash[QLatin1String("categories")] = m_categories;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("article_type")] = m_article_type;
    variant_hash[QLatin1String("categories")] = m_categories;
  }

  return variant_hash;
}

QVariantList
C2cArticles::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_activities;
  variants << m_article_type;
  variants << m_categories;

  return variants;
}

QVariantHash
C2cArticles::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_article_type_modified())
      variant_hash[QLatin1String("article_type")] = m_article_type;
    if (is_categories_modified())
      variant_hash[QLatin1String("categories")] = m_categories;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("article_type")] = m_article_type;
    variant_hash[QLatin1String("categories")] = m_categories;
  }

  return variant_hash;
}

QVariantList
C2cArticles::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_activities;
  variants << m_article_type;
  variants << m_categories;

  return variants;
}

QVariant
C2cArticles::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::ARTICLE_TYPE:
     return m_article_type;
   case Schema::Fields::CATEGORIES:
     return m_categories;
   default:
     return QVariant(); // error
  }
}

void
C2cArticles::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::ARTICLE_TYPE: {
     m_article_type = value.toString();
     break;
   }
   case Schema::Fields::CATEGORIES: {
     m_categories = value.toStringList();
     break;
   }
  }
}

void
C2cArticles::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cArticles::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cArticles::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cArticles & obj)
{
  out << obj.document_id();
  out << obj.activities();
  out << obj.article_type();
  out << obj.categories();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cArticles & obj)
{
  QString _QString;
  QStringList _QStringList;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QString;
  obj.set_article_type(_QString);
  in >> _QStringList;
  obj.set_categories(_QStringList);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cArticles & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cArticles(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.article_type();
  debug << QStringLiteral(", ");
  debug << obj.categories();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cArticlesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cArticlesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cArticlesCache::C2cArticlesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cArticlesCache::~C2cArticlesCache()
{}

void
C2cArticlesCache::add(C2cArticlesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cArticles::changed,
                   this, &C2cArticlesCache::on_changed);
}

void
C2cArticlesCache::remove(C2cArticlesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cArticlesCache::on_changed()
{
  C2cArticles * row = qobject_cast<C2cArticles *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cArticlesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cArticlesModel::C2cArticlesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cArticlesModel::C2cArticlesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cArticlesModel::~C2cArticlesModel()
{}

int
C2cArticlesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cArticlesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cArticlesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACTIVITIES:
    return item->activities();
  case ARTICLE_TYPE:
    return item->article_type();
  case CATEGORIES:
    return item->categories();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cArticlesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[ARTICLE_TYPE] = QStringLiteral("article_type").latin1();
  role_names[CATEGORIES] = QStringLiteral("categories").latin1();

  return role_names;
}

void
C2cArticlesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cArticlesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cAssociationsSchema::C2cAssociationsSchema()
: QoSchema(QLatin1String("C2cAssociations"), QLatin1String("c2c_associations"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("child_document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("child_document_id"),
      QLatin1String("child_document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaPrimaryKey field(
      QLatin1String("parent_document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("parent_document_id"),
      QLatin1String("parent_document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("child_document_type"),
      QLatin1String("QChar"),
      QLatin1String("text"),
      QLatin1String("child_document_type"),
      QLatin1String("child_document_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("parent_document_type"),
      QLatin1String("QChar"),
      QLatin1String("text"),
      QLatin1String("parent_document_type"),
      QLatin1String("parent_document_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cAssociationsSchema::~C2cAssociationsSchema()
{}

/**************************************************************************************************/

C2cAssociations::C2cAssociations()
  : QObject(),
    QoRow<C2cAssociationsSchema>(),
    m_child_document_id(),
    m_parent_document_id(),
    m_child_document_type(),
    m_parent_document_type()
{
}

C2cAssociations::C2cAssociations(const C2cAssociations & other)
  : QObject(),
    QoRow<C2cAssociationsSchema>(other),
    m_child_document_id(other.m_child_document_id),
    m_parent_document_id(other.m_parent_document_id),
    m_child_document_type(other.m_child_document_type),
    m_parent_document_type(other.m_parent_document_type)
{
}

C2cAssociations::C2cAssociations(const QJsonObject & json_object)
 : C2cAssociations()
{
  m_child_document_id = json_object[QLatin1String("child_document_id")].toInt();
  m_parent_document_id = json_object[QLatin1String("parent_document_id")].toInt();
  m_child_document_type = json_object[QLatin1String("child_document_type")].toVariant().toChar();
  m_parent_document_type = json_object[QLatin1String("parent_document_type")].toVariant().toChar();
}

C2cAssociations::C2cAssociations(const QVariantHash & variant_hash)
 : C2cAssociations()
{
  m_child_document_id = variant_hash[QLatin1String("child_document_id")].toInt();
  m_parent_document_id = variant_hash[QLatin1String("parent_document_id")].toInt();
  m_child_document_type = variant_hash[QLatin1String("child_document_type")].toChar();
  m_parent_document_type = variant_hash[QLatin1String("parent_document_type")].toChar();
}

C2cAssociations::C2cAssociations(const QVariantList & variants)
 : C2cAssociations()
{
  m_child_document_id = variants[0].toInt();
  m_parent_document_id = variants[1].toInt();
  m_child_document_type = variants[2].toChar();
  m_parent_document_type = variants[3].toChar();
}

C2cAssociations::C2cAssociations(const QSqlRecord & record)
 : QoRow<C2cAssociationsSchema>(record)
{
  m_child_document_id = record.value(0).toInt();
  m_parent_document_id = record.value(1).toInt();
  m_child_document_type = record.value(2).toChar();
  m_parent_document_type = record.value(3).toChar();
}

C2cAssociations::C2cAssociations(const QSqlQuery & query, int offset)
 : QoRow<C2cAssociationsSchema>(query)
{
  m_child_document_id = query.value(offset++).toInt();
  m_parent_document_id = query.value(offset++).toInt();
  m_child_document_type = query.value(offset++).toChar();
  m_parent_document_type = query.value(offset).toChar();
}

C2cAssociations::~C2cAssociations()
{
// qATInfo() << "--- Delete" << "C2cAssociations" << *this;
}

// bit array ?
C2cAssociations &
C2cAssociations::operator=(const C2cAssociations & other)
{
  if (this != &other) {
    QoRow<C2cAssociationsSchema>::operator=(other);
    m_child_document_id = other.m_child_document_id;
    m_parent_document_id = other.m_parent_document_id;
    m_child_document_type = other.m_child_document_type;
    m_parent_document_type = other.m_parent_document_type;
  }

  return *this;
}

// bit array ?
bool
C2cAssociations::operator==(const C2cAssociations & other) const
{
  if (not QoRow<C2cAssociationsSchema>::operator==(other))
    return false;
  if (m_child_document_id != other.m_child_document_id)
    return false;
  if (m_parent_document_id != other.m_parent_document_id)
    return false;
  if (m_child_document_type != other.m_child_document_type)
    return false;
  if (m_parent_document_type != other.m_parent_document_type)
    return false;

  return true;
}

void
C2cAssociations::set_child_document_id(int value)
{
  if (m_child_document_id != value) {
    m_child_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CHILD_DOCUMENT_ID);

    emit child_document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cAssociations::set_parent_document_id(int value)
{
  if (m_parent_document_id != value) {
    m_parent_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARENT_DOCUMENT_ID);

    emit parent_document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cAssociations::set_child_document_type(const QChar & value)
{
  if (m_child_document_type != value) {
    m_child_document_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CHILD_DOCUMENT_TYPE);

    emit child_document_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cAssociations::set_parent_document_type(const QChar & value)
{
  if (m_parent_document_type != value) {
    m_parent_document_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARENT_DOCUMENT_TYPE);

    emit parent_document_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cAssociations::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_child_document_id_modified())
      json_object.insert(QLatin1String("child_document_id"), QJsonValue(m_child_document_id));
    if (is_parent_document_id_modified())
      json_object.insert(QLatin1String("parent_document_id"), QJsonValue(m_parent_document_id));
    if (is_child_document_type_modified())
      json_object.insert(QLatin1String("child_document_type"), QJsonValue(m_child_document_type));
    if (is_parent_document_type_modified())
      json_object.insert(QLatin1String("parent_document_type"), QJsonValue(m_parent_document_type));
  } else {
    json_object.insert(QLatin1String("child_document_id"), QJsonValue(m_child_document_id));
    json_object.insert(QLatin1String("parent_document_id"), QJsonValue(m_parent_document_id));
    json_object.insert(QLatin1String("child_document_type"), QJsonValue(m_child_document_type));
    json_object.insert(QLatin1String("parent_document_type"), QJsonValue(m_parent_document_type));
  }

  return json_object;
}

QVariantHash
C2cAssociations::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_child_document_id_modified())
      variant_hash[QLatin1String("child_document_id")] = m_child_document_id;
    if (is_parent_document_id_modified())
      variant_hash[QLatin1String("parent_document_id")] = m_parent_document_id;
    if (is_child_document_type_modified())
      variant_hash[QLatin1String("child_document_type")] = m_child_document_type;
    if (is_parent_document_type_modified())
      variant_hash[QLatin1String("parent_document_type")] = m_parent_document_type;
  } else {
    variant_hash[QLatin1String("child_document_id")] = m_child_document_id;
    variant_hash[QLatin1String("parent_document_id")] = m_parent_document_id;
    variant_hash[QLatin1String("child_document_type")] = m_child_document_type;
    variant_hash[QLatin1String("parent_document_type")] = m_parent_document_type;
  }

  return variant_hash;
}

QVariantList
C2cAssociations::to_variant_list() const
{
  QVariantList variants;

  variants << m_child_document_id;
  variants << m_parent_document_id;
  variants << m_child_document_type;
  variants << m_parent_document_type;

  return variants;
}

QVariantHash
C2cAssociations::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_child_document_id_modified())
      variant_hash[QLatin1String("child_document_id")] = m_child_document_id;
    if (is_parent_document_id_modified())
      variant_hash[QLatin1String("parent_document_id")] = m_parent_document_id;
    if (is_child_document_type_modified())
      variant_hash[QLatin1String("child_document_type")] = m_child_document_type;
    if (is_parent_document_type_modified())
      variant_hash[QLatin1String("parent_document_type")] = m_parent_document_type;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("child_document_id")] = m_child_document_id;
    variant_hash[QLatin1String("parent_document_id")] = m_parent_document_id;
    variant_hash[QLatin1String("child_document_type")] = m_child_document_type;
    variant_hash[QLatin1String("parent_document_type")] = m_parent_document_type;
  }

  return variant_hash;
}

QVariantList
C2cAssociations::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_child_document_id;
  variants << m_parent_document_id;
  variants << m_child_document_type;
  variants << m_parent_document_type;

  return variants;
}

QVariant
C2cAssociations::field(int position) const
{
  switch(position) {
   case Schema::Fields::CHILD_DOCUMENT_ID:
     return m_child_document_id;
   case Schema::Fields::PARENT_DOCUMENT_ID:
     return m_parent_document_id;
   case Schema::Fields::CHILD_DOCUMENT_TYPE:
     return m_child_document_type;
   case Schema::Fields::PARENT_DOCUMENT_TYPE:
     return m_parent_document_type;
   default:
     return QVariant(); // error
  }
}

void
C2cAssociations::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::CHILD_DOCUMENT_ID: {
     m_child_document_id = value.toInt();
     break;
   }
   case Schema::Fields::PARENT_DOCUMENT_ID: {
     m_parent_document_id = value.toInt();
     break;
   }
   case Schema::Fields::CHILD_DOCUMENT_TYPE: {
     m_child_document_type = value.toChar();
     break;
   }
   case Schema::Fields::PARENT_DOCUMENT_TYPE: {
     m_parent_document_type = value.toChar();
     break;
   }
  }
}

void
C2cAssociations::set_insert_id(int id)
{
  set_child_document_id(id);

}

bool
C2cAssociations::can_update() const
{
  return m_child_document_id > 0;
}

QVariantHash
C2cAssociations::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("child_document_id")] = m_child_document_id;
  where_kwargs[QLatin1String("parent_document_id")] = m_parent_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cAssociations & obj)
{
  out << obj.child_document_id();
  out << obj.parent_document_id();
  out << obj.child_document_type();
  out << obj.parent_document_type();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cAssociations & obj)
{
  QChar _QChar;
  int _int;
  in >> _int;
  obj.set_child_document_id(_int);
  in >> _int;
  obj.set_parent_document_id(_int);
  in >> _QChar;
  obj.set_child_document_type(_QChar);
  in >> _QChar;
  obj.set_parent_document_type(_QChar);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cAssociations & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cAssociations(");
  debug << obj.child_document_id();
  debug << QStringLiteral(", ");
  debug << obj.parent_document_id();
  debug << QStringLiteral(", ");
  debug << obj.child_document_type();
  debug << QStringLiteral(", ");
  debug << obj.parent_document_type();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cAssociationsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cAssociationsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cAssociationsCache::C2cAssociationsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cAssociationsCache::~C2cAssociationsCache()
{}

void
C2cAssociationsCache::add(C2cAssociationsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cAssociations::changed,
                   this, &C2cAssociationsCache::on_changed);
}

void
C2cAssociationsCache::remove(C2cAssociationsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cAssociationsCache::on_changed()
{
  C2cAssociations * row = qobject_cast<C2cAssociations *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cAssociationsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cAssociationsModel::C2cAssociationsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cAssociationsModel::C2cAssociationsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cAssociationsModel::~C2cAssociationsModel()
{}

int
C2cAssociationsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cAssociationsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cAssociationsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case CHILD_DOCUMENT_ID:
    return item->child_document_id();
  case PARENT_DOCUMENT_ID:
    return item->parent_document_id();
  case CHILD_DOCUMENT_TYPE:
    return item->child_document_type();
  case PARENT_DOCUMENT_TYPE:
    return item->parent_document_type();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cAssociationsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[CHILD_DOCUMENT_ID] = QStringLiteral("child_document_id").latin1();
  role_names[PARENT_DOCUMENT_ID] = QStringLiteral("parent_document_id").latin1();
  role_names[CHILD_DOCUMENT_TYPE] = QStringLiteral("child_document_type").latin1();
  role_names[PARENT_DOCUMENT_TYPE] = QStringLiteral("parent_document_type").latin1();

  return role_names;
}

void
C2cAssociationsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cAssociationsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cBooksSchema::C2cBooksSchema()
: QoSchema(QLatin1String("C2cBooks"), QLatin1String("c2c_books"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("author"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("author"),
      QLatin1String("author"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("book_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("book_types"),
      QLatin1String("book_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("editor"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("editor"),
      QLatin1String("editor"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("isbn"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("isbn"),
      QLatin1String("isbn"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("langs"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("langs"),
      QLatin1String("langs"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("nb_pages"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("nb_pages"),
      QLatin1String("nb_pages"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("publication_date"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("publication_date"),
      QLatin1String("publication_date"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("url"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("url"),
      QLatin1String("url"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cBooksSchema::~C2cBooksSchema()
{}

/**************************************************************************************************/

C2cBooks::C2cBooks()
  : QObject(),
    QoRow<C2cBooksSchema>(),
    m_document_id(),
    m_activities(),
    m_author(),
    m_book_types(),
    m_editor(),
    m_isbn(),
    m_langs(),
    m_nb_pages(),
    m_publication_date(),
    m_url()
{
}

C2cBooks::C2cBooks(const C2cBooks & other)
  : QObject(),
    QoRow<C2cBooksSchema>(other),
    m_document_id(other.m_document_id),
    m_activities(other.m_activities),
    m_author(other.m_author),
    m_book_types(other.m_book_types),
    m_editor(other.m_editor),
    m_isbn(other.m_isbn),
    m_langs(other.m_langs),
    m_nb_pages(other.m_nb_pages),
    m_publication_date(other.m_publication_date),
    m_url(other.m_url)
{
}

C2cBooks::C2cBooks(const QJsonObject & json_object)
 : C2cBooks()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_author = json_object[QLatin1String("author")].toString();
  m_book_types = orm_type_conversion::load_string_list(json_object[QLatin1String("book_types")]);
  m_editor = json_object[QLatin1String("editor")].toString();
  m_isbn = json_object[QLatin1String("isbn")].toString();
  m_langs = orm_type_conversion::load_string_list(json_object[QLatin1String("langs")]);
  m_nb_pages = json_object[QLatin1String("nb_pages")].toInt();
  m_publication_date = json_object[QLatin1String("publication_date")].toString();
  m_url = json_object[QLatin1String("url")].toString();
}

C2cBooks::C2cBooks(const QVariantHash & variant_hash)
 : C2cBooks()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_author = variant_hash[QLatin1String("author")].toString();
  m_book_types = variant_hash[QLatin1String("book_types")].toStringList();
  m_editor = variant_hash[QLatin1String("editor")].toString();
  m_isbn = variant_hash[QLatin1String("isbn")].toString();
  m_langs = variant_hash[QLatin1String("langs")].toStringList();
  m_nb_pages = variant_hash[QLatin1String("nb_pages")].toInt();
  m_publication_date = variant_hash[QLatin1String("publication_date")].toString();
  m_url = variant_hash[QLatin1String("url")].toString();
}

C2cBooks::C2cBooks(const QVariantList & variants)
 : C2cBooks()
{
  m_document_id = variants[0].toInt();
  m_activities = variants[1].toStringList();
  m_author = variants[2].toString();
  m_book_types = variants[3].toStringList();
  m_editor = variants[4].toString();
  m_isbn = variants[5].toString();
  m_langs = variants[6].toStringList();
  m_nb_pages = variants[7].toInt();
  m_publication_date = variants[8].toString();
  m_url = variants[9].toString();
}

C2cBooks::C2cBooks(const QSqlRecord & record)
 : QoRow<C2cBooksSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_activities = record.value(1).toStringList();
  m_author = record.value(2).toString();
  m_book_types = record.value(3).toStringList();
  m_editor = record.value(4).toString();
  m_isbn = record.value(5).toString();
  m_langs = record.value(6).toStringList();
  m_nb_pages = record.value(7).toInt();
  m_publication_date = record.value(8).toString();
  m_url = record.value(9).toString();
}

C2cBooks::C2cBooks(const QSqlQuery & query, int offset)
 : QoRow<C2cBooksSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_activities = query.value(offset++).toStringList();
  m_author = query.value(offset++).toString();
  m_book_types = query.value(offset++).toStringList();
  m_editor = query.value(offset++).toString();
  m_isbn = query.value(offset++).toString();
  m_langs = query.value(offset++).toStringList();
  m_nb_pages = query.value(offset++).toInt();
  m_publication_date = query.value(offset++).toString();
  m_url = query.value(offset).toString();
}

C2cBooks::~C2cBooks()
{
// qATInfo() << "--- Delete" << "C2cBooks" << *this;
}

// bit array ?
C2cBooks &
C2cBooks::operator=(const C2cBooks & other)
{
  if (this != &other) {
    QoRow<C2cBooksSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_activities = other.m_activities;
    m_author = other.m_author;
    m_book_types = other.m_book_types;
    m_editor = other.m_editor;
    m_isbn = other.m_isbn;
    m_langs = other.m_langs;
    m_nb_pages = other.m_nb_pages;
    m_publication_date = other.m_publication_date;
    m_url = other.m_url;
  }

  return *this;
}

// bit array ?
bool
C2cBooks::operator==(const C2cBooks & other) const
{
  if (not QoRow<C2cBooksSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_author != other.m_author)
    return false;
  if (m_book_types != other.m_book_types)
    return false;
  if (m_editor != other.m_editor)
    return false;
  if (m_isbn != other.m_isbn)
    return false;
  if (m_langs != other.m_langs)
    return false;
  if (m_nb_pages != other.m_nb_pages)
    return false;
  if (m_publication_date != other.m_publication_date)
    return false;
  if (m_url != other.m_url)
    return false;

  return true;
}

void
C2cBooks::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_author(const QString & value)
{
  if (m_author != value) {
    m_author = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AUTHOR);

    emit authorChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_book_types(const QStringList & value)
{
  if (m_book_types != value) {
    m_book_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::BOOK_TYPES);

    emit book_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_editor(const QString & value)
{
  if (m_editor != value) {
    m_editor = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EDITOR);

    emit editorChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_isbn(const QString & value)
{
  if (m_isbn != value) {
    m_isbn = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ISBN);

    emit isbnChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_langs(const QStringList & value)
{
  if (m_langs != value) {
    m_langs = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LANGS);

    emit langsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_nb_pages(int value)
{
  if (m_nb_pages != value) {
    m_nb_pages = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NB_PAGES);

    emit nb_pagesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_publication_date(const QString & value)
{
  if (m_publication_date != value) {
    m_publication_date = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PUBLICATION_DATE);

    emit publication_dateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cBooks::set_url(const QString & value)
{
  if (m_url != value) {
    m_url = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::URL);

    emit urlChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cBooks::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_author_modified())
      json_object.insert(QLatin1String("author"), QJsonValue(m_author));
    if (is_book_types_modified())
      json_object.insert(QLatin1String("book_types"), orm_type_conversion::dump_string_list(m_book_types));
    if (is_editor_modified())
      json_object.insert(QLatin1String("editor"), QJsonValue(m_editor));
    if (is_isbn_modified())
      json_object.insert(QLatin1String("isbn"), QJsonValue(m_isbn));
    if (is_langs_modified())
      json_object.insert(QLatin1String("langs"), orm_type_conversion::dump_string_list(m_langs));
    if (is_nb_pages_modified())
      json_object.insert(QLatin1String("nb_pages"), QJsonValue(m_nb_pages));
    if (is_publication_date_modified())
      json_object.insert(QLatin1String("publication_date"), QJsonValue(m_publication_date));
    if (is_url_modified())
      json_object.insert(QLatin1String("url"), QJsonValue(m_url));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("author"), QJsonValue(m_author));
    json_object.insert(QLatin1String("book_types"), orm_type_conversion::dump_string_list(m_book_types));
    json_object.insert(QLatin1String("editor"), QJsonValue(m_editor));
    json_object.insert(QLatin1String("isbn"), QJsonValue(m_isbn));
    json_object.insert(QLatin1String("langs"), orm_type_conversion::dump_string_list(m_langs));
    json_object.insert(QLatin1String("nb_pages"), QJsonValue(m_nb_pages));
    json_object.insert(QLatin1String("publication_date"), QJsonValue(m_publication_date));
    json_object.insert(QLatin1String("url"), QJsonValue(m_url));
  }

  return json_object;
}

QVariantHash
C2cBooks::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_author_modified())
      variant_hash[QLatin1String("author")] = m_author;
    if (is_book_types_modified())
      variant_hash[QLatin1String("book_types")] = m_book_types;
    if (is_editor_modified())
      variant_hash[QLatin1String("editor")] = m_editor;
    if (is_isbn_modified())
      variant_hash[QLatin1String("isbn")] = m_isbn;
    if (is_langs_modified())
      variant_hash[QLatin1String("langs")] = m_langs;
    if (is_nb_pages_modified())
      variant_hash[QLatin1String("nb_pages")] = m_nb_pages;
    if (is_publication_date_modified())
      variant_hash[QLatin1String("publication_date")] = m_publication_date;
    if (is_url_modified())
      variant_hash[QLatin1String("url")] = m_url;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("author")] = m_author;
    variant_hash[QLatin1String("book_types")] = m_book_types;
    variant_hash[QLatin1String("editor")] = m_editor;
    variant_hash[QLatin1String("isbn")] = m_isbn;
    variant_hash[QLatin1String("langs")] = m_langs;
    variant_hash[QLatin1String("nb_pages")] = m_nb_pages;
    variant_hash[QLatin1String("publication_date")] = m_publication_date;
    variant_hash[QLatin1String("url")] = m_url;
  }

  return variant_hash;
}

QVariantList
C2cBooks::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_activities;
  variants << m_author;
  variants << m_book_types;
  variants << m_editor;
  variants << m_isbn;
  variants << m_langs;
  variants << m_nb_pages;
  variants << m_publication_date;
  variants << m_url;

  return variants;
}

QVariantHash
C2cBooks::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_author_modified())
      variant_hash[QLatin1String("author")] = m_author;
    if (is_book_types_modified())
      variant_hash[QLatin1String("book_types")] = m_book_types;
    if (is_editor_modified())
      variant_hash[QLatin1String("editor")] = m_editor;
    if (is_isbn_modified())
      variant_hash[QLatin1String("isbn")] = m_isbn;
    if (is_langs_modified())
      variant_hash[QLatin1String("langs")] = m_langs;
    if (is_nb_pages_modified())
      variant_hash[QLatin1String("nb_pages")] = m_nb_pages;
    if (is_publication_date_modified())
      variant_hash[QLatin1String("publication_date")] = m_publication_date;
    if (is_url_modified())
      variant_hash[QLatin1String("url")] = m_url;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("author")] = m_author;
    variant_hash[QLatin1String("book_types")] = m_book_types;
    variant_hash[QLatin1String("editor")] = m_editor;
    variant_hash[QLatin1String("isbn")] = m_isbn;
    variant_hash[QLatin1String("langs")] = m_langs;
    variant_hash[QLatin1String("nb_pages")] = m_nb_pages;
    variant_hash[QLatin1String("publication_date")] = m_publication_date;
    variant_hash[QLatin1String("url")] = m_url;
  }

  return variant_hash;
}

QVariantList
C2cBooks::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_activities;
  variants << m_author;
  variants << m_book_types;
  variants << m_editor;
  variants << m_isbn;
  variants << m_langs;
  variants << m_nb_pages;
  variants << m_publication_date;
  variants << m_url;

  return variants;
}

QVariant
C2cBooks::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::AUTHOR:
     return m_author;
   case Schema::Fields::BOOK_TYPES:
     return m_book_types;
   case Schema::Fields::EDITOR:
     return m_editor;
   case Schema::Fields::ISBN:
     return m_isbn;
   case Schema::Fields::LANGS:
     return m_langs;
   case Schema::Fields::NB_PAGES:
     return m_nb_pages;
   case Schema::Fields::PUBLICATION_DATE:
     return m_publication_date;
   case Schema::Fields::URL:
     return m_url;
   default:
     return QVariant(); // error
  }
}

void
C2cBooks::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::AUTHOR: {
     m_author = value.toString();
     break;
   }
   case Schema::Fields::BOOK_TYPES: {
     m_book_types = value.toStringList();
     break;
   }
   case Schema::Fields::EDITOR: {
     m_editor = value.toString();
     break;
   }
   case Schema::Fields::ISBN: {
     m_isbn = value.toString();
     break;
   }
   case Schema::Fields::LANGS: {
     m_langs = value.toStringList();
     break;
   }
   case Schema::Fields::NB_PAGES: {
     m_nb_pages = value.toInt();
     break;
   }
   case Schema::Fields::PUBLICATION_DATE: {
     m_publication_date = value.toString();
     break;
   }
   case Schema::Fields::URL: {
     m_url = value.toString();
     break;
   }
  }
}

void
C2cBooks::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cBooks::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cBooks::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cBooks & obj)
{
  out << obj.document_id();
  out << obj.activities();
  out << obj.author();
  out << obj.book_types();
  out << obj.editor();
  out << obj.isbn();
  out << obj.langs();
  out << obj.nb_pages();
  out << obj.publication_date();
  out << obj.url();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cBooks & obj)
{
  QString _QString;
  QStringList _QStringList;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QString;
  obj.set_author(_QString);
  in >> _QStringList;
  obj.set_book_types(_QStringList);
  in >> _QString;
  obj.set_editor(_QString);
  in >> _QString;
  obj.set_isbn(_QString);
  in >> _QStringList;
  obj.set_langs(_QStringList);
  in >> _int;
  obj.set_nb_pages(_int);
  in >> _QString;
  obj.set_publication_date(_QString);
  in >> _QString;
  obj.set_url(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cBooks & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cBooks(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.author();
  debug << QStringLiteral(", ");
  debug << obj.book_types();
  debug << QStringLiteral(", ");
  debug << obj.editor();
  debug << QStringLiteral(", ");
  debug << obj.isbn();
  debug << QStringLiteral(", ");
  debug << obj.langs();
  debug << QStringLiteral(", ");
  debug << obj.nb_pages();
  debug << QStringLiteral(", ");
  debug << obj.publication_date();
  debug << QStringLiteral(", ");
  debug << obj.url();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cBooksPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cBooksPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cBooksCache::C2cBooksCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cBooksCache::~C2cBooksCache()
{}

void
C2cBooksCache::add(C2cBooksPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cBooks::changed,
                   this, &C2cBooksCache::on_changed);
}

void
C2cBooksCache::remove(C2cBooksPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cBooksCache::on_changed()
{
  C2cBooks * row = qobject_cast<C2cBooks *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cBooksPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cBooksModel::C2cBooksModel()
  : QAbstractListModel(),
    m_items()
{}

C2cBooksModel::C2cBooksModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cBooksModel::~C2cBooksModel()
{}

int
C2cBooksModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cBooksModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cBooksModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACTIVITIES:
    return item->activities();
  case AUTHOR:
    return item->author();
  case BOOK_TYPES:
    return item->book_types();
  case EDITOR:
    return item->editor();
  case ISBN:
    return item->isbn();
  case LANGS:
    return item->langs();
  case NB_PAGES:
    return item->nb_pages();
  case PUBLICATION_DATE:
    return item->publication_date();
  case URL:
    return item->url();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cBooksModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[AUTHOR] = QStringLiteral("author").latin1();
  role_names[BOOK_TYPES] = QStringLiteral("book_types").latin1();
  role_names[EDITOR] = QStringLiteral("editor").latin1();
  role_names[ISBN] = QStringLiteral("isbn").latin1();
  role_names[LANGS] = QStringLiteral("langs").latin1();
  role_names[NB_PAGES] = QStringLiteral("nb_pages").latin1();
  role_names[PUBLICATION_DATE] = QStringLiteral("publication_date").latin1();
  role_names[URL] = QStringLiteral("url").latin1();

  return role_names;
}

void
C2cBooksModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cBooksModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cDocumentsSchema::C2cDocumentsSchema()
: QoSchema(QLatin1String("C2cDocuments"), QLatin1String("c2c_documents"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("protected_flag"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("protected"),
      QLatin1String("protected"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("quality"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("quality"),
      QLatin1String("quality"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("redirects_to"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("redirects_to"),
      QLatin1String("redirects_to"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("type"),
      QLatin1String("QChar"),
      QLatin1String("text"),
      QLatin1String("type"),
      QLatin1String("type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("version"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("version"),
      QLatin1String("version"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cDocumentsSchema::~C2cDocumentsSchema()
{}

/**************************************************************************************************/

C2cDocuments::C2cDocuments()
  : QObject(),
    QoRow<C2cDocumentsSchema>(),
    m_document_id(),
    m_protected_flag(),
    m_quality(),
    m_redirects_to(),
    m_type(),
    m_version()
{
}

C2cDocuments::C2cDocuments(const C2cDocuments & other)
  : QObject(),
    QoRow<C2cDocumentsSchema>(other),
    m_document_id(other.m_document_id),
    m_protected_flag(other.m_protected_flag),
    m_quality(other.m_quality),
    m_redirects_to(other.m_redirects_to),
    m_type(other.m_type),
    m_version(other.m_version)
{
}

C2cDocuments::C2cDocuments(const QJsonObject & json_object)
 : C2cDocuments()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_protected_flag = json_object[QLatin1String("protected_flag")].toBool();
  m_quality = json_object[QLatin1String("quality")].toString();
  m_redirects_to = json_object[QLatin1String("redirects_to")].toInt();
  m_type = json_object[QLatin1String("type")].toVariant().toChar();
  m_version = json_object[QLatin1String("version")].toInt();
}

C2cDocuments::C2cDocuments(const QVariantHash & variant_hash)
 : C2cDocuments()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_protected_flag = variant_hash[QLatin1String("protected_flag")].toBool();
  m_quality = variant_hash[QLatin1String("quality")].toString();
  m_redirects_to = variant_hash[QLatin1String("redirects_to")].toInt();
  m_type = variant_hash[QLatin1String("type")].toChar();
  m_version = variant_hash[QLatin1String("version")].toInt();
}

C2cDocuments::C2cDocuments(const QVariantList & variants)
 : C2cDocuments()
{
  m_document_id = variants[0].toInt();
  m_protected_flag = variants[1].toBool();
  m_quality = variants[2].toString();
  m_redirects_to = variants[3].toInt();
  m_type = variants[4].toChar();
  m_version = variants[5].toInt();
}

C2cDocuments::C2cDocuments(const QSqlRecord & record)
 : QoRow<C2cDocumentsSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_protected_flag = record.value(1).toBool();
  m_quality = record.value(2).toString();
  m_redirects_to = record.value(3).toInt();
  m_type = record.value(4).toChar();
  m_version = record.value(5).toInt();
}

C2cDocuments::C2cDocuments(const QSqlQuery & query, int offset)
 : QoRow<C2cDocumentsSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_protected_flag = query.value(offset++).toBool();
  m_quality = query.value(offset++).toString();
  m_redirects_to = query.value(offset++).toInt();
  m_type = query.value(offset++).toChar();
  m_version = query.value(offset).toInt();
}

C2cDocuments::~C2cDocuments()
{
// qATInfo() << "--- Delete" << "C2cDocuments" << *this;
}

// bit array ?
C2cDocuments &
C2cDocuments::operator=(const C2cDocuments & other)
{
  if (this != &other) {
    QoRow<C2cDocumentsSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_protected_flag = other.m_protected_flag;
    m_quality = other.m_quality;
    m_redirects_to = other.m_redirects_to;
    m_type = other.m_type;
    m_version = other.m_version;
  }

  return *this;
}

// bit array ?
bool
C2cDocuments::operator==(const C2cDocuments & other) const
{
  if (not QoRow<C2cDocumentsSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_protected_flag != other.m_protected_flag)
    return false;
  if (m_quality != other.m_quality)
    return false;
  if (m_redirects_to != other.m_redirects_to)
    return false;
  if (m_type != other.m_type)
    return false;
  if (m_version != other.m_version)
    return false;

  return true;
}

void
C2cDocuments::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocuments::set_protected_flag(bool value)
{
  if (m_protected_flag != value) {
    m_protected_flag = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PROTECTED_FLAG);

    emit protected_flagChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocuments::set_quality(const QString & value)
{
  if (m_quality != value) {
    m_quality = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::QUALITY);

    emit qualityChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocuments::set_redirects_to(int value)
{
  if (m_redirects_to != value) {
    m_redirects_to = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::REDIRECTS_TO);

    emit redirects_toChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocuments::set_type(const QChar & value)
{
  if (m_type != value) {
    m_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TYPE);

    emit typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocuments::set_version(int value)
{
  if (m_version != value) {
    m_version = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VERSION);

    emit versionChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cDocuments::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_protected_flag_modified())
      json_object.insert(QLatin1String("protected"), QJsonValue(m_protected_flag));
    if (is_quality_modified())
      json_object.insert(QLatin1String("quality"), QJsonValue(m_quality));
    if (is_redirects_to_modified())
      json_object.insert(QLatin1String("redirects_to"), QJsonValue(m_redirects_to));
    if (is_type_modified())
      json_object.insert(QLatin1String("type"), QJsonValue(m_type));
    if (is_version_modified())
      json_object.insert(QLatin1String("version"), QJsonValue(m_version));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("protected"), QJsonValue(m_protected_flag));
    json_object.insert(QLatin1String("quality"), QJsonValue(m_quality));
    json_object.insert(QLatin1String("redirects_to"), QJsonValue(m_redirects_to));
    json_object.insert(QLatin1String("type"), QJsonValue(m_type));
    json_object.insert(QLatin1String("version"), QJsonValue(m_version));
  }

  return json_object;
}

QVariantHash
C2cDocuments::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_protected_flag_modified())
      variant_hash[QLatin1String("protected_flag")] = m_protected_flag;
    if (is_quality_modified())
      variant_hash[QLatin1String("quality")] = m_quality;
    if (is_redirects_to_modified())
      variant_hash[QLatin1String("redirects_to")] = m_redirects_to;
    if (is_type_modified())
      variant_hash[QLatin1String("type")] = m_type;
    if (is_version_modified())
      variant_hash[QLatin1String("version")] = m_version;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("protected_flag")] = m_protected_flag;
    variant_hash[QLatin1String("quality")] = m_quality;
    variant_hash[QLatin1String("redirects_to")] = m_redirects_to;
    variant_hash[QLatin1String("type")] = m_type;
    variant_hash[QLatin1String("version")] = m_version;
  }

  return variant_hash;
}

QVariantList
C2cDocuments::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_protected_flag;
  variants << m_quality;
  variants << m_redirects_to;
  variants << m_type;
  variants << m_version;

  return variants;
}

QVariantHash
C2cDocuments::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_protected_flag_modified())
      variant_hash[QLatin1String("protected_flag")] = m_protected_flag;
    if (is_quality_modified())
      variant_hash[QLatin1String("quality")] = m_quality;
    if (is_redirects_to_modified())
      variant_hash[QLatin1String("redirects_to")] = m_redirects_to;
    if (is_type_modified())
      variant_hash[QLatin1String("type")] = m_type;
    if (is_version_modified())
      variant_hash[QLatin1String("version")] = m_version;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("protected_flag")] = m_protected_flag;
    variant_hash[QLatin1String("quality")] = m_quality;
    variant_hash[QLatin1String("redirects_to")] = m_redirects_to;
    variant_hash[QLatin1String("type")] = m_type;
    variant_hash[QLatin1String("version")] = m_version;
  }

  return variant_hash;
}

QVariantList
C2cDocuments::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_protected_flag;
  variants << m_quality;
  variants << m_redirects_to;
  variants << m_type;
  variants << m_version;

  return variants;
}

QVariant
C2cDocuments::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::PROTECTED_FLAG:
     return m_protected_flag;
   case Schema::Fields::QUALITY:
     return m_quality;
   case Schema::Fields::REDIRECTS_TO:
     return m_redirects_to;
   case Schema::Fields::TYPE:
     return m_type;
   case Schema::Fields::VERSION:
     return m_version;
   default:
     return QVariant(); // error
  }
}

void
C2cDocuments::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::PROTECTED_FLAG: {
     m_protected_flag = value.toBool();
     break;
   }
   case Schema::Fields::QUALITY: {
     m_quality = value.toString();
     break;
   }
   case Schema::Fields::REDIRECTS_TO: {
     m_redirects_to = value.toInt();
     break;
   }
   case Schema::Fields::TYPE: {
     m_type = value.toChar();
     break;
   }
   case Schema::Fields::VERSION: {
     m_version = value.toInt();
     break;
   }
  }
}

void
C2cDocuments::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cDocuments::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cDocuments::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cDocuments & obj)
{
  out << obj.document_id();
  out << obj.protected_flag();
  out << obj.quality();
  out << obj.redirects_to();
  out << obj.type();
  out << obj.version();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cDocuments & obj)
{
  QChar _QChar;
  QString _QString;
  bool _bool;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _bool;
  obj.set_protected_flag(_bool);
  in >> _QString;
  obj.set_quality(_QString);
  in >> _int;
  obj.set_redirects_to(_int);
  in >> _QChar;
  obj.set_type(_QChar);
  in >> _int;
  obj.set_version(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocuments & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cDocuments(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.protected_flag();
  debug << QStringLiteral(", ");
  debug << obj.quality();
  debug << QStringLiteral(", ");
  debug << obj.redirects_to();
  debug << QStringLiteral(", ");
  debug << obj.type();
  debug << QStringLiteral(", ");
  debug << obj.version();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cDocumentsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cDocumentsCache::C2cDocumentsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cDocumentsCache::~C2cDocumentsCache()
{}

void
C2cDocumentsCache::add(C2cDocumentsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cDocuments::changed,
                   this, &C2cDocumentsCache::on_changed);
}

void
C2cDocumentsCache::remove(C2cDocumentsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cDocumentsCache::on_changed()
{
  C2cDocuments * row = qobject_cast<C2cDocuments *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cDocumentsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cDocumentsModel::C2cDocumentsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cDocumentsModel::C2cDocumentsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cDocumentsModel::~C2cDocumentsModel()
{}

int
C2cDocumentsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cDocumentsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cDocumentsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case PROTECTED_FLAG:
    return item->protected_flag();
  case QUALITY:
    return item->quality();
  case REDIRECTS_TO:
    return item->redirects_to();
  case TYPE:
    return item->type();
  case VERSION:
    return item->version();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cDocumentsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[PROTECTED_FLAG] = QStringLiteral("protected_flag").latin1();
  role_names[QUALITY] = QStringLiteral("quality").latin1();
  role_names[REDIRECTS_TO] = QStringLiteral("redirects_to").latin1();
  role_names[TYPE] = QStringLiteral("type").latin1();
  role_names[VERSION] = QStringLiteral("version").latin1();

  return role_names;
}

void
C2cDocumentsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cDocumentsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cDocumentsGeometriesSchema::C2cDocumentsGeometriesSchema()
: QoSchema(QLatin1String("C2cDocumentsGeometries"), QLatin1String("c2c_documents_geometries"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("geom"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("geom"),
      QLatin1String("geom"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("geom_detail"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("geom_detail"),
      QLatin1String("geom_detail"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("version"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("version"),
      QLatin1String("version"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cDocumentsGeometriesSchema::~C2cDocumentsGeometriesSchema()
{}

/**************************************************************************************************/

C2cDocumentsGeometries::C2cDocumentsGeometries()
  : QObject(),
    QoRow<C2cDocumentsGeometriesSchema>(),
    m_document_id(),
    m_geom(),
    m_geom_detail(),
    m_version()
{
}

C2cDocumentsGeometries::C2cDocumentsGeometries(const C2cDocumentsGeometries & other)
  : QObject(),
    QoRow<C2cDocumentsGeometriesSchema>(other),
    m_document_id(other.m_document_id),
    m_geom(other.m_geom),
    m_geom_detail(other.m_geom_detail),
    m_version(other.m_version)
{
}

C2cDocumentsGeometries::C2cDocumentsGeometries(const QJsonObject & json_object)
 : C2cDocumentsGeometries()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_geom = json_object[QLatin1String("geom")].toString();
  m_geom_detail = json_object[QLatin1String("geom_detail")].toString();
  m_version = json_object[QLatin1String("version")].toInt();
}

C2cDocumentsGeometries::C2cDocumentsGeometries(const QVariantHash & variant_hash)
 : C2cDocumentsGeometries()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_geom = variant_hash[QLatin1String("geom")].toString();
  m_geom_detail = variant_hash[QLatin1String("geom_detail")].toString();
  m_version = variant_hash[QLatin1String("version")].toInt();
}

C2cDocumentsGeometries::C2cDocumentsGeometries(const QVariantList & variants)
 : C2cDocumentsGeometries()
{
  m_document_id = variants[0].toInt();
  m_geom = variants[1].toString();
  m_geom_detail = variants[2].toString();
  m_version = variants[3].toInt();
}

C2cDocumentsGeometries::C2cDocumentsGeometries(const QSqlRecord & record)
 : QoRow<C2cDocumentsGeometriesSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_geom = record.value(1).toString();
  m_geom_detail = record.value(2).toString();
  m_version = record.value(3).toInt();
}

C2cDocumentsGeometries::C2cDocumentsGeometries(const QSqlQuery & query, int offset)
 : QoRow<C2cDocumentsGeometriesSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_geom = query.value(offset++).toString();
  m_geom_detail = query.value(offset++).toString();
  m_version = query.value(offset).toInt();
}

C2cDocumentsGeometries::~C2cDocumentsGeometries()
{
// qATInfo() << "--- Delete" << "C2cDocumentsGeometries" << *this;
}

// bit array ?
C2cDocumentsGeometries &
C2cDocumentsGeometries::operator=(const C2cDocumentsGeometries & other)
{
  if (this != &other) {
    QoRow<C2cDocumentsGeometriesSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_geom = other.m_geom;
    m_geom_detail = other.m_geom_detail;
    m_version = other.m_version;
  }

  return *this;
}

// bit array ?
bool
C2cDocumentsGeometries::operator==(const C2cDocumentsGeometries & other) const
{
  if (not QoRow<C2cDocumentsGeometriesSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_geom != other.m_geom)
    return false;
  if (m_geom_detail != other.m_geom_detail)
    return false;
  if (m_version != other.m_version)
    return false;

  return true;
}

void
C2cDocumentsGeometries::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsGeometries::set_geom(const QString & value)
{
  if (m_geom != value) {
    m_geom = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GEOM);

    emit geomChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsGeometries::set_geom_detail(const QString & value)
{
  if (m_geom_detail != value) {
    m_geom_detail = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GEOM_DETAIL);

    emit geom_detailChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsGeometries::set_version(int value)
{
  if (m_version != value) {
    m_version = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VERSION);

    emit versionChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cDocumentsGeometries::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_geom_modified())
      json_object.insert(QLatin1String("geom"), QJsonValue(m_geom));
    if (is_geom_detail_modified())
      json_object.insert(QLatin1String("geom_detail"), QJsonValue(m_geom_detail));
    if (is_version_modified())
      json_object.insert(QLatin1String("version"), QJsonValue(m_version));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("geom"), QJsonValue(m_geom));
    json_object.insert(QLatin1String("geom_detail"), QJsonValue(m_geom_detail));
    json_object.insert(QLatin1String("version"), QJsonValue(m_version));
  }

  return json_object;
}

QVariantHash
C2cDocumentsGeometries::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_geom_modified())
      variant_hash[QLatin1String("geom")] = m_geom;
    if (is_geom_detail_modified())
      variant_hash[QLatin1String("geom_detail")] = m_geom_detail;
    if (is_version_modified())
      variant_hash[QLatin1String("version")] = m_version;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("geom")] = m_geom;
    variant_hash[QLatin1String("geom_detail")] = m_geom_detail;
    variant_hash[QLatin1String("version")] = m_version;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsGeometries::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_geom;
  variants << m_geom_detail;
  variants << m_version;

  return variants;
}

QVariantHash
C2cDocumentsGeometries::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_geom_modified())
      variant_hash[QLatin1String("geom")] = m_geom;
    if (is_geom_detail_modified())
      variant_hash[QLatin1String("geom_detail")] = m_geom_detail;
    if (is_version_modified())
      variant_hash[QLatin1String("version")] = m_version;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("geom")] = m_geom;
    variant_hash[QLatin1String("geom_detail")] = m_geom_detail;
    variant_hash[QLatin1String("version")] = m_version;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsGeometries::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_geom;
  variants << m_geom_detail;
  variants << m_version;

  return variants;
}

QVariant
C2cDocumentsGeometries::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::GEOM:
     return m_geom;
   case Schema::Fields::GEOM_DETAIL:
     return m_geom_detail;
   case Schema::Fields::VERSION:
     return m_version;
   default:
     return QVariant(); // error
  }
}

void
C2cDocumentsGeometries::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::GEOM: {
     m_geom = value.toString();
     break;
   }
   case Schema::Fields::GEOM_DETAIL: {
     m_geom_detail = value.toString();
     break;
   }
   case Schema::Fields::VERSION: {
     m_version = value.toInt();
     break;
   }
  }
}

void
C2cDocumentsGeometries::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cDocumentsGeometries::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cDocumentsGeometries::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cDocumentsGeometries & obj)
{
  out << obj.document_id();
  out << obj.geom();
  out << obj.geom_detail();
  out << obj.version();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cDocumentsGeometries & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QString;
  obj.set_geom(_QString);
  in >> _QString;
  obj.set_geom_detail(_QString);
  in >> _int;
  obj.set_version(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsGeometries & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cDocumentsGeometries(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.geom();
  debug << QStringLiteral(", ");
  debug << obj.geom_detail();
  debug << QStringLiteral(", ");
  debug << obj.version();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsGeometriesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cDocumentsGeometriesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cDocumentsGeometriesCache::C2cDocumentsGeometriesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cDocumentsGeometriesCache::~C2cDocumentsGeometriesCache()
{}

void
C2cDocumentsGeometriesCache::add(C2cDocumentsGeometriesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cDocumentsGeometries::changed,
                   this, &C2cDocumentsGeometriesCache::on_changed);
}

void
C2cDocumentsGeometriesCache::remove(C2cDocumentsGeometriesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cDocumentsGeometriesCache::on_changed()
{
  C2cDocumentsGeometries * row = qobject_cast<C2cDocumentsGeometries *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cDocumentsGeometriesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cDocumentsGeometriesModel::C2cDocumentsGeometriesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cDocumentsGeometriesModel::C2cDocumentsGeometriesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cDocumentsGeometriesModel::~C2cDocumentsGeometriesModel()
{}

int
C2cDocumentsGeometriesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cDocumentsGeometriesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cDocumentsGeometriesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case GEOM:
    return item->geom();
  case GEOM_DETAIL:
    return item->geom_detail();
  case VERSION:
    return item->version();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cDocumentsGeometriesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[GEOM] = QStringLiteral("geom").latin1();
  role_names[GEOM_DETAIL] = QStringLiteral("geom_detail").latin1();
  role_names[VERSION] = QStringLiteral("version").latin1();

  return role_names;
}

void
C2cDocumentsGeometriesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cDocumentsGeometriesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cDocumentsLocalesSchema::C2cDocumentsLocalesSchema()
: QoSchema(QLatin1String("C2cDocumentsLocales"), QLatin1String("c2c_documents_locales"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("description"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("description"),
      QLatin1String("description"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("lang"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("lang"),
      QLatin1String("lang"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("summary"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("summary"),
      QLatin1String("summary"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("title"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("title"),
      QLatin1String("title"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("type"),
      QLatin1String("QChar"),
      QLatin1String("text"),
      QLatin1String("type"),
      QLatin1String("type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("version"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("version"),
      QLatin1String("version"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cDocumentsLocalesSchema::~C2cDocumentsLocalesSchema()
{}

/**************************************************************************************************/

C2cDocumentsLocales::C2cDocumentsLocales()
  : QObject(),
    QoRow<C2cDocumentsLocalesSchema>(),
    m_id(),
    m_description(),
    m_document_id(),
    m_lang(),
    m_summary(),
    m_title(),
    m_type(),
    m_version()
{
}

C2cDocumentsLocales::C2cDocumentsLocales(const C2cDocumentsLocales & other)
  : QObject(),
    QoRow<C2cDocumentsLocalesSchema>(other),
    m_id(other.m_id),
    m_description(other.m_description),
    m_document_id(other.m_document_id),
    m_lang(other.m_lang),
    m_summary(other.m_summary),
    m_title(other.m_title),
    m_type(other.m_type),
    m_version(other.m_version)
{
}

C2cDocumentsLocales::C2cDocumentsLocales(const QJsonObject & json_object)
 : C2cDocumentsLocales()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_description = json_object[QLatin1String("description")].toString();
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_lang = json_object[QLatin1String("lang")].toString();
  m_summary = json_object[QLatin1String("summary")].toString();
  m_title = json_object[QLatin1String("title")].toString();
  m_type = json_object[QLatin1String("type")].toVariant().toChar();
  m_version = json_object[QLatin1String("version")].toInt();
}

C2cDocumentsLocales::C2cDocumentsLocales(const QVariantHash & variant_hash)
 : C2cDocumentsLocales()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_description = variant_hash[QLatin1String("description")].toString();
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_lang = variant_hash[QLatin1String("lang")].toString();
  m_summary = variant_hash[QLatin1String("summary")].toString();
  m_title = variant_hash[QLatin1String("title")].toString();
  m_type = variant_hash[QLatin1String("type")].toChar();
  m_version = variant_hash[QLatin1String("version")].toInt();
}

C2cDocumentsLocales::C2cDocumentsLocales(const QVariantList & variants)
 : C2cDocumentsLocales()
{
  m_id = variants[0].toInt();
  m_description = variants[1].toString();
  m_document_id = variants[2].toInt();
  m_lang = variants[3].toString();
  m_summary = variants[4].toString();
  m_title = variants[5].toString();
  m_type = variants[6].toChar();
  m_version = variants[7].toInt();
}

C2cDocumentsLocales::C2cDocumentsLocales(const QSqlRecord & record)
 : QoRow<C2cDocumentsLocalesSchema>(record)
{
  m_id = record.value(0).toInt();
  m_description = record.value(1).toString();
  m_document_id = record.value(2).toInt();
  m_lang = record.value(3).toString();
  m_summary = record.value(4).toString();
  m_title = record.value(5).toString();
  m_type = record.value(6).toChar();
  m_version = record.value(7).toInt();
}

C2cDocumentsLocales::C2cDocumentsLocales(const QSqlQuery & query, int offset)
 : QoRow<C2cDocumentsLocalesSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_description = query.value(offset++).toString();
  m_document_id = query.value(offset++).toInt();
  m_lang = query.value(offset++).toString();
  m_summary = query.value(offset++).toString();
  m_title = query.value(offset++).toString();
  m_type = query.value(offset++).toChar();
  m_version = query.value(offset).toInt();
}

C2cDocumentsLocales::~C2cDocumentsLocales()
{
// qATInfo() << "--- Delete" << "C2cDocumentsLocales" << *this;
}

// bit array ?
C2cDocumentsLocales &
C2cDocumentsLocales::operator=(const C2cDocumentsLocales & other)
{
  if (this != &other) {
    QoRow<C2cDocumentsLocalesSchema>::operator=(other);
    m_id = other.m_id;
    m_description = other.m_description;
    m_document_id = other.m_document_id;
    m_lang = other.m_lang;
    m_summary = other.m_summary;
    m_title = other.m_title;
    m_type = other.m_type;
    m_version = other.m_version;
  }

  return *this;
}

// bit array ?
bool
C2cDocumentsLocales::operator==(const C2cDocumentsLocales & other) const
{
  if (not QoRow<C2cDocumentsLocalesSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_description != other.m_description)
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_lang != other.m_lang)
    return false;
  if (m_summary != other.m_summary)
    return false;
  if (m_title != other.m_title)
    return false;
  if (m_type != other.m_type)
    return false;
  if (m_version != other.m_version)
    return false;

  return true;
}

void
C2cDocumentsLocales::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_description(const QString & value)
{
  if (m_description != value) {
    m_description = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DESCRIPTION);

    emit descriptionChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_lang(const QString & value)
{
  if (m_lang != value) {
    m_lang = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LANG);

    emit langChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_summary(const QString & value)
{
  if (m_summary != value) {
    m_summary = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SUMMARY);

    emit summaryChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_title(const QString & value)
{
  if (m_title != value) {
    m_title = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TITLE);

    emit titleChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_type(const QChar & value)
{
  if (m_type != value) {
    m_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TYPE);

    emit typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsLocales::set_version(int value)
{
  if (m_version != value) {
    m_version = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VERSION);

    emit versionChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cDocumentsLocales::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_description_modified())
      json_object.insert(QLatin1String("description"), QJsonValue(m_description));
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_lang_modified())
      json_object.insert(QLatin1String("lang"), QJsonValue(m_lang));
    if (is_summary_modified())
      json_object.insert(QLatin1String("summary"), QJsonValue(m_summary));
    if (is_title_modified())
      json_object.insert(QLatin1String("title"), QJsonValue(m_title));
    if (is_type_modified())
      json_object.insert(QLatin1String("type"), QJsonValue(m_type));
    if (is_version_modified())
      json_object.insert(QLatin1String("version"), QJsonValue(m_version));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("description"), QJsonValue(m_description));
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("lang"), QJsonValue(m_lang));
    json_object.insert(QLatin1String("summary"), QJsonValue(m_summary));
    json_object.insert(QLatin1String("title"), QJsonValue(m_title));
    json_object.insert(QLatin1String("type"), QJsonValue(m_type));
    json_object.insert(QLatin1String("version"), QJsonValue(m_version));
  }

  return json_object;
}

QVariantHash
C2cDocumentsLocales::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_description_modified())
      variant_hash[QLatin1String("description")] = m_description;
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_lang_modified())
      variant_hash[QLatin1String("lang")] = m_lang;
    if (is_summary_modified())
      variant_hash[QLatin1String("summary")] = m_summary;
    if (is_title_modified())
      variant_hash[QLatin1String("title")] = m_title;
    if (is_type_modified())
      variant_hash[QLatin1String("type")] = m_type;
    if (is_version_modified())
      variant_hash[QLatin1String("version")] = m_version;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("description")] = m_description;
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("lang")] = m_lang;
    variant_hash[QLatin1String("summary")] = m_summary;
    variant_hash[QLatin1String("title")] = m_title;
    variant_hash[QLatin1String("type")] = m_type;
    variant_hash[QLatin1String("version")] = m_version;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsLocales::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_description;
  variants << m_document_id;
  variants << m_lang;
  variants << m_summary;
  variants << m_title;
  variants << m_type;
  variants << m_version;

  return variants;
}

QVariantHash
C2cDocumentsLocales::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_description_modified())
      variant_hash[QLatin1String("description")] = m_description;
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_lang_modified())
      variant_hash[QLatin1String("lang")] = m_lang;
    if (is_summary_modified())
      variant_hash[QLatin1String("summary")] = m_summary;
    if (is_title_modified())
      variant_hash[QLatin1String("title")] = m_title;
    if (is_type_modified())
      variant_hash[QLatin1String("type")] = m_type;
    if (is_version_modified())
      variant_hash[QLatin1String("version")] = m_version;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("description")] = m_description;
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("lang")] = m_lang;
    variant_hash[QLatin1String("summary")] = m_summary;
    variant_hash[QLatin1String("title")] = m_title;
    variant_hash[QLatin1String("type")] = m_type;
    variant_hash[QLatin1String("version")] = m_version;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsLocales::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_description;
  variants << m_document_id;
  variants << m_lang;
  variants << m_summary;
  variants << m_title;
  variants << m_type;
  variants << m_version;

  return variants;
}

QVariant
C2cDocumentsLocales::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::DESCRIPTION:
     return m_description;
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::LANG:
     return m_lang;
   case Schema::Fields::SUMMARY:
     return m_summary;
   case Schema::Fields::TITLE:
     return m_title;
   case Schema::Fields::TYPE:
     return m_type;
   case Schema::Fields::VERSION:
     return m_version;
   default:
     return QVariant(); // error
  }
}

void
C2cDocumentsLocales::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::DESCRIPTION: {
     m_description = value.toString();
     break;
   }
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::LANG: {
     m_lang = value.toString();
     break;
   }
   case Schema::Fields::SUMMARY: {
     m_summary = value.toString();
     break;
   }
   case Schema::Fields::TITLE: {
     m_title = value.toString();
     break;
   }
   case Schema::Fields::TYPE: {
     m_type = value.toChar();
     break;
   }
   case Schema::Fields::VERSION: {
     m_version = value.toInt();
     break;
   }
  }
}

void
C2cDocumentsLocales::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cDocumentsLocales::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cDocumentsLocales::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cDocumentsLocales & obj)
{
  out << obj.id();
  out << obj.description();
  out << obj.document_id();
  out << obj.lang();
  out << obj.summary();
  out << obj.title();
  out << obj.type();
  out << obj.version();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cDocumentsLocales & obj)
{
  QChar _QChar;
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QString;
  obj.set_description(_QString);
  in >> _int;
  obj.set_document_id(_int);
  in >> _QString;
  obj.set_lang(_QString);
  in >> _QString;
  obj.set_summary(_QString);
  in >> _QString;
  obj.set_title(_QString);
  in >> _QChar;
  obj.set_type(_QChar);
  in >> _int;
  obj.set_version(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsLocales & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cDocumentsLocales(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.description();
  debug << QStringLiteral(", ");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.lang();
  debug << QStringLiteral(", ");
  debug << obj.summary();
  debug << QStringLiteral(", ");
  debug << obj.title();
  debug << QStringLiteral(", ");
  debug << obj.type();
  debug << QStringLiteral(", ");
  debug << obj.version();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsLocalesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cDocumentsLocalesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cDocumentsLocalesCache::C2cDocumentsLocalesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cDocumentsLocalesCache::~C2cDocumentsLocalesCache()
{}

void
C2cDocumentsLocalesCache::add(C2cDocumentsLocalesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cDocumentsLocales::changed,
                   this, &C2cDocumentsLocalesCache::on_changed);
}

void
C2cDocumentsLocalesCache::remove(C2cDocumentsLocalesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cDocumentsLocalesCache::on_changed()
{
  C2cDocumentsLocales * row = qobject_cast<C2cDocumentsLocales *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cDocumentsLocalesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cDocumentsLocalesModel::C2cDocumentsLocalesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cDocumentsLocalesModel::C2cDocumentsLocalesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cDocumentsLocalesModel::~C2cDocumentsLocalesModel()
{}

int
C2cDocumentsLocalesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cDocumentsLocalesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cDocumentsLocalesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case DESCRIPTION:
    return item->description();
  case DOCUMENT_ID:
    return item->document_id();
  case LANG:
    return item->lang();
  case SUMMARY:
    return item->summary();
  case TITLE:
    return item->title();
  case TYPE:
    return item->type();
  case VERSION:
    return item->version();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cDocumentsLocalesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[DESCRIPTION] = QStringLiteral("description").latin1();
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[LANG] = QStringLiteral("lang").latin1();
  role_names[SUMMARY] = QStringLiteral("summary").latin1();
  role_names[TITLE] = QStringLiteral("title").latin1();
  role_names[TYPE] = QStringLiteral("type").latin1();
  role_names[VERSION] = QStringLiteral("version").latin1();

  return role_names;
}

void
C2cDocumentsLocalesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cDocumentsLocalesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cDocumentsTopicsSchema::C2cDocumentsTopicsSchema()
: QoSchema(QLatin1String("C2cDocumentsTopics"), QLatin1String("c2c_documents_topics"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_locale_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_locale_id"),
      QLatin1String("document_locale_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("topic_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("topic_id"),
      QLatin1String("topic_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cDocumentsTopicsSchema::~C2cDocumentsTopicsSchema()
{}

/**************************************************************************************************/

C2cDocumentsTopics::C2cDocumentsTopics()
  : QObject(),
    QoRow<C2cDocumentsTopicsSchema>(),
    m_document_locale_id(),
    m_topic_id()
{
}

C2cDocumentsTopics::C2cDocumentsTopics(const C2cDocumentsTopics & other)
  : QObject(),
    QoRow<C2cDocumentsTopicsSchema>(other),
    m_document_locale_id(other.m_document_locale_id),
    m_topic_id(other.m_topic_id)
{
}

C2cDocumentsTopics::C2cDocumentsTopics(const QJsonObject & json_object)
 : C2cDocumentsTopics()
{
  m_document_locale_id = json_object[QLatin1String("document_locale_id")].toInt();
  m_topic_id = json_object[QLatin1String("topic_id")].toInt();
}

C2cDocumentsTopics::C2cDocumentsTopics(const QVariantHash & variant_hash)
 : C2cDocumentsTopics()
{
  m_document_locale_id = variant_hash[QLatin1String("document_locale_id")].toInt();
  m_topic_id = variant_hash[QLatin1String("topic_id")].toInt();
}

C2cDocumentsTopics::C2cDocumentsTopics(const QVariantList & variants)
 : C2cDocumentsTopics()
{
  m_document_locale_id = variants[0].toInt();
  m_topic_id = variants[1].toInt();
}

C2cDocumentsTopics::C2cDocumentsTopics(const QSqlRecord & record)
 : QoRow<C2cDocumentsTopicsSchema>(record)
{
  m_document_locale_id = record.value(0).toInt();
  m_topic_id = record.value(1).toInt();
}

C2cDocumentsTopics::C2cDocumentsTopics(const QSqlQuery & query, int offset)
 : QoRow<C2cDocumentsTopicsSchema>(query)
{
  m_document_locale_id = query.value(offset++).toInt();
  m_topic_id = query.value(offset).toInt();
}

C2cDocumentsTopics::~C2cDocumentsTopics()
{
// qATInfo() << "--- Delete" << "C2cDocumentsTopics" << *this;
}

// bit array ?
C2cDocumentsTopics &
C2cDocumentsTopics::operator=(const C2cDocumentsTopics & other)
{
  if (this != &other) {
    QoRow<C2cDocumentsTopicsSchema>::operator=(other);
    m_document_locale_id = other.m_document_locale_id;
    m_topic_id = other.m_topic_id;
  }

  return *this;
}

// bit array ?
bool
C2cDocumentsTopics::operator==(const C2cDocumentsTopics & other) const
{
  if (not QoRow<C2cDocumentsTopicsSchema>::operator==(other))
    return false;
  if (m_document_locale_id != other.m_document_locale_id)
    return false;
  if (m_topic_id != other.m_topic_id)
    return false;

  return true;
}

void
C2cDocumentsTopics::set_document_locale_id(int value)
{
  if (m_document_locale_id != value) {
    m_document_locale_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_LOCALE_ID);

    emit document_locale_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsTopics::set_topic_id(int value)
{
  if (m_topic_id != value) {
    m_topic_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TOPIC_ID);

    emit topic_idChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cDocumentsTopics::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_locale_id_modified())
      json_object.insert(QLatin1String("document_locale_id"), QJsonValue(m_document_locale_id));
    if (is_topic_id_modified())
      json_object.insert(QLatin1String("topic_id"), QJsonValue(m_topic_id));
  } else {
    json_object.insert(QLatin1String("document_locale_id"), QJsonValue(m_document_locale_id));
    json_object.insert(QLatin1String("topic_id"), QJsonValue(m_topic_id));
  }

  return json_object;
}

QVariantHash
C2cDocumentsTopics::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_locale_id_modified())
      variant_hash[QLatin1String("document_locale_id")] = m_document_locale_id;
    if (is_topic_id_modified())
      variant_hash[QLatin1String("topic_id")] = m_topic_id;
  } else {
    variant_hash[QLatin1String("document_locale_id")] = m_document_locale_id;
    variant_hash[QLatin1String("topic_id")] = m_topic_id;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsTopics::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_locale_id;
  variants << m_topic_id;

  return variants;
}

QVariantHash
C2cDocumentsTopics::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_locale_id_modified())
      variant_hash[QLatin1String("document_locale_id")] = m_document_locale_id;
    if (is_topic_id_modified())
      variant_hash[QLatin1String("topic_id")] = m_topic_id;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_locale_id")] = m_document_locale_id;
    variant_hash[QLatin1String("topic_id")] = m_topic_id;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsTopics::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_locale_id;
  variants << m_topic_id;

  return variants;
}

QVariant
C2cDocumentsTopics::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_LOCALE_ID:
     return m_document_locale_id;
   case Schema::Fields::TOPIC_ID:
     return m_topic_id;
   default:
     return QVariant(); // error
  }
}

void
C2cDocumentsTopics::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_LOCALE_ID: {
     m_document_locale_id = value.toInt();
     break;
   }
   case Schema::Fields::TOPIC_ID: {
     m_topic_id = value.toInt();
     break;
   }
  }
}

void
C2cDocumentsTopics::set_insert_id(int id)
{
  set_document_locale_id(id);

}

bool
C2cDocumentsTopics::can_update() const
{
  return m_document_locale_id > 0;
}

QVariantHash
C2cDocumentsTopics::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_locale_id")] = m_document_locale_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cDocumentsTopics & obj)
{
  out << obj.document_locale_id();
  out << obj.topic_id();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cDocumentsTopics & obj)
{
  int _int;
  in >> _int;
  obj.set_document_locale_id(_int);
  in >> _int;
  obj.set_topic_id(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsTopics & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cDocumentsTopics(");
  debug << obj.document_locale_id();
  debug << QStringLiteral(", ");
  debug << obj.topic_id();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsTopicsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cDocumentsTopicsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cDocumentsTopicsCache::C2cDocumentsTopicsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cDocumentsTopicsCache::~C2cDocumentsTopicsCache()
{}

void
C2cDocumentsTopicsCache::add(C2cDocumentsTopicsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cDocumentsTopics::changed,
                   this, &C2cDocumentsTopicsCache::on_changed);
}

void
C2cDocumentsTopicsCache::remove(C2cDocumentsTopicsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cDocumentsTopicsCache::on_changed()
{
  C2cDocumentsTopics * row = qobject_cast<C2cDocumentsTopics *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cDocumentsTopicsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cDocumentsTopicsModel::C2cDocumentsTopicsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cDocumentsTopicsModel::C2cDocumentsTopicsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cDocumentsTopicsModel::~C2cDocumentsTopicsModel()
{}

int
C2cDocumentsTopicsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cDocumentsTopicsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cDocumentsTopicsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_LOCALE_ID:
    return item->document_locale_id();
  case TOPIC_ID:
    return item->topic_id();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cDocumentsTopicsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_LOCALE_ID] = QStringLiteral("document_locale_id").latin1();
  role_names[TOPIC_ID] = QStringLiteral("topic_id").latin1();

  return role_names;
}

void
C2cDocumentsTopicsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cDocumentsTopicsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cDocumentsVersionsSchema::C2cDocumentsVersionsSchema()
: QoSchema(QLatin1String("C2cDocumentsVersions"), QLatin1String("c2c_documents_versions"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("document_archive_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_archive_id"),
      QLatin1String("document_archive_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("document_geometry_archive_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_geometry_archive_id"),
      QLatin1String("document_geometry_archive_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("document_locales_archive_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_locales_archive_id"),
      QLatin1String("document_locales_archive_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("history_metadata_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("history_metadata_id"),
      QLatin1String("history_metadata_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("lang"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("lang"),
      QLatin1String("lang"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cDocumentsVersionsSchema::~C2cDocumentsVersionsSchema()
{}

/**************************************************************************************************/

C2cDocumentsVersions::C2cDocumentsVersions()
  : QObject(),
    QoRow<C2cDocumentsVersionsSchema>(),
    m_id(),
    m_document_archive_id(),
    m_document_geometry_archive_id(),
    m_document_id(),
    m_document_locales_archive_id(),
    m_history_metadata_id(),
    m_lang()
{
}

C2cDocumentsVersions::C2cDocumentsVersions(const C2cDocumentsVersions & other)
  : QObject(),
    QoRow<C2cDocumentsVersionsSchema>(other),
    m_id(other.m_id),
    m_document_archive_id(other.m_document_archive_id),
    m_document_geometry_archive_id(other.m_document_geometry_archive_id),
    m_document_id(other.m_document_id),
    m_document_locales_archive_id(other.m_document_locales_archive_id),
    m_history_metadata_id(other.m_history_metadata_id),
    m_lang(other.m_lang)
{
}

C2cDocumentsVersions::C2cDocumentsVersions(const QJsonObject & json_object)
 : C2cDocumentsVersions()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_document_archive_id = json_object[QLatin1String("document_archive_id")].toInt();
  m_document_geometry_archive_id = json_object[QLatin1String("document_geometry_archive_id")].toInt();
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_document_locales_archive_id = json_object[QLatin1String("document_locales_archive_id")].toInt();
  m_history_metadata_id = json_object[QLatin1String("history_metadata_id")].toInt();
  m_lang = json_object[QLatin1String("lang")].toString();
}

C2cDocumentsVersions::C2cDocumentsVersions(const QVariantHash & variant_hash)
 : C2cDocumentsVersions()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_document_archive_id = variant_hash[QLatin1String("document_archive_id")].toInt();
  m_document_geometry_archive_id = variant_hash[QLatin1String("document_geometry_archive_id")].toInt();
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_document_locales_archive_id = variant_hash[QLatin1String("document_locales_archive_id")].toInt();
  m_history_metadata_id = variant_hash[QLatin1String("history_metadata_id")].toInt();
  m_lang = variant_hash[QLatin1String("lang")].toString();
}

C2cDocumentsVersions::C2cDocumentsVersions(const QVariantList & variants)
 : C2cDocumentsVersions()
{
  m_id = variants[0].toInt();
  m_document_archive_id = variants[1].toInt();
  m_document_geometry_archive_id = variants[2].toInt();
  m_document_id = variants[3].toInt();
  m_document_locales_archive_id = variants[4].toInt();
  m_history_metadata_id = variants[5].toInt();
  m_lang = variants[6].toString();
}

C2cDocumentsVersions::C2cDocumentsVersions(const QSqlRecord & record)
 : QoRow<C2cDocumentsVersionsSchema>(record)
{
  m_id = record.value(0).toInt();
  m_document_archive_id = record.value(1).toInt();
  m_document_geometry_archive_id = record.value(2).toInt();
  m_document_id = record.value(3).toInt();
  m_document_locales_archive_id = record.value(4).toInt();
  m_history_metadata_id = record.value(5).toInt();
  m_lang = record.value(6).toString();
}

C2cDocumentsVersions::C2cDocumentsVersions(const QSqlQuery & query, int offset)
 : QoRow<C2cDocumentsVersionsSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_document_archive_id = query.value(offset++).toInt();
  m_document_geometry_archive_id = query.value(offset++).toInt();
  m_document_id = query.value(offset++).toInt();
  m_document_locales_archive_id = query.value(offset++).toInt();
  m_history_metadata_id = query.value(offset++).toInt();
  m_lang = query.value(offset).toString();
}

C2cDocumentsVersions::~C2cDocumentsVersions()
{
// qATInfo() << "--- Delete" << "C2cDocumentsVersions" << *this;
}

// bit array ?
C2cDocumentsVersions &
C2cDocumentsVersions::operator=(const C2cDocumentsVersions & other)
{
  if (this != &other) {
    QoRow<C2cDocumentsVersionsSchema>::operator=(other);
    m_id = other.m_id;
    m_document_archive_id = other.m_document_archive_id;
    m_document_geometry_archive_id = other.m_document_geometry_archive_id;
    m_document_id = other.m_document_id;
    m_document_locales_archive_id = other.m_document_locales_archive_id;
    m_history_metadata_id = other.m_history_metadata_id;
    m_lang = other.m_lang;
  }

  return *this;
}

// bit array ?
bool
C2cDocumentsVersions::operator==(const C2cDocumentsVersions & other) const
{
  if (not QoRow<C2cDocumentsVersionsSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_document_archive_id != other.m_document_archive_id)
    return false;
  if (m_document_geometry_archive_id != other.m_document_geometry_archive_id)
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_document_locales_archive_id != other.m_document_locales_archive_id)
    return false;
  if (m_history_metadata_id != other.m_history_metadata_id)
    return false;
  if (m_lang != other.m_lang)
    return false;

  return true;
}

void
C2cDocumentsVersions::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsVersions::set_document_archive_id(int value)
{
  if (m_document_archive_id != value) {
    m_document_archive_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ARCHIVE_ID);

    emit document_archive_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsVersions::set_document_geometry_archive_id(int value)
{
  if (m_document_geometry_archive_id != value) {
    m_document_geometry_archive_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_GEOMETRY_ARCHIVE_ID);

    emit document_geometry_archive_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsVersions::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsVersions::set_document_locales_archive_id(int value)
{
  if (m_document_locales_archive_id != value) {
    m_document_locales_archive_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_LOCALES_ARCHIVE_ID);

    emit document_locales_archive_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsVersions::set_history_metadata_id(int value)
{
  if (m_history_metadata_id != value) {
    m_history_metadata_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HISTORY_METADATA_ID);

    emit history_metadata_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cDocumentsVersions::set_lang(const QString & value)
{
  if (m_lang != value) {
    m_lang = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LANG);

    emit langChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cDocumentsVersions::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_document_archive_id_modified())
      json_object.insert(QLatin1String("document_archive_id"), QJsonValue(m_document_archive_id));
    if (is_document_geometry_archive_id_modified())
      json_object.insert(QLatin1String("document_geometry_archive_id"), QJsonValue(m_document_geometry_archive_id));
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_document_locales_archive_id_modified())
      json_object.insert(QLatin1String("document_locales_archive_id"), QJsonValue(m_document_locales_archive_id));
    if (is_history_metadata_id_modified())
      json_object.insert(QLatin1String("history_metadata_id"), QJsonValue(m_history_metadata_id));
    if (is_lang_modified())
      json_object.insert(QLatin1String("lang"), QJsonValue(m_lang));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("document_archive_id"), QJsonValue(m_document_archive_id));
    json_object.insert(QLatin1String("document_geometry_archive_id"), QJsonValue(m_document_geometry_archive_id));
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("document_locales_archive_id"), QJsonValue(m_document_locales_archive_id));
    json_object.insert(QLatin1String("history_metadata_id"), QJsonValue(m_history_metadata_id));
    json_object.insert(QLatin1String("lang"), QJsonValue(m_lang));
  }

  return json_object;
}

QVariantHash
C2cDocumentsVersions::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_document_archive_id_modified())
      variant_hash[QLatin1String("document_archive_id")] = m_document_archive_id;
    if (is_document_geometry_archive_id_modified())
      variant_hash[QLatin1String("document_geometry_archive_id")] = m_document_geometry_archive_id;
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_document_locales_archive_id_modified())
      variant_hash[QLatin1String("document_locales_archive_id")] = m_document_locales_archive_id;
    if (is_history_metadata_id_modified())
      variant_hash[QLatin1String("history_metadata_id")] = m_history_metadata_id;
    if (is_lang_modified())
      variant_hash[QLatin1String("lang")] = m_lang;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("document_archive_id")] = m_document_archive_id;
    variant_hash[QLatin1String("document_geometry_archive_id")] = m_document_geometry_archive_id;
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("document_locales_archive_id")] = m_document_locales_archive_id;
    variant_hash[QLatin1String("history_metadata_id")] = m_history_metadata_id;
    variant_hash[QLatin1String("lang")] = m_lang;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsVersions::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_document_archive_id;
  variants << m_document_geometry_archive_id;
  variants << m_document_id;
  variants << m_document_locales_archive_id;
  variants << m_history_metadata_id;
  variants << m_lang;

  return variants;
}

QVariantHash
C2cDocumentsVersions::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_document_archive_id_modified())
      variant_hash[QLatin1String("document_archive_id")] = m_document_archive_id;
    if (is_document_geometry_archive_id_modified())
      variant_hash[QLatin1String("document_geometry_archive_id")] = m_document_geometry_archive_id;
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_document_locales_archive_id_modified())
      variant_hash[QLatin1String("document_locales_archive_id")] = m_document_locales_archive_id;
    if (is_history_metadata_id_modified())
      variant_hash[QLatin1String("history_metadata_id")] = m_history_metadata_id;
    if (is_lang_modified())
      variant_hash[QLatin1String("lang")] = m_lang;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("document_archive_id")] = m_document_archive_id;
    variant_hash[QLatin1String("document_geometry_archive_id")] = m_document_geometry_archive_id;
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("document_locales_archive_id")] = m_document_locales_archive_id;
    variant_hash[QLatin1String("history_metadata_id")] = m_history_metadata_id;
    variant_hash[QLatin1String("lang")] = m_lang;
  }

  return variant_hash;
}

QVariantList
C2cDocumentsVersions::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_document_archive_id;
  variants << m_document_geometry_archive_id;
  variants << m_document_id;
  variants << m_document_locales_archive_id;
  variants << m_history_metadata_id;
  variants << m_lang;

  return variants;
}

QVariant
C2cDocumentsVersions::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::DOCUMENT_ARCHIVE_ID:
     return m_document_archive_id;
   case Schema::Fields::DOCUMENT_GEOMETRY_ARCHIVE_ID:
     return m_document_geometry_archive_id;
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::DOCUMENT_LOCALES_ARCHIVE_ID:
     return m_document_locales_archive_id;
   case Schema::Fields::HISTORY_METADATA_ID:
     return m_history_metadata_id;
   case Schema::Fields::LANG:
     return m_lang;
   default:
     return QVariant(); // error
  }
}

void
C2cDocumentsVersions::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::DOCUMENT_ARCHIVE_ID: {
     m_document_archive_id = value.toInt();
     break;
   }
   case Schema::Fields::DOCUMENT_GEOMETRY_ARCHIVE_ID: {
     m_document_geometry_archive_id = value.toInt();
     break;
   }
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::DOCUMENT_LOCALES_ARCHIVE_ID: {
     m_document_locales_archive_id = value.toInt();
     break;
   }
   case Schema::Fields::HISTORY_METADATA_ID: {
     m_history_metadata_id = value.toInt();
     break;
   }
   case Schema::Fields::LANG: {
     m_lang = value.toString();
     break;
   }
  }
}

void
C2cDocumentsVersions::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cDocumentsVersions::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cDocumentsVersions::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cDocumentsVersions & obj)
{
  out << obj.id();
  out << obj.document_archive_id();
  out << obj.document_geometry_archive_id();
  out << obj.document_id();
  out << obj.document_locales_archive_id();
  out << obj.history_metadata_id();
  out << obj.lang();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cDocumentsVersions & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _int;
  obj.set_document_archive_id(_int);
  in >> _int;
  obj.set_document_geometry_archive_id(_int);
  in >> _int;
  obj.set_document_id(_int);
  in >> _int;
  obj.set_document_locales_archive_id(_int);
  in >> _int;
  obj.set_history_metadata_id(_int);
  in >> _QString;
  obj.set_lang(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsVersions & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cDocumentsVersions(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.document_archive_id();
  debug << QStringLiteral(", ");
  debug << obj.document_geometry_archive_id();
  debug << QStringLiteral(", ");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.document_locales_archive_id();
  debug << QStringLiteral(", ");
  debug << obj.history_metadata_id();
  debug << QStringLiteral(", ");
  debug << obj.lang();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cDocumentsVersionsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cDocumentsVersionsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cDocumentsVersionsCache::C2cDocumentsVersionsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cDocumentsVersionsCache::~C2cDocumentsVersionsCache()
{}

void
C2cDocumentsVersionsCache::add(C2cDocumentsVersionsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cDocumentsVersions::changed,
                   this, &C2cDocumentsVersionsCache::on_changed);
}

void
C2cDocumentsVersionsCache::remove(C2cDocumentsVersionsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cDocumentsVersionsCache::on_changed()
{
  C2cDocumentsVersions * row = qobject_cast<C2cDocumentsVersions *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cDocumentsVersionsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cDocumentsVersionsModel::C2cDocumentsVersionsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cDocumentsVersionsModel::C2cDocumentsVersionsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cDocumentsVersionsModel::~C2cDocumentsVersionsModel()
{}

int
C2cDocumentsVersionsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cDocumentsVersionsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cDocumentsVersionsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case DOCUMENT_ARCHIVE_ID:
    return item->document_archive_id();
  case DOCUMENT_GEOMETRY_ARCHIVE_ID:
    return item->document_geometry_archive_id();
  case DOCUMENT_ID:
    return item->document_id();
  case DOCUMENT_LOCALES_ARCHIVE_ID:
    return item->document_locales_archive_id();
  case HISTORY_METADATA_ID:
    return item->history_metadata_id();
  case LANG:
    return item->lang();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cDocumentsVersionsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[DOCUMENT_ARCHIVE_ID] = QStringLiteral("document_archive_id").latin1();
  role_names[DOCUMENT_GEOMETRY_ARCHIVE_ID] = QStringLiteral("document_geometry_archive_id").latin1();
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[DOCUMENT_LOCALES_ARCHIVE_ID] = QStringLiteral("document_locales_archive_id").latin1();
  role_names[HISTORY_METADATA_ID] = QStringLiteral("history_metadata_id").latin1();
  role_names[LANG] = QStringLiteral("lang").latin1();

  return role_names;
}

void
C2cDocumentsVersionsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cDocumentsVersionsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cImagesSchema::C2cImagesSchema()
: QoSchema(QLatin1String("C2cImages"), QLatin1String("c2c_images"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("author"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("author"),
      QLatin1String("author"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("camera_name"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("camera_name"),
      QLatin1String("camera_name"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("categories"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("categories"),
      QLatin1String("categories"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("date_time"),
      QLatin1String("QDateTime"),
      QLatin1String("text"),
      QLatin1String("date_time"),
      QLatin1String("date_time"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation"),
      QLatin1String("elevation"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("exposure_time"),
      QLatin1String("qreal"),
      QLatin1String("real"),
      QLatin1String("exposure_time"),
      QLatin1String("exposure_time"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("file_size"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("file_size"),
      QLatin1String("file_size"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("filename"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("filename"),
      QLatin1String("filename"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("fnumber"),
      QLatin1String("qreal"),
      QLatin1String("real"),
      QLatin1String("fnumber"),
      QLatin1String("fnumber"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("focal_length"),
      QLatin1String("qreal"),
      QLatin1String("real"),
      QLatin1String("focal_length"),
      QLatin1String("focal_length"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height"),
      QLatin1String("height"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("image_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("image_type"),
      QLatin1String("image_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("iso_speed"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("iso_speed"),
      QLatin1String("iso_speed"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("width"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("width"),
      QLatin1String("width"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cImagesSchema::~C2cImagesSchema()
{}

/**************************************************************************************************/

C2cImages::C2cImages()
  : QObject(),
    QoRow<C2cImagesSchema>(),
    m_document_id(),
    m_activities(),
    m_author(),
    m_camera_name(),
    m_categories(),
    m_date_time(),
    m_elevation(),
    m_exposure_time(),
    m_file_size(),
    m_filename(),
    m_fnumber(),
    m_focal_length(),
    m_height(),
    m_image_type(),
    m_iso_speed(),
    m_width()
{
}

C2cImages::C2cImages(const C2cImages & other)
  : QObject(),
    QoRow<C2cImagesSchema>(other),
    m_document_id(other.m_document_id),
    m_activities(other.m_activities),
    m_author(other.m_author),
    m_camera_name(other.m_camera_name),
    m_categories(other.m_categories),
    m_date_time(other.m_date_time),
    m_elevation(other.m_elevation),
    m_exposure_time(other.m_exposure_time),
    m_file_size(other.m_file_size),
    m_filename(other.m_filename),
    m_fnumber(other.m_fnumber),
    m_focal_length(other.m_focal_length),
    m_height(other.m_height),
    m_image_type(other.m_image_type),
    m_iso_speed(other.m_iso_speed),
    m_width(other.m_width)
{
}

C2cImages::C2cImages(const QJsonObject & json_object)
 : C2cImages()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_author = json_object[QLatin1String("author")].toString();
  m_camera_name = json_object[QLatin1String("camera_name")].toString();
  m_categories = orm_type_conversion::load_string_list(json_object[QLatin1String("categories")]);
  m_date_time = orm_type_conversion::load_datetime(json_object[QLatin1String("date_time")]);
  m_elevation = json_object[QLatin1String("elevation")].toInt();
  m_exposure_time = json_object[QLatin1String("exposure_time")].toDouble();
  m_file_size = json_object[QLatin1String("file_size")].toInt();
  m_filename = json_object[QLatin1String("filename")].toString();
  m_fnumber = json_object[QLatin1String("fnumber")].toDouble();
  m_focal_length = json_object[QLatin1String("focal_length")].toDouble();
  m_height = json_object[QLatin1String("height")].toInt();
  m_image_type = json_object[QLatin1String("image_type")].toString();
  m_iso_speed = json_object[QLatin1String("iso_speed")].toInt();
  m_width = json_object[QLatin1String("width")].toInt();
}

C2cImages::C2cImages(const QVariantHash & variant_hash)
 : C2cImages()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_author = variant_hash[QLatin1String("author")].toString();
  m_camera_name = variant_hash[QLatin1String("camera_name")].toString();
  m_categories = variant_hash[QLatin1String("categories")].toStringList();
  m_date_time = variant_hash[QLatin1String("date_time")].toDateTime();
  m_elevation = variant_hash[QLatin1String("elevation")].toInt();
  m_exposure_time = variant_hash[QLatin1String("exposure_time")].toDouble();
  m_file_size = variant_hash[QLatin1String("file_size")].toInt();
  m_filename = variant_hash[QLatin1String("filename")].toString();
  m_fnumber = variant_hash[QLatin1String("fnumber")].toDouble();
  m_focal_length = variant_hash[QLatin1String("focal_length")].toDouble();
  m_height = variant_hash[QLatin1String("height")].toInt();
  m_image_type = variant_hash[QLatin1String("image_type")].toString();
  m_iso_speed = variant_hash[QLatin1String("iso_speed")].toInt();
  m_width = variant_hash[QLatin1String("width")].toInt();
}

C2cImages::C2cImages(const QVariantList & variants)
 : C2cImages()
{
  m_document_id = variants[0].toInt();
  m_activities = variants[1].toStringList();
  m_author = variants[2].toString();
  m_camera_name = variants[3].toString();
  m_categories = variants[4].toStringList();
  m_date_time = variants[5].toDateTime();
  m_elevation = variants[6].toInt();
  m_exposure_time = variants[7].toDouble();
  m_file_size = variants[8].toInt();
  m_filename = variants[9].toString();
  m_fnumber = variants[10].toDouble();
  m_focal_length = variants[11].toDouble();
  m_height = variants[12].toInt();
  m_image_type = variants[13].toString();
  m_iso_speed = variants[14].toInt();
  m_width = variants[15].toInt();
}

C2cImages::C2cImages(const QSqlRecord & record)
 : QoRow<C2cImagesSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_activities = record.value(1).toStringList();
  m_author = record.value(2).toString();
  m_camera_name = record.value(3).toString();
  m_categories = record.value(4).toStringList();
  m_date_time = record.value(5).toDateTime();
  m_elevation = record.value(6).toInt();
  m_exposure_time = record.value(7).toDouble();
  m_file_size = record.value(8).toInt();
  m_filename = record.value(9).toString();
  m_fnumber = record.value(10).toDouble();
  m_focal_length = record.value(11).toDouble();
  m_height = record.value(12).toInt();
  m_image_type = record.value(13).toString();
  m_iso_speed = record.value(14).toInt();
  m_width = record.value(15).toInt();
}

C2cImages::C2cImages(const QSqlQuery & query, int offset)
 : QoRow<C2cImagesSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_activities = query.value(offset++).toStringList();
  m_author = query.value(offset++).toString();
  m_camera_name = query.value(offset++).toString();
  m_categories = query.value(offset++).toStringList();
  m_date_time = query.value(offset++).toDateTime();
  m_elevation = query.value(offset++).toInt();
  m_exposure_time = query.value(offset++).toDouble();
  m_file_size = query.value(offset++).toInt();
  m_filename = query.value(offset++).toString();
  m_fnumber = query.value(offset++).toDouble();
  m_focal_length = query.value(offset++).toDouble();
  m_height = query.value(offset++).toInt();
  m_image_type = query.value(offset++).toString();
  m_iso_speed = query.value(offset++).toInt();
  m_width = query.value(offset).toInt();
}

C2cImages::~C2cImages()
{
// qATInfo() << "--- Delete" << "C2cImages" << *this;
}

// bit array ?
C2cImages &
C2cImages::operator=(const C2cImages & other)
{
  if (this != &other) {
    QoRow<C2cImagesSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_activities = other.m_activities;
    m_author = other.m_author;
    m_camera_name = other.m_camera_name;
    m_categories = other.m_categories;
    m_date_time = other.m_date_time;
    m_elevation = other.m_elevation;
    m_exposure_time = other.m_exposure_time;
    m_file_size = other.m_file_size;
    m_filename = other.m_filename;
    m_fnumber = other.m_fnumber;
    m_focal_length = other.m_focal_length;
    m_height = other.m_height;
    m_image_type = other.m_image_type;
    m_iso_speed = other.m_iso_speed;
    m_width = other.m_width;
  }

  return *this;
}

// bit array ?
bool
C2cImages::operator==(const C2cImages & other) const
{
  if (not QoRow<C2cImagesSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_author != other.m_author)
    return false;
  if (m_camera_name != other.m_camera_name)
    return false;
  if (m_categories != other.m_categories)
    return false;
  if (m_date_time != other.m_date_time)
    return false;
  if (m_elevation != other.m_elevation)
    return false;
  if (m_exposure_time != other.m_exposure_time)
    return false;
  if (m_file_size != other.m_file_size)
    return false;
  if (m_filename != other.m_filename)
    return false;
  if (m_fnumber != other.m_fnumber)
    return false;
  if (m_focal_length != other.m_focal_length)
    return false;
  if (m_height != other.m_height)
    return false;
  if (m_image_type != other.m_image_type)
    return false;
  if (m_iso_speed != other.m_iso_speed)
    return false;
  if (m_width != other.m_width)
    return false;

  return true;
}

void
C2cImages::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_author(const QString & value)
{
  if (m_author != value) {
    m_author = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AUTHOR);

    emit authorChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_camera_name(const QString & value)
{
  if (m_camera_name != value) {
    m_camera_name = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CAMERA_NAME);

    emit camera_nameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_categories(const QStringList & value)
{
  if (m_categories != value) {
    m_categories = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CATEGORIES);

    emit categoriesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_date_time(const QDateTime & value)
{
  if (m_date_time != value) {
    m_date_time = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DATE_TIME);

    emit date_timeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_elevation(int value)
{
  if (m_elevation != value) {
    m_elevation = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION);

    emit elevationChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_exposure_time(qreal value)
{
  if (m_exposure_time != value) {
    m_exposure_time = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EXPOSURE_TIME);

    emit exposure_timeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_file_size(int value)
{
  if (m_file_size != value) {
    m_file_size = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FILE_SIZE);

    emit file_sizeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_filename(const QString & value)
{
  if (m_filename != value) {
    m_filename = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FILENAME);

    emit filenameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_fnumber(qreal value)
{
  if (m_fnumber != value) {
    m_fnumber = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FNUMBER);

    emit fnumberChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_focal_length(qreal value)
{
  if (m_focal_length != value) {
    m_focal_length = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FOCAL_LENGTH);

    emit focal_lengthChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_height(int value)
{
  if (m_height != value) {
    m_height = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT);

    emit heightChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_image_type(const QString & value)
{
  if (m_image_type != value) {
    m_image_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::IMAGE_TYPE);

    emit image_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_iso_speed(int value)
{
  if (m_iso_speed != value) {
    m_iso_speed = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ISO_SPEED);

    emit iso_speedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cImages::set_width(int value)
{
  if (m_width != value) {
    m_width = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::WIDTH);

    emit widthChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cImages::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_author_modified())
      json_object.insert(QLatin1String("author"), QJsonValue(m_author));
    if (is_camera_name_modified())
      json_object.insert(QLatin1String("camera_name"), QJsonValue(m_camera_name));
    if (is_categories_modified())
      json_object.insert(QLatin1String("categories"), orm_type_conversion::dump_string_list(m_categories));
    if (is_date_time_modified())
      json_object.insert(QLatin1String("date_time"), orm_type_conversion::dump_datetime(m_date_time));
    if (is_elevation_modified())
      json_object.insert(QLatin1String("elevation"), QJsonValue(m_elevation));
    if (is_exposure_time_modified())
      json_object.insert(QLatin1String("exposure_time"), QJsonValue(m_exposure_time));
    if (is_file_size_modified())
      json_object.insert(QLatin1String("file_size"), QJsonValue(m_file_size));
    if (is_filename_modified())
      json_object.insert(QLatin1String("filename"), QJsonValue(m_filename));
    if (is_fnumber_modified())
      json_object.insert(QLatin1String("fnumber"), QJsonValue(m_fnumber));
    if (is_focal_length_modified())
      json_object.insert(QLatin1String("focal_length"), QJsonValue(m_focal_length));
    if (is_height_modified())
      json_object.insert(QLatin1String("height"), QJsonValue(m_height));
    if (is_image_type_modified())
      json_object.insert(QLatin1String("image_type"), QJsonValue(m_image_type));
    if (is_iso_speed_modified())
      json_object.insert(QLatin1String("iso_speed"), QJsonValue(m_iso_speed));
    if (is_width_modified())
      json_object.insert(QLatin1String("width"), QJsonValue(m_width));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("author"), QJsonValue(m_author));
    json_object.insert(QLatin1String("camera_name"), QJsonValue(m_camera_name));
    json_object.insert(QLatin1String("categories"), orm_type_conversion::dump_string_list(m_categories));
    json_object.insert(QLatin1String("date_time"), orm_type_conversion::dump_datetime(m_date_time));
    json_object.insert(QLatin1String("elevation"), QJsonValue(m_elevation));
    json_object.insert(QLatin1String("exposure_time"), QJsonValue(m_exposure_time));
    json_object.insert(QLatin1String("file_size"), QJsonValue(m_file_size));
    json_object.insert(QLatin1String("filename"), QJsonValue(m_filename));
    json_object.insert(QLatin1String("fnumber"), QJsonValue(m_fnumber));
    json_object.insert(QLatin1String("focal_length"), QJsonValue(m_focal_length));
    json_object.insert(QLatin1String("height"), QJsonValue(m_height));
    json_object.insert(QLatin1String("image_type"), QJsonValue(m_image_type));
    json_object.insert(QLatin1String("iso_speed"), QJsonValue(m_iso_speed));
    json_object.insert(QLatin1String("width"), QJsonValue(m_width));
  }

  return json_object;
}

QVariantHash
C2cImages::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_author_modified())
      variant_hash[QLatin1String("author")] = m_author;
    if (is_camera_name_modified())
      variant_hash[QLatin1String("camera_name")] = m_camera_name;
    if (is_categories_modified())
      variant_hash[QLatin1String("categories")] = m_categories;
    if (is_date_time_modified())
      variant_hash[QLatin1String("date_time")] = m_date_time;
    if (is_elevation_modified())
      variant_hash[QLatin1String("elevation")] = m_elevation;
    if (is_exposure_time_modified())
      variant_hash[QLatin1String("exposure_time")] = m_exposure_time;
    if (is_file_size_modified())
      variant_hash[QLatin1String("file_size")] = m_file_size;
    if (is_filename_modified())
      variant_hash[QLatin1String("filename")] = m_filename;
    if (is_fnumber_modified())
      variant_hash[QLatin1String("fnumber")] = m_fnumber;
    if (is_focal_length_modified())
      variant_hash[QLatin1String("focal_length")] = m_focal_length;
    if (is_height_modified())
      variant_hash[QLatin1String("height")] = m_height;
    if (is_image_type_modified())
      variant_hash[QLatin1String("image_type")] = m_image_type;
    if (is_iso_speed_modified())
      variant_hash[QLatin1String("iso_speed")] = m_iso_speed;
    if (is_width_modified())
      variant_hash[QLatin1String("width")] = m_width;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("author")] = m_author;
    variant_hash[QLatin1String("camera_name")] = m_camera_name;
    variant_hash[QLatin1String("categories")] = m_categories;
    variant_hash[QLatin1String("date_time")] = m_date_time;
    variant_hash[QLatin1String("elevation")] = m_elevation;
    variant_hash[QLatin1String("exposure_time")] = m_exposure_time;
    variant_hash[QLatin1String("file_size")] = m_file_size;
    variant_hash[QLatin1String("filename")] = m_filename;
    variant_hash[QLatin1String("fnumber")] = m_fnumber;
    variant_hash[QLatin1String("focal_length")] = m_focal_length;
    variant_hash[QLatin1String("height")] = m_height;
    variant_hash[QLatin1String("image_type")] = m_image_type;
    variant_hash[QLatin1String("iso_speed")] = m_iso_speed;
    variant_hash[QLatin1String("width")] = m_width;
  }

  return variant_hash;
}

QVariantList
C2cImages::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_activities;
  variants << m_author;
  variants << m_camera_name;
  variants << m_categories;
  variants << m_date_time;
  variants << m_elevation;
  variants << m_exposure_time;
  variants << m_file_size;
  variants << m_filename;
  variants << m_fnumber;
  variants << m_focal_length;
  variants << m_height;
  variants << m_image_type;
  variants << m_iso_speed;
  variants << m_width;

  return variants;
}

QVariantHash
C2cImages::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_author_modified())
      variant_hash[QLatin1String("author")] = m_author;
    if (is_camera_name_modified())
      variant_hash[QLatin1String("camera_name")] = m_camera_name;
    if (is_categories_modified())
      variant_hash[QLatin1String("categories")] = m_categories;
    if (is_date_time_modified())
      variant_hash[QLatin1String("date_time")] = m_date_time;
    if (is_elevation_modified())
      variant_hash[QLatin1String("elevation")] = m_elevation;
    if (is_exposure_time_modified())
      variant_hash[QLatin1String("exposure_time")] = m_exposure_time;
    if (is_file_size_modified())
      variant_hash[QLatin1String("file_size")] = m_file_size;
    if (is_filename_modified())
      variant_hash[QLatin1String("filename")] = m_filename;
    if (is_fnumber_modified())
      variant_hash[QLatin1String("fnumber")] = m_fnumber;
    if (is_focal_length_modified())
      variant_hash[QLatin1String("focal_length")] = m_focal_length;
    if (is_height_modified())
      variant_hash[QLatin1String("height")] = m_height;
    if (is_image_type_modified())
      variant_hash[QLatin1String("image_type")] = m_image_type;
    if (is_iso_speed_modified())
      variant_hash[QLatin1String("iso_speed")] = m_iso_speed;
    if (is_width_modified())
      variant_hash[QLatin1String("width")] = m_width;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("author")] = m_author;
    variant_hash[QLatin1String("camera_name")] = m_camera_name;
    variant_hash[QLatin1String("categories")] = m_categories;
    variant_hash[QLatin1String("date_time")] = m_date_time;
    variant_hash[QLatin1String("elevation")] = m_elevation;
    variant_hash[QLatin1String("exposure_time")] = m_exposure_time;
    variant_hash[QLatin1String("file_size")] = m_file_size;
    variant_hash[QLatin1String("filename")] = m_filename;
    variant_hash[QLatin1String("fnumber")] = m_fnumber;
    variant_hash[QLatin1String("focal_length")] = m_focal_length;
    variant_hash[QLatin1String("height")] = m_height;
    variant_hash[QLatin1String("image_type")] = m_image_type;
    variant_hash[QLatin1String("iso_speed")] = m_iso_speed;
    variant_hash[QLatin1String("width")] = m_width;
  }

  return variant_hash;
}

QVariantList
C2cImages::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_activities;
  variants << m_author;
  variants << m_camera_name;
  variants << m_categories;
  variants << m_date_time;
  variants << m_elevation;
  variants << m_exposure_time;
  variants << m_file_size;
  variants << m_filename;
  variants << m_fnumber;
  variants << m_focal_length;
  variants << m_height;
  variants << m_image_type;
  variants << m_iso_speed;
  variants << m_width;

  return variants;
}

QVariant
C2cImages::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::AUTHOR:
     return m_author;
   case Schema::Fields::CAMERA_NAME:
     return m_camera_name;
   case Schema::Fields::CATEGORIES:
     return m_categories;
   case Schema::Fields::DATE_TIME:
     return m_date_time;
   case Schema::Fields::ELEVATION:
     return m_elevation;
   case Schema::Fields::EXPOSURE_TIME:
     return m_exposure_time;
   case Schema::Fields::FILE_SIZE:
     return m_file_size;
   case Schema::Fields::FILENAME:
     return m_filename;
   case Schema::Fields::FNUMBER:
     return m_fnumber;
   case Schema::Fields::FOCAL_LENGTH:
     return m_focal_length;
   case Schema::Fields::HEIGHT:
     return m_height;
   case Schema::Fields::IMAGE_TYPE:
     return m_image_type;
   case Schema::Fields::ISO_SPEED:
     return m_iso_speed;
   case Schema::Fields::WIDTH:
     return m_width;
   default:
     return QVariant(); // error
  }
}

void
C2cImages::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::AUTHOR: {
     m_author = value.toString();
     break;
   }
   case Schema::Fields::CAMERA_NAME: {
     m_camera_name = value.toString();
     break;
   }
   case Schema::Fields::CATEGORIES: {
     m_categories = value.toStringList();
     break;
   }
   case Schema::Fields::DATE_TIME: {
     m_date_time = value.toDateTime();
     break;
   }
   case Schema::Fields::ELEVATION: {
     m_elevation = value.toInt();
     break;
   }
   case Schema::Fields::EXPOSURE_TIME: {
     m_exposure_time = value.toDouble();
     break;
   }
   case Schema::Fields::FILE_SIZE: {
     m_file_size = value.toInt();
     break;
   }
   case Schema::Fields::FILENAME: {
     m_filename = value.toString();
     break;
   }
   case Schema::Fields::FNUMBER: {
     m_fnumber = value.toDouble();
     break;
   }
   case Schema::Fields::FOCAL_LENGTH: {
     m_focal_length = value.toDouble();
     break;
   }
   case Schema::Fields::HEIGHT: {
     m_height = value.toInt();
     break;
   }
   case Schema::Fields::IMAGE_TYPE: {
     m_image_type = value.toString();
     break;
   }
   case Schema::Fields::ISO_SPEED: {
     m_iso_speed = value.toInt();
     break;
   }
   case Schema::Fields::WIDTH: {
     m_width = value.toInt();
     break;
   }
  }
}

void
C2cImages::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cImages::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cImages::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cImages & obj)
{
  out << obj.document_id();
  out << obj.activities();
  out << obj.author();
  out << obj.camera_name();
  out << obj.categories();
  out << obj.date_time();
  out << obj.elevation();
  out << obj.exposure_time();
  out << obj.file_size();
  out << obj.filename();
  out << obj.fnumber();
  out << obj.focal_length();
  out << obj.height();
  out << obj.image_type();
  out << obj.iso_speed();
  out << obj.width();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cImages & obj)
{
  QDateTime _QDateTime;
  QString _QString;
  QStringList _QStringList;
  int _int;
  qreal _qreal;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QString;
  obj.set_author(_QString);
  in >> _QString;
  obj.set_camera_name(_QString);
  in >> _QStringList;
  obj.set_categories(_QStringList);
  in >> _QDateTime;
  obj.set_date_time(_QDateTime);
  in >> _int;
  obj.set_elevation(_int);
  in >> _qreal;
  obj.set_exposure_time(_qreal);
  in >> _int;
  obj.set_file_size(_int);
  in >> _QString;
  obj.set_filename(_QString);
  in >> _qreal;
  obj.set_fnumber(_qreal);
  in >> _qreal;
  obj.set_focal_length(_qreal);
  in >> _int;
  obj.set_height(_int);
  in >> _QString;
  obj.set_image_type(_QString);
  in >> _int;
  obj.set_iso_speed(_int);
  in >> _int;
  obj.set_width(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cImages & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cImages(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.author();
  debug << QStringLiteral(", ");
  debug << obj.camera_name();
  debug << QStringLiteral(", ");
  debug << obj.categories();
  debug << QStringLiteral(", ");
  debug << obj.date_time();
  debug << QStringLiteral(", ");
  debug << obj.elevation();
  debug << QStringLiteral(", ");
  debug << obj.exposure_time();
  debug << QStringLiteral(", ");
  debug << obj.file_size();
  debug << QStringLiteral(", ");
  debug << obj.filename();
  debug << QStringLiteral(", ");
  debug << obj.fnumber();
  debug << QStringLiteral(", ");
  debug << obj.focal_length();
  debug << QStringLiteral(", ");
  debug << obj.height();
  debug << QStringLiteral(", ");
  debug << obj.image_type();
  debug << QStringLiteral(", ");
  debug << obj.iso_speed();
  debug << QStringLiteral(", ");
  debug << obj.width();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cImagesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cImagesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cImagesCache::C2cImagesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cImagesCache::~C2cImagesCache()
{}

void
C2cImagesCache::add(C2cImagesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cImages::changed,
                   this, &C2cImagesCache::on_changed);
}

void
C2cImagesCache::remove(C2cImagesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cImagesCache::on_changed()
{
  C2cImages * row = qobject_cast<C2cImages *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cImagesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cImagesModel::C2cImagesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cImagesModel::C2cImagesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cImagesModel::~C2cImagesModel()
{}

int
C2cImagesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cImagesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cImagesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACTIVITIES:
    return item->activities();
  case AUTHOR:
    return item->author();
  case CAMERA_NAME:
    return item->camera_name();
  case CATEGORIES:
    return item->categories();
  case DATE_TIME:
    return item->date_time();
  case ELEVATION:
    return item->elevation();
  case EXPOSURE_TIME:
    return item->exposure_time();
  case FILE_SIZE:
    return item->file_size();
  case FILENAME:
    return item->filename();
  case FNUMBER:
    return item->fnumber();
  case FOCAL_LENGTH:
    return item->focal_length();
  case HEIGHT:
    return item->height();
  case IMAGE_TYPE:
    return item->image_type();
  case ISO_SPEED:
    return item->iso_speed();
  case WIDTH:
    return item->width();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cImagesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[AUTHOR] = QStringLiteral("author").latin1();
  role_names[CAMERA_NAME] = QStringLiteral("camera_name").latin1();
  role_names[CATEGORIES] = QStringLiteral("categories").latin1();
  role_names[DATE_TIME] = QStringLiteral("date_time").latin1();
  role_names[ELEVATION] = QStringLiteral("elevation").latin1();
  role_names[EXPOSURE_TIME] = QStringLiteral("exposure_time").latin1();
  role_names[FILE_SIZE] = QStringLiteral("file_size").latin1();
  role_names[FILENAME] = QStringLiteral("filename").latin1();
  role_names[FNUMBER] = QStringLiteral("fnumber").latin1();
  role_names[FOCAL_LENGTH] = QStringLiteral("focal_length").latin1();
  role_names[HEIGHT] = QStringLiteral("height").latin1();
  role_names[IMAGE_TYPE] = QStringLiteral("image_type").latin1();
  role_names[ISO_SPEED] = QStringLiteral("iso_speed").latin1();
  role_names[WIDTH] = QStringLiteral("width").latin1();

  return role_names;
}

void
C2cImagesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cImagesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cMapAssociationsSchema::C2cMapAssociationsSchema()
: QoSchema(QLatin1String("C2cMapAssociations"), QLatin1String("c2c_map_associations"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaPrimaryKey field(
      QLatin1String("topo_map_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("topo_map_id"),
      QLatin1String("topo_map_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
}

C2cMapAssociationsSchema::~C2cMapAssociationsSchema()
{}

/**************************************************************************************************/

C2cMapAssociations::C2cMapAssociations()
  : QObject(),
    QoRow<C2cMapAssociationsSchema>(),
    m_document_id(),
    m_topo_map_id()
{
}

C2cMapAssociations::C2cMapAssociations(const C2cMapAssociations & other)
  : QObject(),
    QoRow<C2cMapAssociationsSchema>(other),
    m_document_id(other.m_document_id),
    m_topo_map_id(other.m_topo_map_id)
{
}

C2cMapAssociations::C2cMapAssociations(const QJsonObject & json_object)
 : C2cMapAssociations()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_topo_map_id = json_object[QLatin1String("topo_map_id")].toInt();
}

C2cMapAssociations::C2cMapAssociations(const QVariantHash & variant_hash)
 : C2cMapAssociations()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_topo_map_id = variant_hash[QLatin1String("topo_map_id")].toInt();
}

C2cMapAssociations::C2cMapAssociations(const QVariantList & variants)
 : C2cMapAssociations()
{
  m_document_id = variants[0].toInt();
  m_topo_map_id = variants[1].toInt();
}

C2cMapAssociations::C2cMapAssociations(const QSqlRecord & record)
 : QoRow<C2cMapAssociationsSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_topo_map_id = record.value(1).toInt();
}

C2cMapAssociations::C2cMapAssociations(const QSqlQuery & query, int offset)
 : QoRow<C2cMapAssociationsSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_topo_map_id = query.value(offset).toInt();
}

C2cMapAssociations::~C2cMapAssociations()
{
// qATInfo() << "--- Delete" << "C2cMapAssociations" << *this;
}

// bit array ?
C2cMapAssociations &
C2cMapAssociations::operator=(const C2cMapAssociations & other)
{
  if (this != &other) {
    QoRow<C2cMapAssociationsSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_topo_map_id = other.m_topo_map_id;
  }

  return *this;
}

// bit array ?
bool
C2cMapAssociations::operator==(const C2cMapAssociations & other) const
{
  if (not QoRow<C2cMapAssociationsSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_topo_map_id != other.m_topo_map_id)
    return false;

  return true;
}

void
C2cMapAssociations::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cMapAssociations::set_topo_map_id(int value)
{
  if (m_topo_map_id != value) {
    m_topo_map_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TOPO_MAP_ID);

    emit topo_map_idChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cMapAssociations::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_topo_map_id_modified())
      json_object.insert(QLatin1String("topo_map_id"), QJsonValue(m_topo_map_id));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("topo_map_id"), QJsonValue(m_topo_map_id));
  }

  return json_object;
}

QVariantHash
C2cMapAssociations::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_topo_map_id_modified())
      variant_hash[QLatin1String("topo_map_id")] = m_topo_map_id;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("topo_map_id")] = m_topo_map_id;
  }

  return variant_hash;
}

QVariantList
C2cMapAssociations::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_topo_map_id;

  return variants;
}

QVariantHash
C2cMapAssociations::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_topo_map_id_modified())
      variant_hash[QLatin1String("topo_map_id")] = m_topo_map_id;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("topo_map_id")] = m_topo_map_id;
  }

  return variant_hash;
}

QVariantList
C2cMapAssociations::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_topo_map_id;

  return variants;
}

QVariant
C2cMapAssociations::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::TOPO_MAP_ID:
     return m_topo_map_id;
   default:
     return QVariant(); // error
  }
}

void
C2cMapAssociations::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::TOPO_MAP_ID: {
     m_topo_map_id = value.toInt();
     break;
   }
  }
}

void
C2cMapAssociations::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cMapAssociations::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cMapAssociations::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  where_kwargs[QLatin1String("topo_map_id")] = m_topo_map_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cMapAssociations & obj)
{
  out << obj.document_id();
  out << obj.topo_map_id();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cMapAssociations & obj)
{
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _int;
  obj.set_topo_map_id(_int);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cMapAssociations & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cMapAssociations(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.topo_map_id();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cMapAssociationsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cMapAssociationsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cMapAssociationsCache::C2cMapAssociationsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cMapAssociationsCache::~C2cMapAssociationsCache()
{}

void
C2cMapAssociationsCache::add(C2cMapAssociationsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cMapAssociations::changed,
                   this, &C2cMapAssociationsCache::on_changed);
}

void
C2cMapAssociationsCache::remove(C2cMapAssociationsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cMapAssociationsCache::on_changed()
{
  C2cMapAssociations * row = qobject_cast<C2cMapAssociations *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cMapAssociationsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cMapAssociationsModel::C2cMapAssociationsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cMapAssociationsModel::C2cMapAssociationsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cMapAssociationsModel::~C2cMapAssociationsModel()
{}

int
C2cMapAssociationsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cMapAssociationsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cMapAssociationsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case TOPO_MAP_ID:
    return item->topo_map_id();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cMapAssociationsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[TOPO_MAP_ID] = QStringLiteral("topo_map_id").latin1();

  return role_names;
}

void
C2cMapAssociationsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cMapAssociationsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cMapsSchema::C2cMapsSchema()
: QoSchema(QLatin1String("C2cMaps"), QLatin1String("c2c_maps"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("code"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("code"),
      QLatin1String("code"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("editor"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("editor"),
      QLatin1String("editor"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("scale"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("scale"),
      QLatin1String("scale"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cMapsSchema::~C2cMapsSchema()
{}

/**************************************************************************************************/

C2cMaps::C2cMaps()
  : QObject(),
    QoRow<C2cMapsSchema>(),
    m_document_id(),
    m_code(),
    m_editor(),
    m_scale()
{
}

C2cMaps::C2cMaps(const C2cMaps & other)
  : QObject(),
    QoRow<C2cMapsSchema>(other),
    m_document_id(other.m_document_id),
    m_code(other.m_code),
    m_editor(other.m_editor),
    m_scale(other.m_scale)
{
}

C2cMaps::C2cMaps(const QJsonObject & json_object)
 : C2cMaps()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_code = json_object[QLatin1String("code")].toString();
  m_editor = json_object[QLatin1String("editor")].toString();
  m_scale = json_object[QLatin1String("scale")].toString();
}

C2cMaps::C2cMaps(const QVariantHash & variant_hash)
 : C2cMaps()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_code = variant_hash[QLatin1String("code")].toString();
  m_editor = variant_hash[QLatin1String("editor")].toString();
  m_scale = variant_hash[QLatin1String("scale")].toString();
}

C2cMaps::C2cMaps(const QVariantList & variants)
 : C2cMaps()
{
  m_document_id = variants[0].toInt();
  m_code = variants[1].toString();
  m_editor = variants[2].toString();
  m_scale = variants[3].toString();
}

C2cMaps::C2cMaps(const QSqlRecord & record)
 : QoRow<C2cMapsSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_code = record.value(1).toString();
  m_editor = record.value(2).toString();
  m_scale = record.value(3).toString();
}

C2cMaps::C2cMaps(const QSqlQuery & query, int offset)
 : QoRow<C2cMapsSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_code = query.value(offset++).toString();
  m_editor = query.value(offset++).toString();
  m_scale = query.value(offset).toString();
}

C2cMaps::~C2cMaps()
{
// qATInfo() << "--- Delete" << "C2cMaps" << *this;
}

// bit array ?
C2cMaps &
C2cMaps::operator=(const C2cMaps & other)
{
  if (this != &other) {
    QoRow<C2cMapsSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_code = other.m_code;
    m_editor = other.m_editor;
    m_scale = other.m_scale;
  }

  return *this;
}

// bit array ?
bool
C2cMaps::operator==(const C2cMaps & other) const
{
  if (not QoRow<C2cMapsSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_code != other.m_code)
    return false;
  if (m_editor != other.m_editor)
    return false;
  if (m_scale != other.m_scale)
    return false;

  return true;
}

void
C2cMaps::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cMaps::set_code(const QString & value)
{
  if (m_code != value) {
    m_code = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CODE);

    emit codeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cMaps::set_editor(const QString & value)
{
  if (m_editor != value) {
    m_editor = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EDITOR);

    emit editorChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cMaps::set_scale(const QString & value)
{
  if (m_scale != value) {
    m_scale = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SCALE);

    emit scaleChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cMaps::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_code_modified())
      json_object.insert(QLatin1String("code"), QJsonValue(m_code));
    if (is_editor_modified())
      json_object.insert(QLatin1String("editor"), QJsonValue(m_editor));
    if (is_scale_modified())
      json_object.insert(QLatin1String("scale"), QJsonValue(m_scale));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("code"), QJsonValue(m_code));
    json_object.insert(QLatin1String("editor"), QJsonValue(m_editor));
    json_object.insert(QLatin1String("scale"), QJsonValue(m_scale));
  }

  return json_object;
}

QVariantHash
C2cMaps::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_code_modified())
      variant_hash[QLatin1String("code")] = m_code;
    if (is_editor_modified())
      variant_hash[QLatin1String("editor")] = m_editor;
    if (is_scale_modified())
      variant_hash[QLatin1String("scale")] = m_scale;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("code")] = m_code;
    variant_hash[QLatin1String("editor")] = m_editor;
    variant_hash[QLatin1String("scale")] = m_scale;
  }

  return variant_hash;
}

QVariantList
C2cMaps::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_code;
  variants << m_editor;
  variants << m_scale;

  return variants;
}

QVariantHash
C2cMaps::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_code_modified())
      variant_hash[QLatin1String("code")] = m_code;
    if (is_editor_modified())
      variant_hash[QLatin1String("editor")] = m_editor;
    if (is_scale_modified())
      variant_hash[QLatin1String("scale")] = m_scale;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("code")] = m_code;
    variant_hash[QLatin1String("editor")] = m_editor;
    variant_hash[QLatin1String("scale")] = m_scale;
  }

  return variant_hash;
}

QVariantList
C2cMaps::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_code;
  variants << m_editor;
  variants << m_scale;

  return variants;
}

QVariant
C2cMaps::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::CODE:
     return m_code;
   case Schema::Fields::EDITOR:
     return m_editor;
   case Schema::Fields::SCALE:
     return m_scale;
   default:
     return QVariant(); // error
  }
}

void
C2cMaps::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::CODE: {
     m_code = value.toString();
     break;
   }
   case Schema::Fields::EDITOR: {
     m_editor = value.toString();
     break;
   }
   case Schema::Fields::SCALE: {
     m_scale = value.toString();
     break;
   }
  }
}

void
C2cMaps::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cMaps::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cMaps::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cMaps & obj)
{
  out << obj.document_id();
  out << obj.code();
  out << obj.editor();
  out << obj.scale();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cMaps & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QString;
  obj.set_code(_QString);
  in >> _QString;
  obj.set_editor(_QString);
  in >> _QString;
  obj.set_scale(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cMaps & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cMaps(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.code();
  debug << QStringLiteral(", ");
  debug << obj.editor();
  debug << QStringLiteral(", ");
  debug << obj.scale();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cMapsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cMapsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cMapsCache::C2cMapsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cMapsCache::~C2cMapsCache()
{}

void
C2cMapsCache::add(C2cMapsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cMaps::changed,
                   this, &C2cMapsCache::on_changed);
}

void
C2cMapsCache::remove(C2cMapsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cMapsCache::on_changed()
{
  C2cMaps * row = qobject_cast<C2cMaps *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cMapsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cMapsModel::C2cMapsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cMapsModel::C2cMapsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cMapsModel::~C2cMapsModel()
{}

int
C2cMapsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cMapsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cMapsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case CODE:
    return item->code();
  case EDITOR:
    return item->editor();
  case SCALE:
    return item->scale();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cMapsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[CODE] = QStringLiteral("code").latin1();
  role_names[EDITOR] = QStringLiteral("editor").latin1();
  role_names[SCALE] = QStringLiteral("scale").latin1();

  return role_names;
}

void
C2cMapsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cMapsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cOutingsSchema::C2cOutingsSchema()
: QoSchema(QLatin1String("C2cOutings"), QLatin1String("c2c_outings"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("access_condition"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("access_condition"),
      QLatin1String("access_condition"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("avalanche_signs"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("avalanche_signs"),
      QLatin1String("avalanche_signs"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("condition_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("condition_rating"),
      QLatin1String("condition_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("date_end"),
      QLatin1String("QDate"),
      QLatin1String("text"),
      QLatin1String("date_end"),
      QLatin1String("date_end"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("date_start"),
      QLatin1String("QDate"),
      QLatin1String("text"),
      QLatin1String("date_start"),
      QLatin1String("date_start"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("disable_comments"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("disable_comments"),
      QLatin1String("disable_comments"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_access"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_access"),
      QLatin1String("elevation_access"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_down_snow"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_down_snow"),
      QLatin1String("elevation_down_snow"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_max"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_max"),
      QLatin1String("elevation_max"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_min"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_min"),
      QLatin1String("elevation_min"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_up_snow"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_up_snow"),
      QLatin1String("elevation_up_snow"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("frequentation"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("frequentation"),
      QLatin1String("frequentation"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("glacier_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("glacier_rating"),
      QLatin1String("glacier_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_diff_down"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_diff_down"),
      QLatin1String("height_diff_down"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_diff_up"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_diff_up"),
      QLatin1String("height_diff_up"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("hut_status"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("hut_status"),
      QLatin1String("hut_status"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("length_total"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("length_total"),
      QLatin1String("length_total"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("lift_status"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("lift_status"),
      QLatin1String("lift_status"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("partial_trip"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("partial_trip"),
      QLatin1String("partial_trip"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("participant_count"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("participant_count"),
      QLatin1String("participant_count"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("public_transport"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("public_transport"),
      QLatin1String("public_transport"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("snow_quality"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("snow_quality"),
      QLatin1String("snow_quality"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("snow_quantity"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("snow_quantity"),
      QLatin1String("snow_quantity"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cOutingsSchema::~C2cOutingsSchema()
{}

/**************************************************************************************************/

C2cOutings::C2cOutings()
  : QObject(),
    QoRow<C2cOutingsSchema>(),
    m_document_id(),
    m_access_condition(),
    m_activities(),
    m_avalanche_signs(),
    m_condition_rating(),
    m_date_end(),
    m_date_start(),
    m_disable_comments(),
    m_elevation_access(),
    m_elevation_down_snow(),
    m_elevation_max(),
    m_elevation_min(),
    m_elevation_up_snow(),
    m_frequentation(),
    m_glacier_rating(),
    m_height_diff_down(),
    m_height_diff_up(),
    m_hut_status(),
    m_length_total(),
    m_lift_status(),
    m_partial_trip(),
    m_participant_count(),
    m_public_transport(),
    m_snow_quality(),
    m_snow_quantity()
{
}

C2cOutings::C2cOutings(const C2cOutings & other)
  : QObject(),
    QoRow<C2cOutingsSchema>(other),
    m_document_id(other.m_document_id),
    m_access_condition(other.m_access_condition),
    m_activities(other.m_activities),
    m_avalanche_signs(other.m_avalanche_signs),
    m_condition_rating(other.m_condition_rating),
    m_date_end(other.m_date_end),
    m_date_start(other.m_date_start),
    m_disable_comments(other.m_disable_comments),
    m_elevation_access(other.m_elevation_access),
    m_elevation_down_snow(other.m_elevation_down_snow),
    m_elevation_max(other.m_elevation_max),
    m_elevation_min(other.m_elevation_min),
    m_elevation_up_snow(other.m_elevation_up_snow),
    m_frequentation(other.m_frequentation),
    m_glacier_rating(other.m_glacier_rating),
    m_height_diff_down(other.m_height_diff_down),
    m_height_diff_up(other.m_height_diff_up),
    m_hut_status(other.m_hut_status),
    m_length_total(other.m_length_total),
    m_lift_status(other.m_lift_status),
    m_partial_trip(other.m_partial_trip),
    m_participant_count(other.m_participant_count),
    m_public_transport(other.m_public_transport),
    m_snow_quality(other.m_snow_quality),
    m_snow_quantity(other.m_snow_quantity)
{
}

C2cOutings::C2cOutings(const QJsonObject & json_object)
 : C2cOutings()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_access_condition = json_object[QLatin1String("access_condition")].toString();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_avalanche_signs = orm_type_conversion::load_string_list(json_object[QLatin1String("avalanche_signs")]);
  m_condition_rating = json_object[QLatin1String("condition_rating")].toString();
  m_date_end = orm_type_conversion::load_date(json_object[QLatin1String("date_end")]);
  m_date_start = orm_type_conversion::load_date(json_object[QLatin1String("date_start")]);
  m_disable_comments = json_object[QLatin1String("disable_comments")].toBool();
  m_elevation_access = json_object[QLatin1String("elevation_access")].toInt();
  m_elevation_down_snow = json_object[QLatin1String("elevation_down_snow")].toInt();
  m_elevation_max = json_object[QLatin1String("elevation_max")].toInt();
  m_elevation_min = json_object[QLatin1String("elevation_min")].toInt();
  m_elevation_up_snow = json_object[QLatin1String("elevation_up_snow")].toInt();
  m_frequentation = json_object[QLatin1String("frequentation")].toString();
  m_glacier_rating = json_object[QLatin1String("glacier_rating")].toString();
  m_height_diff_down = json_object[QLatin1String("height_diff_down")].toInt();
  m_height_diff_up = json_object[QLatin1String("height_diff_up")].toInt();
  m_hut_status = json_object[QLatin1String("hut_status")].toString();
  m_length_total = json_object[QLatin1String("length_total")].toInt();
  m_lift_status = json_object[QLatin1String("lift_status")].toString();
  m_partial_trip = json_object[QLatin1String("partial_trip")].toBool();
  m_participant_count = json_object[QLatin1String("participant_count")].toInt();
  m_public_transport = json_object[QLatin1String("public_transport")].toBool();
  m_snow_quality = json_object[QLatin1String("snow_quality")].toString();
  m_snow_quantity = json_object[QLatin1String("snow_quantity")].toString();
}

C2cOutings::C2cOutings(const QVariantHash & variant_hash)
 : C2cOutings()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_access_condition = variant_hash[QLatin1String("access_condition")].toString();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_avalanche_signs = variant_hash[QLatin1String("avalanche_signs")].toStringList();
  m_condition_rating = variant_hash[QLatin1String("condition_rating")].toString();
  m_date_end = variant_hash[QLatin1String("date_end")].toDate();
  m_date_start = variant_hash[QLatin1String("date_start")].toDate();
  m_disable_comments = variant_hash[QLatin1String("disable_comments")].toBool();
  m_elevation_access = variant_hash[QLatin1String("elevation_access")].toInt();
  m_elevation_down_snow = variant_hash[QLatin1String("elevation_down_snow")].toInt();
  m_elevation_max = variant_hash[QLatin1String("elevation_max")].toInt();
  m_elevation_min = variant_hash[QLatin1String("elevation_min")].toInt();
  m_elevation_up_snow = variant_hash[QLatin1String("elevation_up_snow")].toInt();
  m_frequentation = variant_hash[QLatin1String("frequentation")].toString();
  m_glacier_rating = variant_hash[QLatin1String("glacier_rating")].toString();
  m_height_diff_down = variant_hash[QLatin1String("height_diff_down")].toInt();
  m_height_diff_up = variant_hash[QLatin1String("height_diff_up")].toInt();
  m_hut_status = variant_hash[QLatin1String("hut_status")].toString();
  m_length_total = variant_hash[QLatin1String("length_total")].toInt();
  m_lift_status = variant_hash[QLatin1String("lift_status")].toString();
  m_partial_trip = variant_hash[QLatin1String("partial_trip")].toBool();
  m_participant_count = variant_hash[QLatin1String("participant_count")].toInt();
  m_public_transport = variant_hash[QLatin1String("public_transport")].toBool();
  m_snow_quality = variant_hash[QLatin1String("snow_quality")].toString();
  m_snow_quantity = variant_hash[QLatin1String("snow_quantity")].toString();
}

C2cOutings::C2cOutings(const QVariantList & variants)
 : C2cOutings()
{
  m_document_id = variants[0].toInt();
  m_access_condition = variants[1].toString();
  m_activities = variants[2].toStringList();
  m_avalanche_signs = variants[3].toStringList();
  m_condition_rating = variants[4].toString();
  m_date_end = variants[5].toDate();
  m_date_start = variants[6].toDate();
  m_disable_comments = variants[7].toBool();
  m_elevation_access = variants[8].toInt();
  m_elevation_down_snow = variants[9].toInt();
  m_elevation_max = variants[10].toInt();
  m_elevation_min = variants[11].toInt();
  m_elevation_up_snow = variants[12].toInt();
  m_frequentation = variants[13].toString();
  m_glacier_rating = variants[14].toString();
  m_height_diff_down = variants[15].toInt();
  m_height_diff_up = variants[16].toInt();
  m_hut_status = variants[17].toString();
  m_length_total = variants[18].toInt();
  m_lift_status = variants[19].toString();
  m_partial_trip = variants[20].toBool();
  m_participant_count = variants[21].toInt();
  m_public_transport = variants[22].toBool();
  m_snow_quality = variants[23].toString();
  m_snow_quantity = variants[24].toString();
}

C2cOutings::C2cOutings(const QSqlRecord & record)
 : QoRow<C2cOutingsSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_access_condition = record.value(1).toString();
  m_activities = record.value(2).toStringList();
  m_avalanche_signs = record.value(3).toStringList();
  m_condition_rating = record.value(4).toString();
  m_date_end = record.value(5).toDate();
  m_date_start = record.value(6).toDate();
  m_disable_comments = record.value(7).toBool();
  m_elevation_access = record.value(8).toInt();
  m_elevation_down_snow = record.value(9).toInt();
  m_elevation_max = record.value(10).toInt();
  m_elevation_min = record.value(11).toInt();
  m_elevation_up_snow = record.value(12).toInt();
  m_frequentation = record.value(13).toString();
  m_glacier_rating = record.value(14).toString();
  m_height_diff_down = record.value(15).toInt();
  m_height_diff_up = record.value(16).toInt();
  m_hut_status = record.value(17).toString();
  m_length_total = record.value(18).toInt();
  m_lift_status = record.value(19).toString();
  m_partial_trip = record.value(20).toBool();
  m_participant_count = record.value(21).toInt();
  m_public_transport = record.value(22).toBool();
  m_snow_quality = record.value(23).toString();
  m_snow_quantity = record.value(24).toString();
}

C2cOutings::C2cOutings(const QSqlQuery & query, int offset)
 : QoRow<C2cOutingsSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_access_condition = query.value(offset++).toString();
  m_activities = query.value(offset++).toStringList();
  m_avalanche_signs = query.value(offset++).toStringList();
  m_condition_rating = query.value(offset++).toString();
  m_date_end = query.value(offset++).toDate();
  m_date_start = query.value(offset++).toDate();
  m_disable_comments = query.value(offset++).toBool();
  m_elevation_access = query.value(offset++).toInt();
  m_elevation_down_snow = query.value(offset++).toInt();
  m_elevation_max = query.value(offset++).toInt();
  m_elevation_min = query.value(offset++).toInt();
  m_elevation_up_snow = query.value(offset++).toInt();
  m_frequentation = query.value(offset++).toString();
  m_glacier_rating = query.value(offset++).toString();
  m_height_diff_down = query.value(offset++).toInt();
  m_height_diff_up = query.value(offset++).toInt();
  m_hut_status = query.value(offset++).toString();
  m_length_total = query.value(offset++).toInt();
  m_lift_status = query.value(offset++).toString();
  m_partial_trip = query.value(offset++).toBool();
  m_participant_count = query.value(offset++).toInt();
  m_public_transport = query.value(offset++).toBool();
  m_snow_quality = query.value(offset++).toString();
  m_snow_quantity = query.value(offset).toString();
}

C2cOutings::~C2cOutings()
{
// qATInfo() << "--- Delete" << "C2cOutings" << *this;
}

// bit array ?
C2cOutings &
C2cOutings::operator=(const C2cOutings & other)
{
  if (this != &other) {
    QoRow<C2cOutingsSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_access_condition = other.m_access_condition;
    m_activities = other.m_activities;
    m_avalanche_signs = other.m_avalanche_signs;
    m_condition_rating = other.m_condition_rating;
    m_date_end = other.m_date_end;
    m_date_start = other.m_date_start;
    m_disable_comments = other.m_disable_comments;
    m_elevation_access = other.m_elevation_access;
    m_elevation_down_snow = other.m_elevation_down_snow;
    m_elevation_max = other.m_elevation_max;
    m_elevation_min = other.m_elevation_min;
    m_elevation_up_snow = other.m_elevation_up_snow;
    m_frequentation = other.m_frequentation;
    m_glacier_rating = other.m_glacier_rating;
    m_height_diff_down = other.m_height_diff_down;
    m_height_diff_up = other.m_height_diff_up;
    m_hut_status = other.m_hut_status;
    m_length_total = other.m_length_total;
    m_lift_status = other.m_lift_status;
    m_partial_trip = other.m_partial_trip;
    m_participant_count = other.m_participant_count;
    m_public_transport = other.m_public_transport;
    m_snow_quality = other.m_snow_quality;
    m_snow_quantity = other.m_snow_quantity;
  }

  return *this;
}

// bit array ?
bool
C2cOutings::operator==(const C2cOutings & other) const
{
  if (not QoRow<C2cOutingsSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_access_condition != other.m_access_condition)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_avalanche_signs != other.m_avalanche_signs)
    return false;
  if (m_condition_rating != other.m_condition_rating)
    return false;
  if (m_date_end != other.m_date_end)
    return false;
  if (m_date_start != other.m_date_start)
    return false;
  if (m_disable_comments != other.m_disable_comments)
    return false;
  if (m_elevation_access != other.m_elevation_access)
    return false;
  if (m_elevation_down_snow != other.m_elevation_down_snow)
    return false;
  if (m_elevation_max != other.m_elevation_max)
    return false;
  if (m_elevation_min != other.m_elevation_min)
    return false;
  if (m_elevation_up_snow != other.m_elevation_up_snow)
    return false;
  if (m_frequentation != other.m_frequentation)
    return false;
  if (m_glacier_rating != other.m_glacier_rating)
    return false;
  if (m_height_diff_down != other.m_height_diff_down)
    return false;
  if (m_height_diff_up != other.m_height_diff_up)
    return false;
  if (m_hut_status != other.m_hut_status)
    return false;
  if (m_length_total != other.m_length_total)
    return false;
  if (m_lift_status != other.m_lift_status)
    return false;
  if (m_partial_trip != other.m_partial_trip)
    return false;
  if (m_participant_count != other.m_participant_count)
    return false;
  if (m_public_transport != other.m_public_transport)
    return false;
  if (m_snow_quality != other.m_snow_quality)
    return false;
  if (m_snow_quantity != other.m_snow_quantity)
    return false;

  return true;
}

void
C2cOutings::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_access_condition(const QString & value)
{
  if (m_access_condition != value) {
    m_access_condition = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACCESS_CONDITION);

    emit access_conditionChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_avalanche_signs(const QStringList & value)
{
  if (m_avalanche_signs != value) {
    m_avalanche_signs = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AVALANCHE_SIGNS);

    emit avalanche_signsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_condition_rating(const QString & value)
{
  if (m_condition_rating != value) {
    m_condition_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CONDITION_RATING);

    emit condition_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_date_end(const QDate & value)
{
  if (m_date_end != value) {
    m_date_end = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DATE_END);

    emit date_endChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_date_start(const QDate & value)
{
  if (m_date_start != value) {
    m_date_start = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DATE_START);

    emit date_startChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_disable_comments(bool value)
{
  if (m_disable_comments != value) {
    m_disable_comments = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DISABLE_COMMENTS);

    emit disable_commentsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_elevation_access(int value)
{
  if (m_elevation_access != value) {
    m_elevation_access = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_ACCESS);

    emit elevation_accessChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_elevation_down_snow(int value)
{
  if (m_elevation_down_snow != value) {
    m_elevation_down_snow = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_DOWN_SNOW);

    emit elevation_down_snowChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_elevation_max(int value)
{
  if (m_elevation_max != value) {
    m_elevation_max = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_MAX);

    emit elevation_maxChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_elevation_min(int value)
{
  if (m_elevation_min != value) {
    m_elevation_min = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_MIN);

    emit elevation_minChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_elevation_up_snow(int value)
{
  if (m_elevation_up_snow != value) {
    m_elevation_up_snow = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_UP_SNOW);

    emit elevation_up_snowChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_frequentation(const QString & value)
{
  if (m_frequentation != value) {
    m_frequentation = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FREQUENTATION);

    emit frequentationChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_glacier_rating(const QString & value)
{
  if (m_glacier_rating != value) {
    m_glacier_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GLACIER_RATING);

    emit glacier_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_height_diff_down(int value)
{
  if (m_height_diff_down != value) {
    m_height_diff_down = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_DIFF_DOWN);

    emit height_diff_downChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_height_diff_up(int value)
{
  if (m_height_diff_up != value) {
    m_height_diff_up = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_DIFF_UP);

    emit height_diff_upChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_hut_status(const QString & value)
{
  if (m_hut_status != value) {
    m_hut_status = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HUT_STATUS);

    emit hut_statusChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_length_total(int value)
{
  if (m_length_total != value) {
    m_length_total = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LENGTH_TOTAL);

    emit length_totalChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_lift_status(const QString & value)
{
  if (m_lift_status != value) {
    m_lift_status = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LIFT_STATUS);

    emit lift_statusChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_partial_trip(bool value)
{
  if (m_partial_trip != value) {
    m_partial_trip = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARTIAL_TRIP);

    emit partial_tripChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_participant_count(int value)
{
  if (m_participant_count != value) {
    m_participant_count = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARTICIPANT_COUNT);

    emit participant_countChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_public_transport(bool value)
{
  if (m_public_transport != value) {
    m_public_transport = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PUBLIC_TRANSPORT);

    emit public_transportChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_snow_quality(const QString & value)
{
  if (m_snow_quality != value) {
    m_snow_quality = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SNOW_QUALITY);

    emit snow_qualityChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutings::set_snow_quantity(const QString & value)
{
  if (m_snow_quantity != value) {
    m_snow_quantity = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SNOW_QUANTITY);

    emit snow_quantityChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cOutings::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_access_condition_modified())
      json_object.insert(QLatin1String("access_condition"), QJsonValue(m_access_condition));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_avalanche_signs_modified())
      json_object.insert(QLatin1String("avalanche_signs"), orm_type_conversion::dump_string_list(m_avalanche_signs));
    if (is_condition_rating_modified())
      json_object.insert(QLatin1String("condition_rating"), QJsonValue(m_condition_rating));
    if (is_date_end_modified())
      json_object.insert(QLatin1String("date_end"), orm_type_conversion::dump_date(m_date_end));
    if (is_date_start_modified())
      json_object.insert(QLatin1String("date_start"), orm_type_conversion::dump_date(m_date_start));
    if (is_disable_comments_modified())
      json_object.insert(QLatin1String("disable_comments"), QJsonValue(m_disable_comments));
    if (is_elevation_access_modified())
      json_object.insert(QLatin1String("elevation_access"), QJsonValue(m_elevation_access));
    if (is_elevation_down_snow_modified())
      json_object.insert(QLatin1String("elevation_down_snow"), QJsonValue(m_elevation_down_snow));
    if (is_elevation_max_modified())
      json_object.insert(QLatin1String("elevation_max"), QJsonValue(m_elevation_max));
    if (is_elevation_min_modified())
      json_object.insert(QLatin1String("elevation_min"), QJsonValue(m_elevation_min));
    if (is_elevation_up_snow_modified())
      json_object.insert(QLatin1String("elevation_up_snow"), QJsonValue(m_elevation_up_snow));
    if (is_frequentation_modified())
      json_object.insert(QLatin1String("frequentation"), QJsonValue(m_frequentation));
    if (is_glacier_rating_modified())
      json_object.insert(QLatin1String("glacier_rating"), QJsonValue(m_glacier_rating));
    if (is_height_diff_down_modified())
      json_object.insert(QLatin1String("height_diff_down"), QJsonValue(m_height_diff_down));
    if (is_height_diff_up_modified())
      json_object.insert(QLatin1String("height_diff_up"), QJsonValue(m_height_diff_up));
    if (is_hut_status_modified())
      json_object.insert(QLatin1String("hut_status"), QJsonValue(m_hut_status));
    if (is_length_total_modified())
      json_object.insert(QLatin1String("length_total"), QJsonValue(m_length_total));
    if (is_lift_status_modified())
      json_object.insert(QLatin1String("lift_status"), QJsonValue(m_lift_status));
    if (is_partial_trip_modified())
      json_object.insert(QLatin1String("partial_trip"), QJsonValue(m_partial_trip));
    if (is_participant_count_modified())
      json_object.insert(QLatin1String("participant_count"), QJsonValue(m_participant_count));
    if (is_public_transport_modified())
      json_object.insert(QLatin1String("public_transport"), QJsonValue(m_public_transport));
    if (is_snow_quality_modified())
      json_object.insert(QLatin1String("snow_quality"), QJsonValue(m_snow_quality));
    if (is_snow_quantity_modified())
      json_object.insert(QLatin1String("snow_quantity"), QJsonValue(m_snow_quantity));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("access_condition"), QJsonValue(m_access_condition));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("avalanche_signs"), orm_type_conversion::dump_string_list(m_avalanche_signs));
    json_object.insert(QLatin1String("condition_rating"), QJsonValue(m_condition_rating));
    json_object.insert(QLatin1String("date_end"), orm_type_conversion::dump_date(m_date_end));
    json_object.insert(QLatin1String("date_start"), orm_type_conversion::dump_date(m_date_start));
    json_object.insert(QLatin1String("disable_comments"), QJsonValue(m_disable_comments));
    json_object.insert(QLatin1String("elevation_access"), QJsonValue(m_elevation_access));
    json_object.insert(QLatin1String("elevation_down_snow"), QJsonValue(m_elevation_down_snow));
    json_object.insert(QLatin1String("elevation_max"), QJsonValue(m_elevation_max));
    json_object.insert(QLatin1String("elevation_min"), QJsonValue(m_elevation_min));
    json_object.insert(QLatin1String("elevation_up_snow"), QJsonValue(m_elevation_up_snow));
    json_object.insert(QLatin1String("frequentation"), QJsonValue(m_frequentation));
    json_object.insert(QLatin1String("glacier_rating"), QJsonValue(m_glacier_rating));
    json_object.insert(QLatin1String("height_diff_down"), QJsonValue(m_height_diff_down));
    json_object.insert(QLatin1String("height_diff_up"), QJsonValue(m_height_diff_up));
    json_object.insert(QLatin1String("hut_status"), QJsonValue(m_hut_status));
    json_object.insert(QLatin1String("length_total"), QJsonValue(m_length_total));
    json_object.insert(QLatin1String("lift_status"), QJsonValue(m_lift_status));
    json_object.insert(QLatin1String("partial_trip"), QJsonValue(m_partial_trip));
    json_object.insert(QLatin1String("participant_count"), QJsonValue(m_participant_count));
    json_object.insert(QLatin1String("public_transport"), QJsonValue(m_public_transport));
    json_object.insert(QLatin1String("snow_quality"), QJsonValue(m_snow_quality));
    json_object.insert(QLatin1String("snow_quantity"), QJsonValue(m_snow_quantity));
  }

  return json_object;
}

QVariantHash
C2cOutings::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_access_condition_modified())
      variant_hash[QLatin1String("access_condition")] = m_access_condition;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_avalanche_signs_modified())
      variant_hash[QLatin1String("avalanche_signs")] = m_avalanche_signs;
    if (is_condition_rating_modified())
      variant_hash[QLatin1String("condition_rating")] = m_condition_rating;
    if (is_date_end_modified())
      variant_hash[QLatin1String("date_end")] = m_date_end;
    if (is_date_start_modified())
      variant_hash[QLatin1String("date_start")] = m_date_start;
    if (is_disable_comments_modified())
      variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    if (is_elevation_access_modified())
      variant_hash[QLatin1String("elevation_access")] = m_elevation_access;
    if (is_elevation_down_snow_modified())
      variant_hash[QLatin1String("elevation_down_snow")] = m_elevation_down_snow;
    if (is_elevation_max_modified())
      variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    if (is_elevation_min_modified())
      variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    if (is_elevation_up_snow_modified())
      variant_hash[QLatin1String("elevation_up_snow")] = m_elevation_up_snow;
    if (is_frequentation_modified())
      variant_hash[QLatin1String("frequentation")] = m_frequentation;
    if (is_glacier_rating_modified())
      variant_hash[QLatin1String("glacier_rating")] = m_glacier_rating;
    if (is_height_diff_down_modified())
      variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    if (is_height_diff_up_modified())
      variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    if (is_hut_status_modified())
      variant_hash[QLatin1String("hut_status")] = m_hut_status;
    if (is_length_total_modified())
      variant_hash[QLatin1String("length_total")] = m_length_total;
    if (is_lift_status_modified())
      variant_hash[QLatin1String("lift_status")] = m_lift_status;
    if (is_partial_trip_modified())
      variant_hash[QLatin1String("partial_trip")] = m_partial_trip;
    if (is_participant_count_modified())
      variant_hash[QLatin1String("participant_count")] = m_participant_count;
    if (is_public_transport_modified())
      variant_hash[QLatin1String("public_transport")] = m_public_transport;
    if (is_snow_quality_modified())
      variant_hash[QLatin1String("snow_quality")] = m_snow_quality;
    if (is_snow_quantity_modified())
      variant_hash[QLatin1String("snow_quantity")] = m_snow_quantity;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("access_condition")] = m_access_condition;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("avalanche_signs")] = m_avalanche_signs;
    variant_hash[QLatin1String("condition_rating")] = m_condition_rating;
    variant_hash[QLatin1String("date_end")] = m_date_end;
    variant_hash[QLatin1String("date_start")] = m_date_start;
    variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    variant_hash[QLatin1String("elevation_access")] = m_elevation_access;
    variant_hash[QLatin1String("elevation_down_snow")] = m_elevation_down_snow;
    variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    variant_hash[QLatin1String("elevation_up_snow")] = m_elevation_up_snow;
    variant_hash[QLatin1String("frequentation")] = m_frequentation;
    variant_hash[QLatin1String("glacier_rating")] = m_glacier_rating;
    variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    variant_hash[QLatin1String("hut_status")] = m_hut_status;
    variant_hash[QLatin1String("length_total")] = m_length_total;
    variant_hash[QLatin1String("lift_status")] = m_lift_status;
    variant_hash[QLatin1String("partial_trip")] = m_partial_trip;
    variant_hash[QLatin1String("participant_count")] = m_participant_count;
    variant_hash[QLatin1String("public_transport")] = m_public_transport;
    variant_hash[QLatin1String("snow_quality")] = m_snow_quality;
    variant_hash[QLatin1String("snow_quantity")] = m_snow_quantity;
  }

  return variant_hash;
}

QVariantList
C2cOutings::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_access_condition;
  variants << m_activities;
  variants << m_avalanche_signs;
  variants << m_condition_rating;
  variants << m_date_end;
  variants << m_date_start;
  variants << m_disable_comments;
  variants << m_elevation_access;
  variants << m_elevation_down_snow;
  variants << m_elevation_max;
  variants << m_elevation_min;
  variants << m_elevation_up_snow;
  variants << m_frequentation;
  variants << m_glacier_rating;
  variants << m_height_diff_down;
  variants << m_height_diff_up;
  variants << m_hut_status;
  variants << m_length_total;
  variants << m_lift_status;
  variants << m_partial_trip;
  variants << m_participant_count;
  variants << m_public_transport;
  variants << m_snow_quality;
  variants << m_snow_quantity;

  return variants;
}

QVariantHash
C2cOutings::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_access_condition_modified())
      variant_hash[QLatin1String("access_condition")] = m_access_condition;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_avalanche_signs_modified())
      variant_hash[QLatin1String("avalanche_signs")] = m_avalanche_signs;
    if (is_condition_rating_modified())
      variant_hash[QLatin1String("condition_rating")] = m_condition_rating;
    if (is_date_end_modified())
      variant_hash[QLatin1String("date_end")] = m_date_end;
    if (is_date_start_modified())
      variant_hash[QLatin1String("date_start")] = m_date_start;
    if (is_disable_comments_modified())
      variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    if (is_elevation_access_modified())
      variant_hash[QLatin1String("elevation_access")] = m_elevation_access;
    if (is_elevation_down_snow_modified())
      variant_hash[QLatin1String("elevation_down_snow")] = m_elevation_down_snow;
    if (is_elevation_max_modified())
      variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    if (is_elevation_min_modified())
      variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    if (is_elevation_up_snow_modified())
      variant_hash[QLatin1String("elevation_up_snow")] = m_elevation_up_snow;
    if (is_frequentation_modified())
      variant_hash[QLatin1String("frequentation")] = m_frequentation;
    if (is_glacier_rating_modified())
      variant_hash[QLatin1String("glacier_rating")] = m_glacier_rating;
    if (is_height_diff_down_modified())
      variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    if (is_height_diff_up_modified())
      variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    if (is_hut_status_modified())
      variant_hash[QLatin1String("hut_status")] = m_hut_status;
    if (is_length_total_modified())
      variant_hash[QLatin1String("length_total")] = m_length_total;
    if (is_lift_status_modified())
      variant_hash[QLatin1String("lift_status")] = m_lift_status;
    if (is_partial_trip_modified())
      variant_hash[QLatin1String("partial_trip")] = m_partial_trip;
    if (is_participant_count_modified())
      variant_hash[QLatin1String("participant_count")] = m_participant_count;
    if (is_public_transport_modified())
      variant_hash[QLatin1String("public_transport")] = m_public_transport;
    if (is_snow_quality_modified())
      variant_hash[QLatin1String("snow_quality")] = m_snow_quality;
    if (is_snow_quantity_modified())
      variant_hash[QLatin1String("snow_quantity")] = m_snow_quantity;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("access_condition")] = m_access_condition;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("avalanche_signs")] = m_avalanche_signs;
    variant_hash[QLatin1String("condition_rating")] = m_condition_rating;
    variant_hash[QLatin1String("date_end")] = m_date_end;
    variant_hash[QLatin1String("date_start")] = m_date_start;
    variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    variant_hash[QLatin1String("elevation_access")] = m_elevation_access;
    variant_hash[QLatin1String("elevation_down_snow")] = m_elevation_down_snow;
    variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    variant_hash[QLatin1String("elevation_up_snow")] = m_elevation_up_snow;
    variant_hash[QLatin1String("frequentation")] = m_frequentation;
    variant_hash[QLatin1String("glacier_rating")] = m_glacier_rating;
    variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    variant_hash[QLatin1String("hut_status")] = m_hut_status;
    variant_hash[QLatin1String("length_total")] = m_length_total;
    variant_hash[QLatin1String("lift_status")] = m_lift_status;
    variant_hash[QLatin1String("partial_trip")] = m_partial_trip;
    variant_hash[QLatin1String("participant_count")] = m_participant_count;
    variant_hash[QLatin1String("public_transport")] = m_public_transport;
    variant_hash[QLatin1String("snow_quality")] = m_snow_quality;
    variant_hash[QLatin1String("snow_quantity")] = m_snow_quantity;
  }

  return variant_hash;
}

QVariantList
C2cOutings::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_access_condition;
  variants << m_activities;
  variants << m_avalanche_signs;
  variants << m_condition_rating;
  variants << m_date_end;
  variants << m_date_start;
  variants << m_disable_comments;
  variants << m_elevation_access;
  variants << m_elevation_down_snow;
  variants << m_elevation_max;
  variants << m_elevation_min;
  variants << m_elevation_up_snow;
  variants << m_frequentation;
  variants << m_glacier_rating;
  variants << m_height_diff_down;
  variants << m_height_diff_up;
  variants << m_hut_status;
  variants << m_length_total;
  variants << m_lift_status;
  variants << m_partial_trip;
  variants << m_participant_count;
  variants << m_public_transport;
  variants << m_snow_quality;
  variants << m_snow_quantity;

  return variants;
}

QVariant
C2cOutings::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACCESS_CONDITION:
     return m_access_condition;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::AVALANCHE_SIGNS:
     return m_avalanche_signs;
   case Schema::Fields::CONDITION_RATING:
     return m_condition_rating;
   case Schema::Fields::DATE_END:
     return m_date_end;
   case Schema::Fields::DATE_START:
     return m_date_start;
   case Schema::Fields::DISABLE_COMMENTS:
     return m_disable_comments;
   case Schema::Fields::ELEVATION_ACCESS:
     return m_elevation_access;
   case Schema::Fields::ELEVATION_DOWN_SNOW:
     return m_elevation_down_snow;
   case Schema::Fields::ELEVATION_MAX:
     return m_elevation_max;
   case Schema::Fields::ELEVATION_MIN:
     return m_elevation_min;
   case Schema::Fields::ELEVATION_UP_SNOW:
     return m_elevation_up_snow;
   case Schema::Fields::FREQUENTATION:
     return m_frequentation;
   case Schema::Fields::GLACIER_RATING:
     return m_glacier_rating;
   case Schema::Fields::HEIGHT_DIFF_DOWN:
     return m_height_diff_down;
   case Schema::Fields::HEIGHT_DIFF_UP:
     return m_height_diff_up;
   case Schema::Fields::HUT_STATUS:
     return m_hut_status;
   case Schema::Fields::LENGTH_TOTAL:
     return m_length_total;
   case Schema::Fields::LIFT_STATUS:
     return m_lift_status;
   case Schema::Fields::PARTIAL_TRIP:
     return m_partial_trip;
   case Schema::Fields::PARTICIPANT_COUNT:
     return m_participant_count;
   case Schema::Fields::PUBLIC_TRANSPORT:
     return m_public_transport;
   case Schema::Fields::SNOW_QUALITY:
     return m_snow_quality;
   case Schema::Fields::SNOW_QUANTITY:
     return m_snow_quantity;
   default:
     return QVariant(); // error
  }
}

void
C2cOutings::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACCESS_CONDITION: {
     m_access_condition = value.toString();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::AVALANCHE_SIGNS: {
     m_avalanche_signs = value.toStringList();
     break;
   }
   case Schema::Fields::CONDITION_RATING: {
     m_condition_rating = value.toString();
     break;
   }
   case Schema::Fields::DATE_END: {
     m_date_end = value.toDate();
     break;
   }
   case Schema::Fields::DATE_START: {
     m_date_start = value.toDate();
     break;
   }
   case Schema::Fields::DISABLE_COMMENTS: {
     m_disable_comments = value.toBool();
     break;
   }
   case Schema::Fields::ELEVATION_ACCESS: {
     m_elevation_access = value.toInt();
     break;
   }
   case Schema::Fields::ELEVATION_DOWN_SNOW: {
     m_elevation_down_snow = value.toInt();
     break;
   }
   case Schema::Fields::ELEVATION_MAX: {
     m_elevation_max = value.toInt();
     break;
   }
   case Schema::Fields::ELEVATION_MIN: {
     m_elevation_min = value.toInt();
     break;
   }
   case Schema::Fields::ELEVATION_UP_SNOW: {
     m_elevation_up_snow = value.toInt();
     break;
   }
   case Schema::Fields::FREQUENTATION: {
     m_frequentation = value.toString();
     break;
   }
   case Schema::Fields::GLACIER_RATING: {
     m_glacier_rating = value.toString();
     break;
   }
   case Schema::Fields::HEIGHT_DIFF_DOWN: {
     m_height_diff_down = value.toInt();
     break;
   }
   case Schema::Fields::HEIGHT_DIFF_UP: {
     m_height_diff_up = value.toInt();
     break;
   }
   case Schema::Fields::HUT_STATUS: {
     m_hut_status = value.toString();
     break;
   }
   case Schema::Fields::LENGTH_TOTAL: {
     m_length_total = value.toInt();
     break;
   }
   case Schema::Fields::LIFT_STATUS: {
     m_lift_status = value.toString();
     break;
   }
   case Schema::Fields::PARTIAL_TRIP: {
     m_partial_trip = value.toBool();
     break;
   }
   case Schema::Fields::PARTICIPANT_COUNT: {
     m_participant_count = value.toInt();
     break;
   }
   case Schema::Fields::PUBLIC_TRANSPORT: {
     m_public_transport = value.toBool();
     break;
   }
   case Schema::Fields::SNOW_QUALITY: {
     m_snow_quality = value.toString();
     break;
   }
   case Schema::Fields::SNOW_QUANTITY: {
     m_snow_quantity = value.toString();
     break;
   }
  }
}

void
C2cOutings::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cOutings::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cOutings::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cOutings & obj)
{
  out << obj.document_id();
  out << obj.access_condition();
  out << obj.activities();
  out << obj.avalanche_signs();
  out << obj.condition_rating();
  out << obj.date_end();
  out << obj.date_start();
  out << obj.disable_comments();
  out << obj.elevation_access();
  out << obj.elevation_down_snow();
  out << obj.elevation_max();
  out << obj.elevation_min();
  out << obj.elevation_up_snow();
  out << obj.frequentation();
  out << obj.glacier_rating();
  out << obj.height_diff_down();
  out << obj.height_diff_up();
  out << obj.hut_status();
  out << obj.length_total();
  out << obj.lift_status();
  out << obj.partial_trip();
  out << obj.participant_count();
  out << obj.public_transport();
  out << obj.snow_quality();
  out << obj.snow_quantity();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cOutings & obj)
{
  QDate _QDate;
  QString _QString;
  QStringList _QStringList;
  bool _bool;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QString;
  obj.set_access_condition(_QString);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QStringList;
  obj.set_avalanche_signs(_QStringList);
  in >> _QString;
  obj.set_condition_rating(_QString);
  in >> _QDate;
  obj.set_date_end(_QDate);
  in >> _QDate;
  obj.set_date_start(_QDate);
  in >> _bool;
  obj.set_disable_comments(_bool);
  in >> _int;
  obj.set_elevation_access(_int);
  in >> _int;
  obj.set_elevation_down_snow(_int);
  in >> _int;
  obj.set_elevation_max(_int);
  in >> _int;
  obj.set_elevation_min(_int);
  in >> _int;
  obj.set_elevation_up_snow(_int);
  in >> _QString;
  obj.set_frequentation(_QString);
  in >> _QString;
  obj.set_glacier_rating(_QString);
  in >> _int;
  obj.set_height_diff_down(_int);
  in >> _int;
  obj.set_height_diff_up(_int);
  in >> _QString;
  obj.set_hut_status(_QString);
  in >> _int;
  obj.set_length_total(_int);
  in >> _QString;
  obj.set_lift_status(_QString);
  in >> _bool;
  obj.set_partial_trip(_bool);
  in >> _int;
  obj.set_participant_count(_int);
  in >> _bool;
  obj.set_public_transport(_bool);
  in >> _QString;
  obj.set_snow_quality(_QString);
  in >> _QString;
  obj.set_snow_quantity(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cOutings & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cOutings(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.access_condition();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.avalanche_signs();
  debug << QStringLiteral(", ");
  debug << obj.condition_rating();
  debug << QStringLiteral(", ");
  debug << obj.date_end();
  debug << QStringLiteral(", ");
  debug << obj.date_start();
  debug << QStringLiteral(", ");
  debug << obj.disable_comments();
  debug << QStringLiteral(", ");
  debug << obj.elevation_access();
  debug << QStringLiteral(", ");
  debug << obj.elevation_down_snow();
  debug << QStringLiteral(", ");
  debug << obj.elevation_max();
  debug << QStringLiteral(", ");
  debug << obj.elevation_min();
  debug << QStringLiteral(", ");
  debug << obj.elevation_up_snow();
  debug << QStringLiteral(", ");
  debug << obj.frequentation();
  debug << QStringLiteral(", ");
  debug << obj.glacier_rating();
  debug << QStringLiteral(", ");
  debug << obj.height_diff_down();
  debug << QStringLiteral(", ");
  debug << obj.height_diff_up();
  debug << QStringLiteral(", ");
  debug << obj.hut_status();
  debug << QStringLiteral(", ");
  debug << obj.length_total();
  debug << QStringLiteral(", ");
  debug << obj.lift_status();
  debug << QStringLiteral(", ");
  debug << obj.partial_trip();
  debug << QStringLiteral(", ");
  debug << obj.participant_count();
  debug << QStringLiteral(", ");
  debug << obj.public_transport();
  debug << QStringLiteral(", ");
  debug << obj.snow_quality();
  debug << QStringLiteral(", ");
  debug << obj.snow_quantity();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cOutingsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cOutingsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cOutingsCache::C2cOutingsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cOutingsCache::~C2cOutingsCache()
{}

void
C2cOutingsCache::add(C2cOutingsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cOutings::changed,
                   this, &C2cOutingsCache::on_changed);
}

void
C2cOutingsCache::remove(C2cOutingsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cOutingsCache::on_changed()
{
  C2cOutings * row = qobject_cast<C2cOutings *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cOutingsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cOutingsModel::C2cOutingsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cOutingsModel::C2cOutingsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cOutingsModel::~C2cOutingsModel()
{}

int
C2cOutingsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cOutingsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cOutingsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACCESS_CONDITION:
    return item->access_condition();
  case ACTIVITIES:
    return item->activities();
  case AVALANCHE_SIGNS:
    return item->avalanche_signs();
  case CONDITION_RATING:
    return item->condition_rating();
  case DATE_END:
    return item->date_end();
  case DATE_START:
    return item->date_start();
  case DISABLE_COMMENTS:
    return item->disable_comments();
  case ELEVATION_ACCESS:
    return item->elevation_access();
  case ELEVATION_DOWN_SNOW:
    return item->elevation_down_snow();
  case ELEVATION_MAX:
    return item->elevation_max();
  case ELEVATION_MIN:
    return item->elevation_min();
  case ELEVATION_UP_SNOW:
    return item->elevation_up_snow();
  case FREQUENTATION:
    return item->frequentation();
  case GLACIER_RATING:
    return item->glacier_rating();
  case HEIGHT_DIFF_DOWN:
    return item->height_diff_down();
  case HEIGHT_DIFF_UP:
    return item->height_diff_up();
  case HUT_STATUS:
    return item->hut_status();
  case LENGTH_TOTAL:
    return item->length_total();
  case LIFT_STATUS:
    return item->lift_status();
  case PARTIAL_TRIP:
    return item->partial_trip();
  case PARTICIPANT_COUNT:
    return item->participant_count();
  case PUBLIC_TRANSPORT:
    return item->public_transport();
  case SNOW_QUALITY:
    return item->snow_quality();
  case SNOW_QUANTITY:
    return item->snow_quantity();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cOutingsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACCESS_CONDITION] = QStringLiteral("access_condition").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[AVALANCHE_SIGNS] = QStringLiteral("avalanche_signs").latin1();
  role_names[CONDITION_RATING] = QStringLiteral("condition_rating").latin1();
  role_names[DATE_END] = QStringLiteral("date_end").latin1();
  role_names[DATE_START] = QStringLiteral("date_start").latin1();
  role_names[DISABLE_COMMENTS] = QStringLiteral("disable_comments").latin1();
  role_names[ELEVATION_ACCESS] = QStringLiteral("elevation_access").latin1();
  role_names[ELEVATION_DOWN_SNOW] = QStringLiteral("elevation_down_snow").latin1();
  role_names[ELEVATION_MAX] = QStringLiteral("elevation_max").latin1();
  role_names[ELEVATION_MIN] = QStringLiteral("elevation_min").latin1();
  role_names[ELEVATION_UP_SNOW] = QStringLiteral("elevation_up_snow").latin1();
  role_names[FREQUENTATION] = QStringLiteral("frequentation").latin1();
  role_names[GLACIER_RATING] = QStringLiteral("glacier_rating").latin1();
  role_names[HEIGHT_DIFF_DOWN] = QStringLiteral("height_diff_down").latin1();
  role_names[HEIGHT_DIFF_UP] = QStringLiteral("height_diff_up").latin1();
  role_names[HUT_STATUS] = QStringLiteral("hut_status").latin1();
  role_names[LENGTH_TOTAL] = QStringLiteral("length_total").latin1();
  role_names[LIFT_STATUS] = QStringLiteral("lift_status").latin1();
  role_names[PARTIAL_TRIP] = QStringLiteral("partial_trip").latin1();
  role_names[PARTICIPANT_COUNT] = QStringLiteral("participant_count").latin1();
  role_names[PUBLIC_TRANSPORT] = QStringLiteral("public_transport").latin1();
  role_names[SNOW_QUALITY] = QStringLiteral("snow_quality").latin1();
  role_names[SNOW_QUANTITY] = QStringLiteral("snow_quantity").latin1();

  return role_names;
}

void
C2cOutingsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cOutingsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cOutingsLocalesSchema::C2cOutingsLocalesSchema()
: QoSchema(QLatin1String("C2cOutingsLocales"), QLatin1String("c2c_outings_locales"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("access_comment"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("access_comment"),
      QLatin1String("access_comment"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("avalanches"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("avalanches"),
      QLatin1String("avalanches"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("conditions"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("conditions"),
      QLatin1String("conditions"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("conditions_levels"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("conditions_levels"),
      QLatin1String("conditions_levels"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("hut_comment"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("hut_comment"),
      QLatin1String("hut_comment"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("participants"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("participants"),
      QLatin1String("participants"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("route_description"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("route_description"),
      QLatin1String("route_description"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("timing"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("timing"),
      QLatin1String("timing"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("weather"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("weather"),
      QLatin1String("weather"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cOutingsLocalesSchema::~C2cOutingsLocalesSchema()
{}

/**************************************************************************************************/

C2cOutingsLocales::C2cOutingsLocales()
  : QObject(),
    QoRow<C2cOutingsLocalesSchema>(),
    m_id(),
    m_access_comment(),
    m_avalanches(),
    m_conditions(),
    m_conditions_levels(),
    m_hut_comment(),
    m_participants(),
    m_route_description(),
    m_timing(),
    m_weather()
{
}

C2cOutingsLocales::C2cOutingsLocales(const C2cOutingsLocales & other)
  : QObject(),
    QoRow<C2cOutingsLocalesSchema>(other),
    m_id(other.m_id),
    m_access_comment(other.m_access_comment),
    m_avalanches(other.m_avalanches),
    m_conditions(other.m_conditions),
    m_conditions_levels(other.m_conditions_levels),
    m_hut_comment(other.m_hut_comment),
    m_participants(other.m_participants),
    m_route_description(other.m_route_description),
    m_timing(other.m_timing),
    m_weather(other.m_weather)
{
}

C2cOutingsLocales::C2cOutingsLocales(const QJsonObject & json_object)
 : C2cOutingsLocales()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_access_comment = json_object[QLatin1String("access_comment")].toString();
  m_avalanches = json_object[QLatin1String("avalanches")].toString();
  m_conditions = json_object[QLatin1String("conditions")].toString();
  m_conditions_levels = json_object[QLatin1String("conditions_levels")].toString();
  m_hut_comment = json_object[QLatin1String("hut_comment")].toString();
  m_participants = json_object[QLatin1String("participants")].toString();
  m_route_description = json_object[QLatin1String("route_description")].toString();
  m_timing = json_object[QLatin1String("timing")].toString();
  m_weather = json_object[QLatin1String("weather")].toString();
}

C2cOutingsLocales::C2cOutingsLocales(const QVariantHash & variant_hash)
 : C2cOutingsLocales()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_access_comment = variant_hash[QLatin1String("access_comment")].toString();
  m_avalanches = variant_hash[QLatin1String("avalanches")].toString();
  m_conditions = variant_hash[QLatin1String("conditions")].toString();
  m_conditions_levels = variant_hash[QLatin1String("conditions_levels")].toString();
  m_hut_comment = variant_hash[QLatin1String("hut_comment")].toString();
  m_participants = variant_hash[QLatin1String("participants")].toString();
  m_route_description = variant_hash[QLatin1String("route_description")].toString();
  m_timing = variant_hash[QLatin1String("timing")].toString();
  m_weather = variant_hash[QLatin1String("weather")].toString();
}

C2cOutingsLocales::C2cOutingsLocales(const QVariantList & variants)
 : C2cOutingsLocales()
{
  m_id = variants[0].toInt();
  m_access_comment = variants[1].toString();
  m_avalanches = variants[2].toString();
  m_conditions = variants[3].toString();
  m_conditions_levels = variants[4].toString();
  m_hut_comment = variants[5].toString();
  m_participants = variants[6].toString();
  m_route_description = variants[7].toString();
  m_timing = variants[8].toString();
  m_weather = variants[9].toString();
}

C2cOutingsLocales::C2cOutingsLocales(const QSqlRecord & record)
 : QoRow<C2cOutingsLocalesSchema>(record)
{
  m_id = record.value(0).toInt();
  m_access_comment = record.value(1).toString();
  m_avalanches = record.value(2).toString();
  m_conditions = record.value(3).toString();
  m_conditions_levels = record.value(4).toString();
  m_hut_comment = record.value(5).toString();
  m_participants = record.value(6).toString();
  m_route_description = record.value(7).toString();
  m_timing = record.value(8).toString();
  m_weather = record.value(9).toString();
}

C2cOutingsLocales::C2cOutingsLocales(const QSqlQuery & query, int offset)
 : QoRow<C2cOutingsLocalesSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_access_comment = query.value(offset++).toString();
  m_avalanches = query.value(offset++).toString();
  m_conditions = query.value(offset++).toString();
  m_conditions_levels = query.value(offset++).toString();
  m_hut_comment = query.value(offset++).toString();
  m_participants = query.value(offset++).toString();
  m_route_description = query.value(offset++).toString();
  m_timing = query.value(offset++).toString();
  m_weather = query.value(offset).toString();
}

C2cOutingsLocales::~C2cOutingsLocales()
{
// qATInfo() << "--- Delete" << "C2cOutingsLocales" << *this;
}

// bit array ?
C2cOutingsLocales &
C2cOutingsLocales::operator=(const C2cOutingsLocales & other)
{
  if (this != &other) {
    QoRow<C2cOutingsLocalesSchema>::operator=(other);
    m_id = other.m_id;
    m_access_comment = other.m_access_comment;
    m_avalanches = other.m_avalanches;
    m_conditions = other.m_conditions;
    m_conditions_levels = other.m_conditions_levels;
    m_hut_comment = other.m_hut_comment;
    m_participants = other.m_participants;
    m_route_description = other.m_route_description;
    m_timing = other.m_timing;
    m_weather = other.m_weather;
  }

  return *this;
}

// bit array ?
bool
C2cOutingsLocales::operator==(const C2cOutingsLocales & other) const
{
  if (not QoRow<C2cOutingsLocalesSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_access_comment != other.m_access_comment)
    return false;
  if (m_avalanches != other.m_avalanches)
    return false;
  if (m_conditions != other.m_conditions)
    return false;
  if (m_conditions_levels != other.m_conditions_levels)
    return false;
  if (m_hut_comment != other.m_hut_comment)
    return false;
  if (m_participants != other.m_participants)
    return false;
  if (m_route_description != other.m_route_description)
    return false;
  if (m_timing != other.m_timing)
    return false;
  if (m_weather != other.m_weather)
    return false;

  return true;
}

void
C2cOutingsLocales::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_access_comment(const QString & value)
{
  if (m_access_comment != value) {
    m_access_comment = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACCESS_COMMENT);

    emit access_commentChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_avalanches(const QString & value)
{
  if (m_avalanches != value) {
    m_avalanches = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AVALANCHES);

    emit avalanchesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_conditions(const QString & value)
{
  if (m_conditions != value) {
    m_conditions = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CONDITIONS);

    emit conditionsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_conditions_levels(const QString & value)
{
  if (m_conditions_levels != value) {
    m_conditions_levels = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CONDITIONS_LEVELS);

    emit conditions_levelsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_hut_comment(const QString & value)
{
  if (m_hut_comment != value) {
    m_hut_comment = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HUT_COMMENT);

    emit hut_commentChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_participants(const QString & value)
{
  if (m_participants != value) {
    m_participants = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARTICIPANTS);

    emit participantsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_route_description(const QString & value)
{
  if (m_route_description != value) {
    m_route_description = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROUTE_DESCRIPTION);

    emit route_descriptionChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_timing(const QString & value)
{
  if (m_timing != value) {
    m_timing = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TIMING);

    emit timingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cOutingsLocales::set_weather(const QString & value)
{
  if (m_weather != value) {
    m_weather = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::WEATHER);

    emit weatherChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cOutingsLocales::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_access_comment_modified())
      json_object.insert(QLatin1String("access_comment"), QJsonValue(m_access_comment));
    if (is_avalanches_modified())
      json_object.insert(QLatin1String("avalanches"), QJsonValue(m_avalanches));
    if (is_conditions_modified())
      json_object.insert(QLatin1String("conditions"), QJsonValue(m_conditions));
    if (is_conditions_levels_modified())
      json_object.insert(QLatin1String("conditions_levels"), QJsonValue(m_conditions_levels));
    if (is_hut_comment_modified())
      json_object.insert(QLatin1String("hut_comment"), QJsonValue(m_hut_comment));
    if (is_participants_modified())
      json_object.insert(QLatin1String("participants"), QJsonValue(m_participants));
    if (is_route_description_modified())
      json_object.insert(QLatin1String("route_description"), QJsonValue(m_route_description));
    if (is_timing_modified())
      json_object.insert(QLatin1String("timing"), QJsonValue(m_timing));
    if (is_weather_modified())
      json_object.insert(QLatin1String("weather"), QJsonValue(m_weather));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("access_comment"), QJsonValue(m_access_comment));
    json_object.insert(QLatin1String("avalanches"), QJsonValue(m_avalanches));
    json_object.insert(QLatin1String("conditions"), QJsonValue(m_conditions));
    json_object.insert(QLatin1String("conditions_levels"), QJsonValue(m_conditions_levels));
    json_object.insert(QLatin1String("hut_comment"), QJsonValue(m_hut_comment));
    json_object.insert(QLatin1String("participants"), QJsonValue(m_participants));
    json_object.insert(QLatin1String("route_description"), QJsonValue(m_route_description));
    json_object.insert(QLatin1String("timing"), QJsonValue(m_timing));
    json_object.insert(QLatin1String("weather"), QJsonValue(m_weather));
  }

  return json_object;
}

QVariantHash
C2cOutingsLocales::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_access_comment_modified())
      variant_hash[QLatin1String("access_comment")] = m_access_comment;
    if (is_avalanches_modified())
      variant_hash[QLatin1String("avalanches")] = m_avalanches;
    if (is_conditions_modified())
      variant_hash[QLatin1String("conditions")] = m_conditions;
    if (is_conditions_levels_modified())
      variant_hash[QLatin1String("conditions_levels")] = m_conditions_levels;
    if (is_hut_comment_modified())
      variant_hash[QLatin1String("hut_comment")] = m_hut_comment;
    if (is_participants_modified())
      variant_hash[QLatin1String("participants")] = m_participants;
    if (is_route_description_modified())
      variant_hash[QLatin1String("route_description")] = m_route_description;
    if (is_timing_modified())
      variant_hash[QLatin1String("timing")] = m_timing;
    if (is_weather_modified())
      variant_hash[QLatin1String("weather")] = m_weather;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("access_comment")] = m_access_comment;
    variant_hash[QLatin1String("avalanches")] = m_avalanches;
    variant_hash[QLatin1String("conditions")] = m_conditions;
    variant_hash[QLatin1String("conditions_levels")] = m_conditions_levels;
    variant_hash[QLatin1String("hut_comment")] = m_hut_comment;
    variant_hash[QLatin1String("participants")] = m_participants;
    variant_hash[QLatin1String("route_description")] = m_route_description;
    variant_hash[QLatin1String("timing")] = m_timing;
    variant_hash[QLatin1String("weather")] = m_weather;
  }

  return variant_hash;
}

QVariantList
C2cOutingsLocales::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_access_comment;
  variants << m_avalanches;
  variants << m_conditions;
  variants << m_conditions_levels;
  variants << m_hut_comment;
  variants << m_participants;
  variants << m_route_description;
  variants << m_timing;
  variants << m_weather;

  return variants;
}

QVariantHash
C2cOutingsLocales::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_access_comment_modified())
      variant_hash[QLatin1String("access_comment")] = m_access_comment;
    if (is_avalanches_modified())
      variant_hash[QLatin1String("avalanches")] = m_avalanches;
    if (is_conditions_modified())
      variant_hash[QLatin1String("conditions")] = m_conditions;
    if (is_conditions_levels_modified())
      variant_hash[QLatin1String("conditions_levels")] = m_conditions_levels;
    if (is_hut_comment_modified())
      variant_hash[QLatin1String("hut_comment")] = m_hut_comment;
    if (is_participants_modified())
      variant_hash[QLatin1String("participants")] = m_participants;
    if (is_route_description_modified())
      variant_hash[QLatin1String("route_description")] = m_route_description;
    if (is_timing_modified())
      variant_hash[QLatin1String("timing")] = m_timing;
    if (is_weather_modified())
      variant_hash[QLatin1String("weather")] = m_weather;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("access_comment")] = m_access_comment;
    variant_hash[QLatin1String("avalanches")] = m_avalanches;
    variant_hash[QLatin1String("conditions")] = m_conditions;
    variant_hash[QLatin1String("conditions_levels")] = m_conditions_levels;
    variant_hash[QLatin1String("hut_comment")] = m_hut_comment;
    variant_hash[QLatin1String("participants")] = m_participants;
    variant_hash[QLatin1String("route_description")] = m_route_description;
    variant_hash[QLatin1String("timing")] = m_timing;
    variant_hash[QLatin1String("weather")] = m_weather;
  }

  return variant_hash;
}

QVariantList
C2cOutingsLocales::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_access_comment;
  variants << m_avalanches;
  variants << m_conditions;
  variants << m_conditions_levels;
  variants << m_hut_comment;
  variants << m_participants;
  variants << m_route_description;
  variants << m_timing;
  variants << m_weather;

  return variants;
}

QVariant
C2cOutingsLocales::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::ACCESS_COMMENT:
     return m_access_comment;
   case Schema::Fields::AVALANCHES:
     return m_avalanches;
   case Schema::Fields::CONDITIONS:
     return m_conditions;
   case Schema::Fields::CONDITIONS_LEVELS:
     return m_conditions_levels;
   case Schema::Fields::HUT_COMMENT:
     return m_hut_comment;
   case Schema::Fields::PARTICIPANTS:
     return m_participants;
   case Schema::Fields::ROUTE_DESCRIPTION:
     return m_route_description;
   case Schema::Fields::TIMING:
     return m_timing;
   case Schema::Fields::WEATHER:
     return m_weather;
   default:
     return QVariant(); // error
  }
}

void
C2cOutingsLocales::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::ACCESS_COMMENT: {
     m_access_comment = value.toString();
     break;
   }
   case Schema::Fields::AVALANCHES: {
     m_avalanches = value.toString();
     break;
   }
   case Schema::Fields::CONDITIONS: {
     m_conditions = value.toString();
     break;
   }
   case Schema::Fields::CONDITIONS_LEVELS: {
     m_conditions_levels = value.toString();
     break;
   }
   case Schema::Fields::HUT_COMMENT: {
     m_hut_comment = value.toString();
     break;
   }
   case Schema::Fields::PARTICIPANTS: {
     m_participants = value.toString();
     break;
   }
   case Schema::Fields::ROUTE_DESCRIPTION: {
     m_route_description = value.toString();
     break;
   }
   case Schema::Fields::TIMING: {
     m_timing = value.toString();
     break;
   }
   case Schema::Fields::WEATHER: {
     m_weather = value.toString();
     break;
   }
  }
}

void
C2cOutingsLocales::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cOutingsLocales::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cOutingsLocales::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cOutingsLocales & obj)
{
  out << obj.id();
  out << obj.access_comment();
  out << obj.avalanches();
  out << obj.conditions();
  out << obj.conditions_levels();
  out << obj.hut_comment();
  out << obj.participants();
  out << obj.route_description();
  out << obj.timing();
  out << obj.weather();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cOutingsLocales & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QString;
  obj.set_access_comment(_QString);
  in >> _QString;
  obj.set_avalanches(_QString);
  in >> _QString;
  obj.set_conditions(_QString);
  in >> _QString;
  obj.set_conditions_levels(_QString);
  in >> _QString;
  obj.set_hut_comment(_QString);
  in >> _QString;
  obj.set_participants(_QString);
  in >> _QString;
  obj.set_route_description(_QString);
  in >> _QString;
  obj.set_timing(_QString);
  in >> _QString;
  obj.set_weather(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cOutingsLocales & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cOutingsLocales(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.access_comment();
  debug << QStringLiteral(", ");
  debug << obj.avalanches();
  debug << QStringLiteral(", ");
  debug << obj.conditions();
  debug << QStringLiteral(", ");
  debug << obj.conditions_levels();
  debug << QStringLiteral(", ");
  debug << obj.hut_comment();
  debug << QStringLiteral(", ");
  debug << obj.participants();
  debug << QStringLiteral(", ");
  debug << obj.route_description();
  debug << QStringLiteral(", ");
  debug << obj.timing();
  debug << QStringLiteral(", ");
  debug << obj.weather();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cOutingsLocalesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cOutingsLocalesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cOutingsLocalesCache::C2cOutingsLocalesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cOutingsLocalesCache::~C2cOutingsLocalesCache()
{}

void
C2cOutingsLocalesCache::add(C2cOutingsLocalesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cOutingsLocales::changed,
                   this, &C2cOutingsLocalesCache::on_changed);
}

void
C2cOutingsLocalesCache::remove(C2cOutingsLocalesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cOutingsLocalesCache::on_changed()
{
  C2cOutingsLocales * row = qobject_cast<C2cOutingsLocales *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cOutingsLocalesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cOutingsLocalesModel::C2cOutingsLocalesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cOutingsLocalesModel::C2cOutingsLocalesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cOutingsLocalesModel::~C2cOutingsLocalesModel()
{}

int
C2cOutingsLocalesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cOutingsLocalesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cOutingsLocalesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case ACCESS_COMMENT:
    return item->access_comment();
  case AVALANCHES:
    return item->avalanches();
  case CONDITIONS:
    return item->conditions();
  case CONDITIONS_LEVELS:
    return item->conditions_levels();
  case HUT_COMMENT:
    return item->hut_comment();
  case PARTICIPANTS:
    return item->participants();
  case ROUTE_DESCRIPTION:
    return item->route_description();
  case TIMING:
    return item->timing();
  case WEATHER:
    return item->weather();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cOutingsLocalesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[ACCESS_COMMENT] = QStringLiteral("access_comment").latin1();
  role_names[AVALANCHES] = QStringLiteral("avalanches").latin1();
  role_names[CONDITIONS] = QStringLiteral("conditions").latin1();
  role_names[CONDITIONS_LEVELS] = QStringLiteral("conditions_levels").latin1();
  role_names[HUT_COMMENT] = QStringLiteral("hut_comment").latin1();
  role_names[PARTICIPANTS] = QStringLiteral("participants").latin1();
  role_names[ROUTE_DESCRIPTION] = QStringLiteral("route_description").latin1();
  role_names[TIMING] = QStringLiteral("timing").latin1();
  role_names[WEATHER] = QStringLiteral("weather").latin1();

  return role_names;
}

void
C2cOutingsLocalesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cOutingsLocalesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cRoutesSchema::C2cRoutesSchema()
: QoSchema(QLatin1String("C2cRoutes"), QLatin1String("c2c_routes"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("aid_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("aid_rating"),
      QLatin1String("aid_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_outdoor_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("climbing_outdoor_type"),
      QLatin1String("climbing_outdoor_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("configuration"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("configuration"),
      QLatin1String("configuration"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("difficulties_height"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("difficulties_height"),
      QLatin1String("difficulties_height"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("durations"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("durations"),
      QLatin1String("durations"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_max"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_max"),
      QLatin1String("elevation_max"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_min"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_min"),
      QLatin1String("elevation_min"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("engagement_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("engagement_rating"),
      QLatin1String("engagement_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("equipment_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("equipment_rating"),
      QLatin1String("equipment_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("exposition_rock_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("exposition_rock_rating"),
      QLatin1String("exposition_rock_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("glacier_gear"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("glacier_gear"),
      QLatin1String("glacier_gear"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("global_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("global_rating"),
      QLatin1String("global_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_diff_access"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_diff_access"),
      QLatin1String("height_diff_access"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_diff_difficulties"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_diff_difficulties"),
      QLatin1String("height_diff_difficulties"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_diff_down"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_diff_down"),
      QLatin1String("height_diff_down"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_diff_up"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_diff_up"),
      QLatin1String("height_diff_up"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("hiking_mtb_exposition"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("hiking_mtb_exposition"),
      QLatin1String("hiking_mtb_exposition"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("hiking_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("hiking_rating"),
      QLatin1String("hiking_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("ice_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("ice_rating"),
      QLatin1String("ice_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("labande_global_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("labande_global_rating"),
      QLatin1String("labande_global_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("labande_ski_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("labande_ski_rating"),
      QLatin1String("labande_ski_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("lift_access"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("lift_access"),
      QLatin1String("lift_access"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("main_waypoint_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("main_waypoint_id"),
      QLatin1String("main_waypoint_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("mixed_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("mixed_rating"),
      QLatin1String("mixed_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("mtb_down_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("mtb_down_rating"),
      QLatin1String("mtb_down_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("mtb_height_diff_portages"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("mtb_height_diff_portages"),
      QLatin1String("mtb_height_diff_portages"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("mtb_length_asphalt"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("mtb_length_asphalt"),
      QLatin1String("mtb_length_asphalt"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("mtb_length_trail"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("mtb_length_trail"),
      QLatin1String("mtb_length_trail"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("mtb_up_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("mtb_up_rating"),
      QLatin1String("mtb_up_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("orientations"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("orientations"),
      QLatin1String("orientations"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("risk_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("risk_rating"),
      QLatin1String("risk_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rock_free_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("rock_free_rating"),
      QLatin1String("rock_free_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rock_required_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("rock_required_rating"),
      QLatin1String("rock_required_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rock_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("rock_types"),
      QLatin1String("rock_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("route_length"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("route_length"),
      QLatin1String("route_length"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("route_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("route_types"),
      QLatin1String("route_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("ski_exposition"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("ski_exposition"),
      QLatin1String("ski_exposition"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("ski_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("ski_rating"),
      QLatin1String("ski_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_height"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("slackline_height"),
      QLatin1String("slackline_height"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("slackline_type"),
      QLatin1String("slackline_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("snowshoe_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("snowshoe_rating"),
      QLatin1String("snowshoe_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("via_ferrata_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("via_ferrata_rating"),
      QLatin1String("via_ferrata_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cRoutesSchema::~C2cRoutesSchema()
{}

/**************************************************************************************************/

C2cRoutes::C2cRoutes()
  : QObject(),
    QoRow<C2cRoutesSchema>(),
    m_document_id(),
    m_activities(),
    m_aid_rating(),
    m_climbing_outdoor_type(),
    m_configuration(),
    m_difficulties_height(),
    m_durations(),
    m_elevation_max(),
    m_elevation_min(),
    m_engagement_rating(),
    m_equipment_rating(),
    m_exposition_rock_rating(),
    m_glacier_gear(),
    m_global_rating(),
    m_height_diff_access(),
    m_height_diff_difficulties(),
    m_height_diff_down(),
    m_height_diff_up(),
    m_hiking_mtb_exposition(),
    m_hiking_rating(),
    m_ice_rating(),
    m_labande_global_rating(),
    m_labande_ski_rating(),
    m_lift_access(),
    m_main_waypoint_id(),
    m_mixed_rating(),
    m_mtb_down_rating(),
    m_mtb_height_diff_portages(),
    m_mtb_length_asphalt(),
    m_mtb_length_trail(),
    m_mtb_up_rating(),
    m_orientations(),
    m_risk_rating(),
    m_rock_free_rating(),
    m_rock_required_rating(),
    m_rock_types(),
    m_route_length(),
    m_route_types(),
    m_ski_exposition(),
    m_ski_rating(),
    m_slackline_height(),
    m_slackline_type(),
    m_snowshoe_rating(),
    m_via_ferrata_rating()
{
}

C2cRoutes::C2cRoutes(const C2cRoutes & other)
  : QObject(),
    QoRow<C2cRoutesSchema>(other),
    m_document_id(other.m_document_id),
    m_activities(other.m_activities),
    m_aid_rating(other.m_aid_rating),
    m_climbing_outdoor_type(other.m_climbing_outdoor_type),
    m_configuration(other.m_configuration),
    m_difficulties_height(other.m_difficulties_height),
    m_durations(other.m_durations),
    m_elevation_max(other.m_elevation_max),
    m_elevation_min(other.m_elevation_min),
    m_engagement_rating(other.m_engagement_rating),
    m_equipment_rating(other.m_equipment_rating),
    m_exposition_rock_rating(other.m_exposition_rock_rating),
    m_glacier_gear(other.m_glacier_gear),
    m_global_rating(other.m_global_rating),
    m_height_diff_access(other.m_height_diff_access),
    m_height_diff_difficulties(other.m_height_diff_difficulties),
    m_height_diff_down(other.m_height_diff_down),
    m_height_diff_up(other.m_height_diff_up),
    m_hiking_mtb_exposition(other.m_hiking_mtb_exposition),
    m_hiking_rating(other.m_hiking_rating),
    m_ice_rating(other.m_ice_rating),
    m_labande_global_rating(other.m_labande_global_rating),
    m_labande_ski_rating(other.m_labande_ski_rating),
    m_lift_access(other.m_lift_access),
    m_main_waypoint_id(other.m_main_waypoint_id),
    m_mixed_rating(other.m_mixed_rating),
    m_mtb_down_rating(other.m_mtb_down_rating),
    m_mtb_height_diff_portages(other.m_mtb_height_diff_portages),
    m_mtb_length_asphalt(other.m_mtb_length_asphalt),
    m_mtb_length_trail(other.m_mtb_length_trail),
    m_mtb_up_rating(other.m_mtb_up_rating),
    m_orientations(other.m_orientations),
    m_risk_rating(other.m_risk_rating),
    m_rock_free_rating(other.m_rock_free_rating),
    m_rock_required_rating(other.m_rock_required_rating),
    m_rock_types(other.m_rock_types),
    m_route_length(other.m_route_length),
    m_route_types(other.m_route_types),
    m_ski_exposition(other.m_ski_exposition),
    m_ski_rating(other.m_ski_rating),
    m_slackline_height(other.m_slackline_height),
    m_slackline_type(other.m_slackline_type),
    m_snowshoe_rating(other.m_snowshoe_rating),
    m_via_ferrata_rating(other.m_via_ferrata_rating)
{
}

C2cRoutes::C2cRoutes(const QJsonObject & json_object)
 : C2cRoutes()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_aid_rating = json_object[QLatin1String("aid_rating")].toString();
  m_climbing_outdoor_type = json_object[QLatin1String("climbing_outdoor_type")].toString();
  m_configuration = orm_type_conversion::load_string_list(json_object[QLatin1String("configuration")]);
  m_difficulties_height = json_object[QLatin1String("difficulties_height")].toInt();
  m_durations = orm_type_conversion::load_string_list(json_object[QLatin1String("durations")]);
  m_elevation_max = json_object[QLatin1String("elevation_max")].toInt();
  m_elevation_min = json_object[QLatin1String("elevation_min")].toInt();
  m_engagement_rating = json_object[QLatin1String("engagement_rating")].toString();
  m_equipment_rating = json_object[QLatin1String("equipment_rating")].toString();
  m_exposition_rock_rating = json_object[QLatin1String("exposition_rock_rating")].toString();
  m_glacier_gear = json_object[QLatin1String("glacier_gear")].toString();
  m_global_rating = json_object[QLatin1String("global_rating")].toString();
  m_height_diff_access = json_object[QLatin1String("height_diff_access")].toInt();
  m_height_diff_difficulties = json_object[QLatin1String("height_diff_difficulties")].toInt();
  m_height_diff_down = json_object[QLatin1String("height_diff_down")].toInt();
  m_height_diff_up = json_object[QLatin1String("height_diff_up")].toInt();
  m_hiking_mtb_exposition = json_object[QLatin1String("hiking_mtb_exposition")].toString();
  m_hiking_rating = json_object[QLatin1String("hiking_rating")].toString();
  m_ice_rating = json_object[QLatin1String("ice_rating")].toString();
  m_labande_global_rating = json_object[QLatin1String("labande_global_rating")].toString();
  m_labande_ski_rating = json_object[QLatin1String("labande_ski_rating")].toString();
  m_lift_access = json_object[QLatin1String("lift_access")].toBool();
  m_main_waypoint_id = json_object[QLatin1String("main_waypoint_id")].toInt();
  m_mixed_rating = json_object[QLatin1String("mixed_rating")].toString();
  m_mtb_down_rating = json_object[QLatin1String("mtb_down_rating")].toString();
  m_mtb_height_diff_portages = json_object[QLatin1String("mtb_height_diff_portages")].toInt();
  m_mtb_length_asphalt = json_object[QLatin1String("mtb_length_asphalt")].toInt();
  m_mtb_length_trail = json_object[QLatin1String("mtb_length_trail")].toInt();
  m_mtb_up_rating = json_object[QLatin1String("mtb_up_rating")].toString();
  m_orientations = orm_type_conversion::load_string_list(json_object[QLatin1String("orientations")]);
  m_risk_rating = json_object[QLatin1String("risk_rating")].toString();
  m_rock_free_rating = json_object[QLatin1String("rock_free_rating")].toString();
  m_rock_required_rating = json_object[QLatin1String("rock_required_rating")].toString();
  m_rock_types = orm_type_conversion::load_string_list(json_object[QLatin1String("rock_types")]);
  m_route_length = json_object[QLatin1String("route_length")].toInt();
  m_route_types = orm_type_conversion::load_string_list(json_object[QLatin1String("route_types")]);
  m_ski_exposition = json_object[QLatin1String("ski_exposition")].toString();
  m_ski_rating = json_object[QLatin1String("ski_rating")].toString();
  m_slackline_height = json_object[QLatin1String("slackline_height")].toInt();
  m_slackline_type = json_object[QLatin1String("slackline_type")].toString();
  m_snowshoe_rating = json_object[QLatin1String("snowshoe_rating")].toString();
  m_via_ferrata_rating = json_object[QLatin1String("via_ferrata_rating")].toString();
}

C2cRoutes::C2cRoutes(const QVariantHash & variant_hash)
 : C2cRoutes()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_aid_rating = variant_hash[QLatin1String("aid_rating")].toString();
  m_climbing_outdoor_type = variant_hash[QLatin1String("climbing_outdoor_type")].toString();
  m_configuration = variant_hash[QLatin1String("configuration")].toStringList();
  m_difficulties_height = variant_hash[QLatin1String("difficulties_height")].toInt();
  m_durations = variant_hash[QLatin1String("durations")].toStringList();
  m_elevation_max = variant_hash[QLatin1String("elevation_max")].toInt();
  m_elevation_min = variant_hash[QLatin1String("elevation_min")].toInt();
  m_engagement_rating = variant_hash[QLatin1String("engagement_rating")].toString();
  m_equipment_rating = variant_hash[QLatin1String("equipment_rating")].toString();
  m_exposition_rock_rating = variant_hash[QLatin1String("exposition_rock_rating")].toString();
  m_glacier_gear = variant_hash[QLatin1String("glacier_gear")].toString();
  m_global_rating = variant_hash[QLatin1String("global_rating")].toString();
  m_height_diff_access = variant_hash[QLatin1String("height_diff_access")].toInt();
  m_height_diff_difficulties = variant_hash[QLatin1String("height_diff_difficulties")].toInt();
  m_height_diff_down = variant_hash[QLatin1String("height_diff_down")].toInt();
  m_height_diff_up = variant_hash[QLatin1String("height_diff_up")].toInt();
  m_hiking_mtb_exposition = variant_hash[QLatin1String("hiking_mtb_exposition")].toString();
  m_hiking_rating = variant_hash[QLatin1String("hiking_rating")].toString();
  m_ice_rating = variant_hash[QLatin1String("ice_rating")].toString();
  m_labande_global_rating = variant_hash[QLatin1String("labande_global_rating")].toString();
  m_labande_ski_rating = variant_hash[QLatin1String("labande_ski_rating")].toString();
  m_lift_access = variant_hash[QLatin1String("lift_access")].toBool();
  m_main_waypoint_id = variant_hash[QLatin1String("main_waypoint_id")].toInt();
  m_mixed_rating = variant_hash[QLatin1String("mixed_rating")].toString();
  m_mtb_down_rating = variant_hash[QLatin1String("mtb_down_rating")].toString();
  m_mtb_height_diff_portages = variant_hash[QLatin1String("mtb_height_diff_portages")].toInt();
  m_mtb_length_asphalt = variant_hash[QLatin1String("mtb_length_asphalt")].toInt();
  m_mtb_length_trail = variant_hash[QLatin1String("mtb_length_trail")].toInt();
  m_mtb_up_rating = variant_hash[QLatin1String("mtb_up_rating")].toString();
  m_orientations = variant_hash[QLatin1String("orientations")].toStringList();
  m_risk_rating = variant_hash[QLatin1String("risk_rating")].toString();
  m_rock_free_rating = variant_hash[QLatin1String("rock_free_rating")].toString();
  m_rock_required_rating = variant_hash[QLatin1String("rock_required_rating")].toString();
  m_rock_types = variant_hash[QLatin1String("rock_types")].toStringList();
  m_route_length = variant_hash[QLatin1String("route_length")].toInt();
  m_route_types = variant_hash[QLatin1String("route_types")].toStringList();
  m_ski_exposition = variant_hash[QLatin1String("ski_exposition")].toString();
  m_ski_rating = variant_hash[QLatin1String("ski_rating")].toString();
  m_slackline_height = variant_hash[QLatin1String("slackline_height")].toInt();
  m_slackline_type = variant_hash[QLatin1String("slackline_type")].toString();
  m_snowshoe_rating = variant_hash[QLatin1String("snowshoe_rating")].toString();
  m_via_ferrata_rating = variant_hash[QLatin1String("via_ferrata_rating")].toString();
}

C2cRoutes::C2cRoutes(const QVariantList & variants)
 : C2cRoutes()
{
  m_document_id = variants[0].toInt();
  m_activities = variants[1].toStringList();
  m_aid_rating = variants[2].toString();
  m_climbing_outdoor_type = variants[3].toString();
  m_configuration = variants[4].toStringList();
  m_difficulties_height = variants[5].toInt();
  m_durations = variants[6].toStringList();
  m_elevation_max = variants[7].toInt();
  m_elevation_min = variants[8].toInt();
  m_engagement_rating = variants[9].toString();
  m_equipment_rating = variants[10].toString();
  m_exposition_rock_rating = variants[11].toString();
  m_glacier_gear = variants[12].toString();
  m_global_rating = variants[13].toString();
  m_height_diff_access = variants[14].toInt();
  m_height_diff_difficulties = variants[15].toInt();
  m_height_diff_down = variants[16].toInt();
  m_height_diff_up = variants[17].toInt();
  m_hiking_mtb_exposition = variants[18].toString();
  m_hiking_rating = variants[19].toString();
  m_ice_rating = variants[20].toString();
  m_labande_global_rating = variants[21].toString();
  m_labande_ski_rating = variants[22].toString();
  m_lift_access = variants[23].toBool();
  m_main_waypoint_id = variants[24].toInt();
  m_mixed_rating = variants[25].toString();
  m_mtb_down_rating = variants[26].toString();
  m_mtb_height_diff_portages = variants[27].toInt();
  m_mtb_length_asphalt = variants[28].toInt();
  m_mtb_length_trail = variants[29].toInt();
  m_mtb_up_rating = variants[30].toString();
  m_orientations = variants[31].toStringList();
  m_risk_rating = variants[32].toString();
  m_rock_free_rating = variants[33].toString();
  m_rock_required_rating = variants[34].toString();
  m_rock_types = variants[35].toStringList();
  m_route_length = variants[36].toInt();
  m_route_types = variants[37].toStringList();
  m_ski_exposition = variants[38].toString();
  m_ski_rating = variants[39].toString();
  m_slackline_height = variants[40].toInt();
  m_slackline_type = variants[41].toString();
  m_snowshoe_rating = variants[42].toString();
  m_via_ferrata_rating = variants[43].toString();
}

C2cRoutes::C2cRoutes(const QSqlRecord & record)
 : QoRow<C2cRoutesSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_activities = record.value(1).toStringList();
  m_aid_rating = record.value(2).toString();
  m_climbing_outdoor_type = record.value(3).toString();
  m_configuration = record.value(4).toStringList();
  m_difficulties_height = record.value(5).toInt();
  m_durations = record.value(6).toStringList();
  m_elevation_max = record.value(7).toInt();
  m_elevation_min = record.value(8).toInt();
  m_engagement_rating = record.value(9).toString();
  m_equipment_rating = record.value(10).toString();
  m_exposition_rock_rating = record.value(11).toString();
  m_glacier_gear = record.value(12).toString();
  m_global_rating = record.value(13).toString();
  m_height_diff_access = record.value(14).toInt();
  m_height_diff_difficulties = record.value(15).toInt();
  m_height_diff_down = record.value(16).toInt();
  m_height_diff_up = record.value(17).toInt();
  m_hiking_mtb_exposition = record.value(18).toString();
  m_hiking_rating = record.value(19).toString();
  m_ice_rating = record.value(20).toString();
  m_labande_global_rating = record.value(21).toString();
  m_labande_ski_rating = record.value(22).toString();
  m_lift_access = record.value(23).toBool();
  m_main_waypoint_id = record.value(24).toInt();
  m_mixed_rating = record.value(25).toString();
  m_mtb_down_rating = record.value(26).toString();
  m_mtb_height_diff_portages = record.value(27).toInt();
  m_mtb_length_asphalt = record.value(28).toInt();
  m_mtb_length_trail = record.value(29).toInt();
  m_mtb_up_rating = record.value(30).toString();
  m_orientations = record.value(31).toStringList();
  m_risk_rating = record.value(32).toString();
  m_rock_free_rating = record.value(33).toString();
  m_rock_required_rating = record.value(34).toString();
  m_rock_types = record.value(35).toStringList();
  m_route_length = record.value(36).toInt();
  m_route_types = record.value(37).toStringList();
  m_ski_exposition = record.value(38).toString();
  m_ski_rating = record.value(39).toString();
  m_slackline_height = record.value(40).toInt();
  m_slackline_type = record.value(41).toString();
  m_snowshoe_rating = record.value(42).toString();
  m_via_ferrata_rating = record.value(43).toString();
}

C2cRoutes::C2cRoutes(const QSqlQuery & query, int offset)
 : QoRow<C2cRoutesSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_activities = query.value(offset++).toStringList();
  m_aid_rating = query.value(offset++).toString();
  m_climbing_outdoor_type = query.value(offset++).toString();
  m_configuration = query.value(offset++).toStringList();
  m_difficulties_height = query.value(offset++).toInt();
  m_durations = query.value(offset++).toStringList();
  m_elevation_max = query.value(offset++).toInt();
  m_elevation_min = query.value(offset++).toInt();
  m_engagement_rating = query.value(offset++).toString();
  m_equipment_rating = query.value(offset++).toString();
  m_exposition_rock_rating = query.value(offset++).toString();
  m_glacier_gear = query.value(offset++).toString();
  m_global_rating = query.value(offset++).toString();
  m_height_diff_access = query.value(offset++).toInt();
  m_height_diff_difficulties = query.value(offset++).toInt();
  m_height_diff_down = query.value(offset++).toInt();
  m_height_diff_up = query.value(offset++).toInt();
  m_hiking_mtb_exposition = query.value(offset++).toString();
  m_hiking_rating = query.value(offset++).toString();
  m_ice_rating = query.value(offset++).toString();
  m_labande_global_rating = query.value(offset++).toString();
  m_labande_ski_rating = query.value(offset++).toString();
  m_lift_access = query.value(offset++).toBool();
  m_main_waypoint_id = query.value(offset++).toInt();
  m_mixed_rating = query.value(offset++).toString();
  m_mtb_down_rating = query.value(offset++).toString();
  m_mtb_height_diff_portages = query.value(offset++).toInt();
  m_mtb_length_asphalt = query.value(offset++).toInt();
  m_mtb_length_trail = query.value(offset++).toInt();
  m_mtb_up_rating = query.value(offset++).toString();
  m_orientations = query.value(offset++).toStringList();
  m_risk_rating = query.value(offset++).toString();
  m_rock_free_rating = query.value(offset++).toString();
  m_rock_required_rating = query.value(offset++).toString();
  m_rock_types = query.value(offset++).toStringList();
  m_route_length = query.value(offset++).toInt();
  m_route_types = query.value(offset++).toStringList();
  m_ski_exposition = query.value(offset++).toString();
  m_ski_rating = query.value(offset++).toString();
  m_slackline_height = query.value(offset++).toInt();
  m_slackline_type = query.value(offset++).toString();
  m_snowshoe_rating = query.value(offset++).toString();
  m_via_ferrata_rating = query.value(offset).toString();
}

C2cRoutes::~C2cRoutes()
{
// qATInfo() << "--- Delete" << "C2cRoutes" << *this;
}

// bit array ?
C2cRoutes &
C2cRoutes::operator=(const C2cRoutes & other)
{
  if (this != &other) {
    QoRow<C2cRoutesSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_activities = other.m_activities;
    m_aid_rating = other.m_aid_rating;
    m_climbing_outdoor_type = other.m_climbing_outdoor_type;
    m_configuration = other.m_configuration;
    m_difficulties_height = other.m_difficulties_height;
    m_durations = other.m_durations;
    m_elevation_max = other.m_elevation_max;
    m_elevation_min = other.m_elevation_min;
    m_engagement_rating = other.m_engagement_rating;
    m_equipment_rating = other.m_equipment_rating;
    m_exposition_rock_rating = other.m_exposition_rock_rating;
    m_glacier_gear = other.m_glacier_gear;
    m_global_rating = other.m_global_rating;
    m_height_diff_access = other.m_height_diff_access;
    m_height_diff_difficulties = other.m_height_diff_difficulties;
    m_height_diff_down = other.m_height_diff_down;
    m_height_diff_up = other.m_height_diff_up;
    m_hiking_mtb_exposition = other.m_hiking_mtb_exposition;
    m_hiking_rating = other.m_hiking_rating;
    m_ice_rating = other.m_ice_rating;
    m_labande_global_rating = other.m_labande_global_rating;
    m_labande_ski_rating = other.m_labande_ski_rating;
    m_lift_access = other.m_lift_access;
    m_main_waypoint_id = other.m_main_waypoint_id;
    m_mixed_rating = other.m_mixed_rating;
    m_mtb_down_rating = other.m_mtb_down_rating;
    m_mtb_height_diff_portages = other.m_mtb_height_diff_portages;
    m_mtb_length_asphalt = other.m_mtb_length_asphalt;
    m_mtb_length_trail = other.m_mtb_length_trail;
    m_mtb_up_rating = other.m_mtb_up_rating;
    m_orientations = other.m_orientations;
    m_risk_rating = other.m_risk_rating;
    m_rock_free_rating = other.m_rock_free_rating;
    m_rock_required_rating = other.m_rock_required_rating;
    m_rock_types = other.m_rock_types;
    m_route_length = other.m_route_length;
    m_route_types = other.m_route_types;
    m_ski_exposition = other.m_ski_exposition;
    m_ski_rating = other.m_ski_rating;
    m_slackline_height = other.m_slackline_height;
    m_slackline_type = other.m_slackline_type;
    m_snowshoe_rating = other.m_snowshoe_rating;
    m_via_ferrata_rating = other.m_via_ferrata_rating;
  }

  return *this;
}

// bit array ?
bool
C2cRoutes::operator==(const C2cRoutes & other) const
{
  if (not QoRow<C2cRoutesSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_aid_rating != other.m_aid_rating)
    return false;
  if (m_climbing_outdoor_type != other.m_climbing_outdoor_type)
    return false;
  if (m_configuration != other.m_configuration)
    return false;
  if (m_difficulties_height != other.m_difficulties_height)
    return false;
  if (m_durations != other.m_durations)
    return false;
  if (m_elevation_max != other.m_elevation_max)
    return false;
  if (m_elevation_min != other.m_elevation_min)
    return false;
  if (m_engagement_rating != other.m_engagement_rating)
    return false;
  if (m_equipment_rating != other.m_equipment_rating)
    return false;
  if (m_exposition_rock_rating != other.m_exposition_rock_rating)
    return false;
  if (m_glacier_gear != other.m_glacier_gear)
    return false;
  if (m_global_rating != other.m_global_rating)
    return false;
  if (m_height_diff_access != other.m_height_diff_access)
    return false;
  if (m_height_diff_difficulties != other.m_height_diff_difficulties)
    return false;
  if (m_height_diff_down != other.m_height_diff_down)
    return false;
  if (m_height_diff_up != other.m_height_diff_up)
    return false;
  if (m_hiking_mtb_exposition != other.m_hiking_mtb_exposition)
    return false;
  if (m_hiking_rating != other.m_hiking_rating)
    return false;
  if (m_ice_rating != other.m_ice_rating)
    return false;
  if (m_labande_global_rating != other.m_labande_global_rating)
    return false;
  if (m_labande_ski_rating != other.m_labande_ski_rating)
    return false;
  if (m_lift_access != other.m_lift_access)
    return false;
  if (m_main_waypoint_id != other.m_main_waypoint_id)
    return false;
  if (m_mixed_rating != other.m_mixed_rating)
    return false;
  if (m_mtb_down_rating != other.m_mtb_down_rating)
    return false;
  if (m_mtb_height_diff_portages != other.m_mtb_height_diff_portages)
    return false;
  if (m_mtb_length_asphalt != other.m_mtb_length_asphalt)
    return false;
  if (m_mtb_length_trail != other.m_mtb_length_trail)
    return false;
  if (m_mtb_up_rating != other.m_mtb_up_rating)
    return false;
  if (m_orientations != other.m_orientations)
    return false;
  if (m_risk_rating != other.m_risk_rating)
    return false;
  if (m_rock_free_rating != other.m_rock_free_rating)
    return false;
  if (m_rock_required_rating != other.m_rock_required_rating)
    return false;
  if (m_rock_types != other.m_rock_types)
    return false;
  if (m_route_length != other.m_route_length)
    return false;
  if (m_route_types != other.m_route_types)
    return false;
  if (m_ski_exposition != other.m_ski_exposition)
    return false;
  if (m_ski_rating != other.m_ski_rating)
    return false;
  if (m_slackline_height != other.m_slackline_height)
    return false;
  if (m_slackline_type != other.m_slackline_type)
    return false;
  if (m_snowshoe_rating != other.m_snowshoe_rating)
    return false;
  if (m_via_ferrata_rating != other.m_via_ferrata_rating)
    return false;

  return true;
}

void
C2cRoutes::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_aid_rating(const QString & value)
{
  if (m_aid_rating != value) {
    m_aid_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AID_RATING);

    emit aid_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_climbing_outdoor_type(const QString & value)
{
  if (m_climbing_outdoor_type != value) {
    m_climbing_outdoor_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_OUTDOOR_TYPE);

    emit climbing_outdoor_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_configuration(const QStringList & value)
{
  if (m_configuration != value) {
    m_configuration = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CONFIGURATION);

    emit configurationChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_difficulties_height(int value)
{
  if (m_difficulties_height != value) {
    m_difficulties_height = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DIFFICULTIES_HEIGHT);

    emit difficulties_heightChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_durations(const QStringList & value)
{
  if (m_durations != value) {
    m_durations = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DURATIONS);

    emit durationsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_elevation_max(int value)
{
  if (m_elevation_max != value) {
    m_elevation_max = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_MAX);

    emit elevation_maxChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_elevation_min(int value)
{
  if (m_elevation_min != value) {
    m_elevation_min = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_MIN);

    emit elevation_minChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_engagement_rating(const QString & value)
{
  if (m_engagement_rating != value) {
    m_engagement_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ENGAGEMENT_RATING);

    emit engagement_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_equipment_rating(const QString & value)
{
  if (m_equipment_rating != value) {
    m_equipment_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EQUIPMENT_RATING);

    emit equipment_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_exposition_rock_rating(const QString & value)
{
  if (m_exposition_rock_rating != value) {
    m_exposition_rock_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EXPOSITION_ROCK_RATING);

    emit exposition_rock_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_glacier_gear(const QString & value)
{
  if (m_glacier_gear != value) {
    m_glacier_gear = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GLACIER_GEAR);

    emit glacier_gearChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_global_rating(const QString & value)
{
  if (m_global_rating != value) {
    m_global_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GLOBAL_RATING);

    emit global_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_height_diff_access(int value)
{
  if (m_height_diff_access != value) {
    m_height_diff_access = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_DIFF_ACCESS);

    emit height_diff_accessChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_height_diff_difficulties(int value)
{
  if (m_height_diff_difficulties != value) {
    m_height_diff_difficulties = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_DIFF_DIFFICULTIES);

    emit height_diff_difficultiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_height_diff_down(int value)
{
  if (m_height_diff_down != value) {
    m_height_diff_down = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_DIFF_DOWN);

    emit height_diff_downChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_height_diff_up(int value)
{
  if (m_height_diff_up != value) {
    m_height_diff_up = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_DIFF_UP);

    emit height_diff_upChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_hiking_mtb_exposition(const QString & value)
{
  if (m_hiking_mtb_exposition != value) {
    m_hiking_mtb_exposition = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HIKING_MTB_EXPOSITION);

    emit hiking_mtb_expositionChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_hiking_rating(const QString & value)
{
  if (m_hiking_rating != value) {
    m_hiking_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HIKING_RATING);

    emit hiking_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_ice_rating(const QString & value)
{
  if (m_ice_rating != value) {
    m_ice_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ICE_RATING);

    emit ice_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_labande_global_rating(const QString & value)
{
  if (m_labande_global_rating != value) {
    m_labande_global_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LABANDE_GLOBAL_RATING);

    emit labande_global_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_labande_ski_rating(const QString & value)
{
  if (m_labande_ski_rating != value) {
    m_labande_ski_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LABANDE_SKI_RATING);

    emit labande_ski_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_lift_access(bool value)
{
  if (m_lift_access != value) {
    m_lift_access = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LIFT_ACCESS);

    emit lift_accessChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_main_waypoint_id(int value)
{
  if (m_main_waypoint_id != value) {
    m_main_waypoint_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MAIN_WAYPOINT_ID);

    emit main_waypoint_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_mixed_rating(const QString & value)
{
  if (m_mixed_rating != value) {
    m_mixed_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MIXED_RATING);

    emit mixed_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_mtb_down_rating(const QString & value)
{
  if (m_mtb_down_rating != value) {
    m_mtb_down_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MTB_DOWN_RATING);

    emit mtb_down_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_mtb_height_diff_portages(int value)
{
  if (m_mtb_height_diff_portages != value) {
    m_mtb_height_diff_portages = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MTB_HEIGHT_DIFF_PORTAGES);

    emit mtb_height_diff_portagesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_mtb_length_asphalt(int value)
{
  if (m_mtb_length_asphalt != value) {
    m_mtb_length_asphalt = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MTB_LENGTH_ASPHALT);

    emit mtb_length_asphaltChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_mtb_length_trail(int value)
{
  if (m_mtb_length_trail != value) {
    m_mtb_length_trail = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MTB_LENGTH_TRAIL);

    emit mtb_length_trailChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_mtb_up_rating(const QString & value)
{
  if (m_mtb_up_rating != value) {
    m_mtb_up_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MTB_UP_RATING);

    emit mtb_up_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_orientations(const QStringList & value)
{
  if (m_orientations != value) {
    m_orientations = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ORIENTATIONS);

    emit orientationsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_risk_rating(const QString & value)
{
  if (m_risk_rating != value) {
    m_risk_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::RISK_RATING);

    emit risk_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_rock_free_rating(const QString & value)
{
  if (m_rock_free_rating != value) {
    m_rock_free_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROCK_FREE_RATING);

    emit rock_free_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_rock_required_rating(const QString & value)
{
  if (m_rock_required_rating != value) {
    m_rock_required_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROCK_REQUIRED_RATING);

    emit rock_required_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_rock_types(const QStringList & value)
{
  if (m_rock_types != value) {
    m_rock_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROCK_TYPES);

    emit rock_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_route_length(int value)
{
  if (m_route_length != value) {
    m_route_length = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROUTE_LENGTH);

    emit route_lengthChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_route_types(const QStringList & value)
{
  if (m_route_types != value) {
    m_route_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROUTE_TYPES);

    emit route_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_ski_exposition(const QString & value)
{
  if (m_ski_exposition != value) {
    m_ski_exposition = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SKI_EXPOSITION);

    emit ski_expositionChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_ski_rating(const QString & value)
{
  if (m_ski_rating != value) {
    m_ski_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SKI_RATING);

    emit ski_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_slackline_height(int value)
{
  if (m_slackline_height != value) {
    m_slackline_height = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_HEIGHT);

    emit slackline_heightChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_slackline_type(const QString & value)
{
  if (m_slackline_type != value) {
    m_slackline_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_TYPE);

    emit slackline_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_snowshoe_rating(const QString & value)
{
  if (m_snowshoe_rating != value) {
    m_snowshoe_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SNOWSHOE_RATING);

    emit snowshoe_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutes::set_via_ferrata_rating(const QString & value)
{
  if (m_via_ferrata_rating != value) {
    m_via_ferrata_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VIA_FERRATA_RATING);

    emit via_ferrata_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cRoutes::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_aid_rating_modified())
      json_object.insert(QLatin1String("aid_rating"), QJsonValue(m_aid_rating));
    if (is_climbing_outdoor_type_modified())
      json_object.insert(QLatin1String("climbing_outdoor_type"), QJsonValue(m_climbing_outdoor_type));
    if (is_configuration_modified())
      json_object.insert(QLatin1String("configuration"), orm_type_conversion::dump_string_list(m_configuration));
    if (is_difficulties_height_modified())
      json_object.insert(QLatin1String("difficulties_height"), QJsonValue(m_difficulties_height));
    if (is_durations_modified())
      json_object.insert(QLatin1String("durations"), orm_type_conversion::dump_string_list(m_durations));
    if (is_elevation_max_modified())
      json_object.insert(QLatin1String("elevation_max"), QJsonValue(m_elevation_max));
    if (is_elevation_min_modified())
      json_object.insert(QLatin1String("elevation_min"), QJsonValue(m_elevation_min));
    if (is_engagement_rating_modified())
      json_object.insert(QLatin1String("engagement_rating"), QJsonValue(m_engagement_rating));
    if (is_equipment_rating_modified())
      json_object.insert(QLatin1String("equipment_rating"), QJsonValue(m_equipment_rating));
    if (is_exposition_rock_rating_modified())
      json_object.insert(QLatin1String("exposition_rock_rating"), QJsonValue(m_exposition_rock_rating));
    if (is_glacier_gear_modified())
      json_object.insert(QLatin1String("glacier_gear"), QJsonValue(m_glacier_gear));
    if (is_global_rating_modified())
      json_object.insert(QLatin1String("global_rating"), QJsonValue(m_global_rating));
    if (is_height_diff_access_modified())
      json_object.insert(QLatin1String("height_diff_access"), QJsonValue(m_height_diff_access));
    if (is_height_diff_difficulties_modified())
      json_object.insert(QLatin1String("height_diff_difficulties"), QJsonValue(m_height_diff_difficulties));
    if (is_height_diff_down_modified())
      json_object.insert(QLatin1String("height_diff_down"), QJsonValue(m_height_diff_down));
    if (is_height_diff_up_modified())
      json_object.insert(QLatin1String("height_diff_up"), QJsonValue(m_height_diff_up));
    if (is_hiking_mtb_exposition_modified())
      json_object.insert(QLatin1String("hiking_mtb_exposition"), QJsonValue(m_hiking_mtb_exposition));
    if (is_hiking_rating_modified())
      json_object.insert(QLatin1String("hiking_rating"), QJsonValue(m_hiking_rating));
    if (is_ice_rating_modified())
      json_object.insert(QLatin1String("ice_rating"), QJsonValue(m_ice_rating));
    if (is_labande_global_rating_modified())
      json_object.insert(QLatin1String("labande_global_rating"), QJsonValue(m_labande_global_rating));
    if (is_labande_ski_rating_modified())
      json_object.insert(QLatin1String("labande_ski_rating"), QJsonValue(m_labande_ski_rating));
    if (is_lift_access_modified())
      json_object.insert(QLatin1String("lift_access"), QJsonValue(m_lift_access));
    if (is_main_waypoint_id_modified())
      json_object.insert(QLatin1String("main_waypoint_id"), QJsonValue(m_main_waypoint_id));
    if (is_mixed_rating_modified())
      json_object.insert(QLatin1String("mixed_rating"), QJsonValue(m_mixed_rating));
    if (is_mtb_down_rating_modified())
      json_object.insert(QLatin1String("mtb_down_rating"), QJsonValue(m_mtb_down_rating));
    if (is_mtb_height_diff_portages_modified())
      json_object.insert(QLatin1String("mtb_height_diff_portages"), QJsonValue(m_mtb_height_diff_portages));
    if (is_mtb_length_asphalt_modified())
      json_object.insert(QLatin1String("mtb_length_asphalt"), QJsonValue(m_mtb_length_asphalt));
    if (is_mtb_length_trail_modified())
      json_object.insert(QLatin1String("mtb_length_trail"), QJsonValue(m_mtb_length_trail));
    if (is_mtb_up_rating_modified())
      json_object.insert(QLatin1String("mtb_up_rating"), QJsonValue(m_mtb_up_rating));
    if (is_orientations_modified())
      json_object.insert(QLatin1String("orientations"), orm_type_conversion::dump_string_list(m_orientations));
    if (is_risk_rating_modified())
      json_object.insert(QLatin1String("risk_rating"), QJsonValue(m_risk_rating));
    if (is_rock_free_rating_modified())
      json_object.insert(QLatin1String("rock_free_rating"), QJsonValue(m_rock_free_rating));
    if (is_rock_required_rating_modified())
      json_object.insert(QLatin1String("rock_required_rating"), QJsonValue(m_rock_required_rating));
    if (is_rock_types_modified())
      json_object.insert(QLatin1String("rock_types"), orm_type_conversion::dump_string_list(m_rock_types));
    if (is_route_length_modified())
      json_object.insert(QLatin1String("route_length"), QJsonValue(m_route_length));
    if (is_route_types_modified())
      json_object.insert(QLatin1String("route_types"), orm_type_conversion::dump_string_list(m_route_types));
    if (is_ski_exposition_modified())
      json_object.insert(QLatin1String("ski_exposition"), QJsonValue(m_ski_exposition));
    if (is_ski_rating_modified())
      json_object.insert(QLatin1String("ski_rating"), QJsonValue(m_ski_rating));
    if (is_slackline_height_modified())
      json_object.insert(QLatin1String("slackline_height"), QJsonValue(m_slackline_height));
    if (is_slackline_type_modified())
      json_object.insert(QLatin1String("slackline_type"), QJsonValue(m_slackline_type));
    if (is_snowshoe_rating_modified())
      json_object.insert(QLatin1String("snowshoe_rating"), QJsonValue(m_snowshoe_rating));
    if (is_via_ferrata_rating_modified())
      json_object.insert(QLatin1String("via_ferrata_rating"), QJsonValue(m_via_ferrata_rating));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("aid_rating"), QJsonValue(m_aid_rating));
    json_object.insert(QLatin1String("climbing_outdoor_type"), QJsonValue(m_climbing_outdoor_type));
    json_object.insert(QLatin1String("configuration"), orm_type_conversion::dump_string_list(m_configuration));
    json_object.insert(QLatin1String("difficulties_height"), QJsonValue(m_difficulties_height));
    json_object.insert(QLatin1String("durations"), orm_type_conversion::dump_string_list(m_durations));
    json_object.insert(QLatin1String("elevation_max"), QJsonValue(m_elevation_max));
    json_object.insert(QLatin1String("elevation_min"), QJsonValue(m_elevation_min));
    json_object.insert(QLatin1String("engagement_rating"), QJsonValue(m_engagement_rating));
    json_object.insert(QLatin1String("equipment_rating"), QJsonValue(m_equipment_rating));
    json_object.insert(QLatin1String("exposition_rock_rating"), QJsonValue(m_exposition_rock_rating));
    json_object.insert(QLatin1String("glacier_gear"), QJsonValue(m_glacier_gear));
    json_object.insert(QLatin1String("global_rating"), QJsonValue(m_global_rating));
    json_object.insert(QLatin1String("height_diff_access"), QJsonValue(m_height_diff_access));
    json_object.insert(QLatin1String("height_diff_difficulties"), QJsonValue(m_height_diff_difficulties));
    json_object.insert(QLatin1String("height_diff_down"), QJsonValue(m_height_diff_down));
    json_object.insert(QLatin1String("height_diff_up"), QJsonValue(m_height_diff_up));
    json_object.insert(QLatin1String("hiking_mtb_exposition"), QJsonValue(m_hiking_mtb_exposition));
    json_object.insert(QLatin1String("hiking_rating"), QJsonValue(m_hiking_rating));
    json_object.insert(QLatin1String("ice_rating"), QJsonValue(m_ice_rating));
    json_object.insert(QLatin1String("labande_global_rating"), QJsonValue(m_labande_global_rating));
    json_object.insert(QLatin1String("labande_ski_rating"), QJsonValue(m_labande_ski_rating));
    json_object.insert(QLatin1String("lift_access"), QJsonValue(m_lift_access));
    json_object.insert(QLatin1String("main_waypoint_id"), QJsonValue(m_main_waypoint_id));
    json_object.insert(QLatin1String("mixed_rating"), QJsonValue(m_mixed_rating));
    json_object.insert(QLatin1String("mtb_down_rating"), QJsonValue(m_mtb_down_rating));
    json_object.insert(QLatin1String("mtb_height_diff_portages"), QJsonValue(m_mtb_height_diff_portages));
    json_object.insert(QLatin1String("mtb_length_asphalt"), QJsonValue(m_mtb_length_asphalt));
    json_object.insert(QLatin1String("mtb_length_trail"), QJsonValue(m_mtb_length_trail));
    json_object.insert(QLatin1String("mtb_up_rating"), QJsonValue(m_mtb_up_rating));
    json_object.insert(QLatin1String("orientations"), orm_type_conversion::dump_string_list(m_orientations));
    json_object.insert(QLatin1String("risk_rating"), QJsonValue(m_risk_rating));
    json_object.insert(QLatin1String("rock_free_rating"), QJsonValue(m_rock_free_rating));
    json_object.insert(QLatin1String("rock_required_rating"), QJsonValue(m_rock_required_rating));
    json_object.insert(QLatin1String("rock_types"), orm_type_conversion::dump_string_list(m_rock_types));
    json_object.insert(QLatin1String("route_length"), QJsonValue(m_route_length));
    json_object.insert(QLatin1String("route_types"), orm_type_conversion::dump_string_list(m_route_types));
    json_object.insert(QLatin1String("ski_exposition"), QJsonValue(m_ski_exposition));
    json_object.insert(QLatin1String("ski_rating"), QJsonValue(m_ski_rating));
    json_object.insert(QLatin1String("slackline_height"), QJsonValue(m_slackline_height));
    json_object.insert(QLatin1String("slackline_type"), QJsonValue(m_slackline_type));
    json_object.insert(QLatin1String("snowshoe_rating"), QJsonValue(m_snowshoe_rating));
    json_object.insert(QLatin1String("via_ferrata_rating"), QJsonValue(m_via_ferrata_rating));
  }

  return json_object;
}

QVariantHash
C2cRoutes::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_aid_rating_modified())
      variant_hash[QLatin1String("aid_rating")] = m_aid_rating;
    if (is_climbing_outdoor_type_modified())
      variant_hash[QLatin1String("climbing_outdoor_type")] = m_climbing_outdoor_type;
    if (is_configuration_modified())
      variant_hash[QLatin1String("configuration")] = m_configuration;
    if (is_difficulties_height_modified())
      variant_hash[QLatin1String("difficulties_height")] = m_difficulties_height;
    if (is_durations_modified())
      variant_hash[QLatin1String("durations")] = m_durations;
    if (is_elevation_max_modified())
      variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    if (is_elevation_min_modified())
      variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    if (is_engagement_rating_modified())
      variant_hash[QLatin1String("engagement_rating")] = m_engagement_rating;
    if (is_equipment_rating_modified())
      variant_hash[QLatin1String("equipment_rating")] = m_equipment_rating;
    if (is_exposition_rock_rating_modified())
      variant_hash[QLatin1String("exposition_rock_rating")] = m_exposition_rock_rating;
    if (is_glacier_gear_modified())
      variant_hash[QLatin1String("glacier_gear")] = m_glacier_gear;
    if (is_global_rating_modified())
      variant_hash[QLatin1String("global_rating")] = m_global_rating;
    if (is_height_diff_access_modified())
      variant_hash[QLatin1String("height_diff_access")] = m_height_diff_access;
    if (is_height_diff_difficulties_modified())
      variant_hash[QLatin1String("height_diff_difficulties")] = m_height_diff_difficulties;
    if (is_height_diff_down_modified())
      variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    if (is_height_diff_up_modified())
      variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    if (is_hiking_mtb_exposition_modified())
      variant_hash[QLatin1String("hiking_mtb_exposition")] = m_hiking_mtb_exposition;
    if (is_hiking_rating_modified())
      variant_hash[QLatin1String("hiking_rating")] = m_hiking_rating;
    if (is_ice_rating_modified())
      variant_hash[QLatin1String("ice_rating")] = m_ice_rating;
    if (is_labande_global_rating_modified())
      variant_hash[QLatin1String("labande_global_rating")] = m_labande_global_rating;
    if (is_labande_ski_rating_modified())
      variant_hash[QLatin1String("labande_ski_rating")] = m_labande_ski_rating;
    if (is_lift_access_modified())
      variant_hash[QLatin1String("lift_access")] = m_lift_access;
    if (is_main_waypoint_id_modified())
      variant_hash[QLatin1String("main_waypoint_id")] = m_main_waypoint_id;
    if (is_mixed_rating_modified())
      variant_hash[QLatin1String("mixed_rating")] = m_mixed_rating;
    if (is_mtb_down_rating_modified())
      variant_hash[QLatin1String("mtb_down_rating")] = m_mtb_down_rating;
    if (is_mtb_height_diff_portages_modified())
      variant_hash[QLatin1String("mtb_height_diff_portages")] = m_mtb_height_diff_portages;
    if (is_mtb_length_asphalt_modified())
      variant_hash[QLatin1String("mtb_length_asphalt")] = m_mtb_length_asphalt;
    if (is_mtb_length_trail_modified())
      variant_hash[QLatin1String("mtb_length_trail")] = m_mtb_length_trail;
    if (is_mtb_up_rating_modified())
      variant_hash[QLatin1String("mtb_up_rating")] = m_mtb_up_rating;
    if (is_orientations_modified())
      variant_hash[QLatin1String("orientations")] = m_orientations;
    if (is_risk_rating_modified())
      variant_hash[QLatin1String("risk_rating")] = m_risk_rating;
    if (is_rock_free_rating_modified())
      variant_hash[QLatin1String("rock_free_rating")] = m_rock_free_rating;
    if (is_rock_required_rating_modified())
      variant_hash[QLatin1String("rock_required_rating")] = m_rock_required_rating;
    if (is_rock_types_modified())
      variant_hash[QLatin1String("rock_types")] = m_rock_types;
    if (is_route_length_modified())
      variant_hash[QLatin1String("route_length")] = m_route_length;
    if (is_route_types_modified())
      variant_hash[QLatin1String("route_types")] = m_route_types;
    if (is_ski_exposition_modified())
      variant_hash[QLatin1String("ski_exposition")] = m_ski_exposition;
    if (is_ski_rating_modified())
      variant_hash[QLatin1String("ski_rating")] = m_ski_rating;
    if (is_slackline_height_modified())
      variant_hash[QLatin1String("slackline_height")] = m_slackline_height;
    if (is_slackline_type_modified())
      variant_hash[QLatin1String("slackline_type")] = m_slackline_type;
    if (is_snowshoe_rating_modified())
      variant_hash[QLatin1String("snowshoe_rating")] = m_snowshoe_rating;
    if (is_via_ferrata_rating_modified())
      variant_hash[QLatin1String("via_ferrata_rating")] = m_via_ferrata_rating;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("aid_rating")] = m_aid_rating;
    variant_hash[QLatin1String("climbing_outdoor_type")] = m_climbing_outdoor_type;
    variant_hash[QLatin1String("configuration")] = m_configuration;
    variant_hash[QLatin1String("difficulties_height")] = m_difficulties_height;
    variant_hash[QLatin1String("durations")] = m_durations;
    variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    variant_hash[QLatin1String("engagement_rating")] = m_engagement_rating;
    variant_hash[QLatin1String("equipment_rating")] = m_equipment_rating;
    variant_hash[QLatin1String("exposition_rock_rating")] = m_exposition_rock_rating;
    variant_hash[QLatin1String("glacier_gear")] = m_glacier_gear;
    variant_hash[QLatin1String("global_rating")] = m_global_rating;
    variant_hash[QLatin1String("height_diff_access")] = m_height_diff_access;
    variant_hash[QLatin1String("height_diff_difficulties")] = m_height_diff_difficulties;
    variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    variant_hash[QLatin1String("hiking_mtb_exposition")] = m_hiking_mtb_exposition;
    variant_hash[QLatin1String("hiking_rating")] = m_hiking_rating;
    variant_hash[QLatin1String("ice_rating")] = m_ice_rating;
    variant_hash[QLatin1String("labande_global_rating")] = m_labande_global_rating;
    variant_hash[QLatin1String("labande_ski_rating")] = m_labande_ski_rating;
    variant_hash[QLatin1String("lift_access")] = m_lift_access;
    variant_hash[QLatin1String("main_waypoint_id")] = m_main_waypoint_id;
    variant_hash[QLatin1String("mixed_rating")] = m_mixed_rating;
    variant_hash[QLatin1String("mtb_down_rating")] = m_mtb_down_rating;
    variant_hash[QLatin1String("mtb_height_diff_portages")] = m_mtb_height_diff_portages;
    variant_hash[QLatin1String("mtb_length_asphalt")] = m_mtb_length_asphalt;
    variant_hash[QLatin1String("mtb_length_trail")] = m_mtb_length_trail;
    variant_hash[QLatin1String("mtb_up_rating")] = m_mtb_up_rating;
    variant_hash[QLatin1String("orientations")] = m_orientations;
    variant_hash[QLatin1String("risk_rating")] = m_risk_rating;
    variant_hash[QLatin1String("rock_free_rating")] = m_rock_free_rating;
    variant_hash[QLatin1String("rock_required_rating")] = m_rock_required_rating;
    variant_hash[QLatin1String("rock_types")] = m_rock_types;
    variant_hash[QLatin1String("route_length")] = m_route_length;
    variant_hash[QLatin1String("route_types")] = m_route_types;
    variant_hash[QLatin1String("ski_exposition")] = m_ski_exposition;
    variant_hash[QLatin1String("ski_rating")] = m_ski_rating;
    variant_hash[QLatin1String("slackline_height")] = m_slackline_height;
    variant_hash[QLatin1String("slackline_type")] = m_slackline_type;
    variant_hash[QLatin1String("snowshoe_rating")] = m_snowshoe_rating;
    variant_hash[QLatin1String("via_ferrata_rating")] = m_via_ferrata_rating;
  }

  return variant_hash;
}

QVariantList
C2cRoutes::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_activities;
  variants << m_aid_rating;
  variants << m_climbing_outdoor_type;
  variants << m_configuration;
  variants << m_difficulties_height;
  variants << m_durations;
  variants << m_elevation_max;
  variants << m_elevation_min;
  variants << m_engagement_rating;
  variants << m_equipment_rating;
  variants << m_exposition_rock_rating;
  variants << m_glacier_gear;
  variants << m_global_rating;
  variants << m_height_diff_access;
  variants << m_height_diff_difficulties;
  variants << m_height_diff_down;
  variants << m_height_diff_up;
  variants << m_hiking_mtb_exposition;
  variants << m_hiking_rating;
  variants << m_ice_rating;
  variants << m_labande_global_rating;
  variants << m_labande_ski_rating;
  variants << m_lift_access;
  variants << m_main_waypoint_id;
  variants << m_mixed_rating;
  variants << m_mtb_down_rating;
  variants << m_mtb_height_diff_portages;
  variants << m_mtb_length_asphalt;
  variants << m_mtb_length_trail;
  variants << m_mtb_up_rating;
  variants << m_orientations;
  variants << m_risk_rating;
  variants << m_rock_free_rating;
  variants << m_rock_required_rating;
  variants << m_rock_types;
  variants << m_route_length;
  variants << m_route_types;
  variants << m_ski_exposition;
  variants << m_ski_rating;
  variants << m_slackline_height;
  variants << m_slackline_type;
  variants << m_snowshoe_rating;
  variants << m_via_ferrata_rating;

  return variants;
}

QVariantHash
C2cRoutes::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_aid_rating_modified())
      variant_hash[QLatin1String("aid_rating")] = m_aid_rating;
    if (is_climbing_outdoor_type_modified())
      variant_hash[QLatin1String("climbing_outdoor_type")] = m_climbing_outdoor_type;
    if (is_configuration_modified())
      variant_hash[QLatin1String("configuration")] = m_configuration;
    if (is_difficulties_height_modified())
      variant_hash[QLatin1String("difficulties_height")] = m_difficulties_height;
    if (is_durations_modified())
      variant_hash[QLatin1String("durations")] = m_durations;
    if (is_elevation_max_modified())
      variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    if (is_elevation_min_modified())
      variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    if (is_engagement_rating_modified())
      variant_hash[QLatin1String("engagement_rating")] = m_engagement_rating;
    if (is_equipment_rating_modified())
      variant_hash[QLatin1String("equipment_rating")] = m_equipment_rating;
    if (is_exposition_rock_rating_modified())
      variant_hash[QLatin1String("exposition_rock_rating")] = m_exposition_rock_rating;
    if (is_glacier_gear_modified())
      variant_hash[QLatin1String("glacier_gear")] = m_glacier_gear;
    if (is_global_rating_modified())
      variant_hash[QLatin1String("global_rating")] = m_global_rating;
    if (is_height_diff_access_modified())
      variant_hash[QLatin1String("height_diff_access")] = m_height_diff_access;
    if (is_height_diff_difficulties_modified())
      variant_hash[QLatin1String("height_diff_difficulties")] = m_height_diff_difficulties;
    if (is_height_diff_down_modified())
      variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    if (is_height_diff_up_modified())
      variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    if (is_hiking_mtb_exposition_modified())
      variant_hash[QLatin1String("hiking_mtb_exposition")] = m_hiking_mtb_exposition;
    if (is_hiking_rating_modified())
      variant_hash[QLatin1String("hiking_rating")] = m_hiking_rating;
    if (is_ice_rating_modified())
      variant_hash[QLatin1String("ice_rating")] = m_ice_rating;
    if (is_labande_global_rating_modified())
      variant_hash[QLatin1String("labande_global_rating")] = m_labande_global_rating;
    if (is_labande_ski_rating_modified())
      variant_hash[QLatin1String("labande_ski_rating")] = m_labande_ski_rating;
    if (is_lift_access_modified())
      variant_hash[QLatin1String("lift_access")] = m_lift_access;
    if (is_main_waypoint_id_modified())
      variant_hash[QLatin1String("main_waypoint_id")] = m_main_waypoint_id;
    if (is_mixed_rating_modified())
      variant_hash[QLatin1String("mixed_rating")] = m_mixed_rating;
    if (is_mtb_down_rating_modified())
      variant_hash[QLatin1String("mtb_down_rating")] = m_mtb_down_rating;
    if (is_mtb_height_diff_portages_modified())
      variant_hash[QLatin1String("mtb_height_diff_portages")] = m_mtb_height_diff_portages;
    if (is_mtb_length_asphalt_modified())
      variant_hash[QLatin1String("mtb_length_asphalt")] = m_mtb_length_asphalt;
    if (is_mtb_length_trail_modified())
      variant_hash[QLatin1String("mtb_length_trail")] = m_mtb_length_trail;
    if (is_mtb_up_rating_modified())
      variant_hash[QLatin1String("mtb_up_rating")] = m_mtb_up_rating;
    if (is_orientations_modified())
      variant_hash[QLatin1String("orientations")] = m_orientations;
    if (is_risk_rating_modified())
      variant_hash[QLatin1String("risk_rating")] = m_risk_rating;
    if (is_rock_free_rating_modified())
      variant_hash[QLatin1String("rock_free_rating")] = m_rock_free_rating;
    if (is_rock_required_rating_modified())
      variant_hash[QLatin1String("rock_required_rating")] = m_rock_required_rating;
    if (is_rock_types_modified())
      variant_hash[QLatin1String("rock_types")] = m_rock_types;
    if (is_route_length_modified())
      variant_hash[QLatin1String("route_length")] = m_route_length;
    if (is_route_types_modified())
      variant_hash[QLatin1String("route_types")] = m_route_types;
    if (is_ski_exposition_modified())
      variant_hash[QLatin1String("ski_exposition")] = m_ski_exposition;
    if (is_ski_rating_modified())
      variant_hash[QLatin1String("ski_rating")] = m_ski_rating;
    if (is_slackline_height_modified())
      variant_hash[QLatin1String("slackline_height")] = m_slackline_height;
    if (is_slackline_type_modified())
      variant_hash[QLatin1String("slackline_type")] = m_slackline_type;
    if (is_snowshoe_rating_modified())
      variant_hash[QLatin1String("snowshoe_rating")] = m_snowshoe_rating;
    if (is_via_ferrata_rating_modified())
      variant_hash[QLatin1String("via_ferrata_rating")] = m_via_ferrata_rating;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("aid_rating")] = m_aid_rating;
    variant_hash[QLatin1String("climbing_outdoor_type")] = m_climbing_outdoor_type;
    variant_hash[QLatin1String("configuration")] = m_configuration;
    variant_hash[QLatin1String("difficulties_height")] = m_difficulties_height;
    variant_hash[QLatin1String("durations")] = m_durations;
    variant_hash[QLatin1String("elevation_max")] = m_elevation_max;
    variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    variant_hash[QLatin1String("engagement_rating")] = m_engagement_rating;
    variant_hash[QLatin1String("equipment_rating")] = m_equipment_rating;
    variant_hash[QLatin1String("exposition_rock_rating")] = m_exposition_rock_rating;
    variant_hash[QLatin1String("glacier_gear")] = m_glacier_gear;
    variant_hash[QLatin1String("global_rating")] = m_global_rating;
    variant_hash[QLatin1String("height_diff_access")] = m_height_diff_access;
    variant_hash[QLatin1String("height_diff_difficulties")] = m_height_diff_difficulties;
    variant_hash[QLatin1String("height_diff_down")] = m_height_diff_down;
    variant_hash[QLatin1String("height_diff_up")] = m_height_diff_up;
    variant_hash[QLatin1String("hiking_mtb_exposition")] = m_hiking_mtb_exposition;
    variant_hash[QLatin1String("hiking_rating")] = m_hiking_rating;
    variant_hash[QLatin1String("ice_rating")] = m_ice_rating;
    variant_hash[QLatin1String("labande_global_rating")] = m_labande_global_rating;
    variant_hash[QLatin1String("labande_ski_rating")] = m_labande_ski_rating;
    variant_hash[QLatin1String("lift_access")] = m_lift_access;
    variant_hash[QLatin1String("main_waypoint_id")] = m_main_waypoint_id;
    variant_hash[QLatin1String("mixed_rating")] = m_mixed_rating;
    variant_hash[QLatin1String("mtb_down_rating")] = m_mtb_down_rating;
    variant_hash[QLatin1String("mtb_height_diff_portages")] = m_mtb_height_diff_portages;
    variant_hash[QLatin1String("mtb_length_asphalt")] = m_mtb_length_asphalt;
    variant_hash[QLatin1String("mtb_length_trail")] = m_mtb_length_trail;
    variant_hash[QLatin1String("mtb_up_rating")] = m_mtb_up_rating;
    variant_hash[QLatin1String("orientations")] = m_orientations;
    variant_hash[QLatin1String("risk_rating")] = m_risk_rating;
    variant_hash[QLatin1String("rock_free_rating")] = m_rock_free_rating;
    variant_hash[QLatin1String("rock_required_rating")] = m_rock_required_rating;
    variant_hash[QLatin1String("rock_types")] = m_rock_types;
    variant_hash[QLatin1String("route_length")] = m_route_length;
    variant_hash[QLatin1String("route_types")] = m_route_types;
    variant_hash[QLatin1String("ski_exposition")] = m_ski_exposition;
    variant_hash[QLatin1String("ski_rating")] = m_ski_rating;
    variant_hash[QLatin1String("slackline_height")] = m_slackline_height;
    variant_hash[QLatin1String("slackline_type")] = m_slackline_type;
    variant_hash[QLatin1String("snowshoe_rating")] = m_snowshoe_rating;
    variant_hash[QLatin1String("via_ferrata_rating")] = m_via_ferrata_rating;
  }

  return variant_hash;
}

QVariantList
C2cRoutes::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_activities;
  variants << m_aid_rating;
  variants << m_climbing_outdoor_type;
  variants << m_configuration;
  variants << m_difficulties_height;
  variants << m_durations;
  variants << m_elevation_max;
  variants << m_elevation_min;
  variants << m_engagement_rating;
  variants << m_equipment_rating;
  variants << m_exposition_rock_rating;
  variants << m_glacier_gear;
  variants << m_global_rating;
  variants << m_height_diff_access;
  variants << m_height_diff_difficulties;
  variants << m_height_diff_down;
  variants << m_height_diff_up;
  variants << m_hiking_mtb_exposition;
  variants << m_hiking_rating;
  variants << m_ice_rating;
  variants << m_labande_global_rating;
  variants << m_labande_ski_rating;
  variants << m_lift_access;
  variants << m_main_waypoint_id;
  variants << m_mixed_rating;
  variants << m_mtb_down_rating;
  variants << m_mtb_height_diff_portages;
  variants << m_mtb_length_asphalt;
  variants << m_mtb_length_trail;
  variants << m_mtb_up_rating;
  variants << m_orientations;
  variants << m_risk_rating;
  variants << m_rock_free_rating;
  variants << m_rock_required_rating;
  variants << m_rock_types;
  variants << m_route_length;
  variants << m_route_types;
  variants << m_ski_exposition;
  variants << m_ski_rating;
  variants << m_slackline_height;
  variants << m_slackline_type;
  variants << m_snowshoe_rating;
  variants << m_via_ferrata_rating;

  return variants;
}

QVariant
C2cRoutes::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::AID_RATING:
     return m_aid_rating;
   case Schema::Fields::CLIMBING_OUTDOOR_TYPE:
     return m_climbing_outdoor_type;
   case Schema::Fields::CONFIGURATION:
     return m_configuration;
   case Schema::Fields::DIFFICULTIES_HEIGHT:
     return m_difficulties_height;
   case Schema::Fields::DURATIONS:
     return m_durations;
   case Schema::Fields::ELEVATION_MAX:
     return m_elevation_max;
   case Schema::Fields::ELEVATION_MIN:
     return m_elevation_min;
   case Schema::Fields::ENGAGEMENT_RATING:
     return m_engagement_rating;
   case Schema::Fields::EQUIPMENT_RATING:
     return m_equipment_rating;
   case Schema::Fields::EXPOSITION_ROCK_RATING:
     return m_exposition_rock_rating;
   case Schema::Fields::GLACIER_GEAR:
     return m_glacier_gear;
   case Schema::Fields::GLOBAL_RATING:
     return m_global_rating;
   case Schema::Fields::HEIGHT_DIFF_ACCESS:
     return m_height_diff_access;
   case Schema::Fields::HEIGHT_DIFF_DIFFICULTIES:
     return m_height_diff_difficulties;
   case Schema::Fields::HEIGHT_DIFF_DOWN:
     return m_height_diff_down;
   case Schema::Fields::HEIGHT_DIFF_UP:
     return m_height_diff_up;
   case Schema::Fields::HIKING_MTB_EXPOSITION:
     return m_hiking_mtb_exposition;
   case Schema::Fields::HIKING_RATING:
     return m_hiking_rating;
   case Schema::Fields::ICE_RATING:
     return m_ice_rating;
   case Schema::Fields::LABANDE_GLOBAL_RATING:
     return m_labande_global_rating;
   case Schema::Fields::LABANDE_SKI_RATING:
     return m_labande_ski_rating;
   case Schema::Fields::LIFT_ACCESS:
     return m_lift_access;
   case Schema::Fields::MAIN_WAYPOINT_ID:
     return m_main_waypoint_id;
   case Schema::Fields::MIXED_RATING:
     return m_mixed_rating;
   case Schema::Fields::MTB_DOWN_RATING:
     return m_mtb_down_rating;
   case Schema::Fields::MTB_HEIGHT_DIFF_PORTAGES:
     return m_mtb_height_diff_portages;
   case Schema::Fields::MTB_LENGTH_ASPHALT:
     return m_mtb_length_asphalt;
   case Schema::Fields::MTB_LENGTH_TRAIL:
     return m_mtb_length_trail;
   case Schema::Fields::MTB_UP_RATING:
     return m_mtb_up_rating;
   case Schema::Fields::ORIENTATIONS:
     return m_orientations;
   case Schema::Fields::RISK_RATING:
     return m_risk_rating;
   case Schema::Fields::ROCK_FREE_RATING:
     return m_rock_free_rating;
   case Schema::Fields::ROCK_REQUIRED_RATING:
     return m_rock_required_rating;
   case Schema::Fields::ROCK_TYPES:
     return m_rock_types;
   case Schema::Fields::ROUTE_LENGTH:
     return m_route_length;
   case Schema::Fields::ROUTE_TYPES:
     return m_route_types;
   case Schema::Fields::SKI_EXPOSITION:
     return m_ski_exposition;
   case Schema::Fields::SKI_RATING:
     return m_ski_rating;
   case Schema::Fields::SLACKLINE_HEIGHT:
     return m_slackline_height;
   case Schema::Fields::SLACKLINE_TYPE:
     return m_slackline_type;
   case Schema::Fields::SNOWSHOE_RATING:
     return m_snowshoe_rating;
   case Schema::Fields::VIA_FERRATA_RATING:
     return m_via_ferrata_rating;
   default:
     return QVariant(); // error
  }
}

void
C2cRoutes::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::AID_RATING: {
     m_aid_rating = value.toString();
     break;
   }
   case Schema::Fields::CLIMBING_OUTDOOR_TYPE: {
     m_climbing_outdoor_type = value.toString();
     break;
   }
   case Schema::Fields::CONFIGURATION: {
     m_configuration = value.toStringList();
     break;
   }
   case Schema::Fields::DIFFICULTIES_HEIGHT: {
     m_difficulties_height = value.toInt();
     break;
   }
   case Schema::Fields::DURATIONS: {
     m_durations = value.toStringList();
     break;
   }
   case Schema::Fields::ELEVATION_MAX: {
     m_elevation_max = value.toInt();
     break;
   }
   case Schema::Fields::ELEVATION_MIN: {
     m_elevation_min = value.toInt();
     break;
   }
   case Schema::Fields::ENGAGEMENT_RATING: {
     m_engagement_rating = value.toString();
     break;
   }
   case Schema::Fields::EQUIPMENT_RATING: {
     m_equipment_rating = value.toString();
     break;
   }
   case Schema::Fields::EXPOSITION_ROCK_RATING: {
     m_exposition_rock_rating = value.toString();
     break;
   }
   case Schema::Fields::GLACIER_GEAR: {
     m_glacier_gear = value.toString();
     break;
   }
   case Schema::Fields::GLOBAL_RATING: {
     m_global_rating = value.toString();
     break;
   }
   case Schema::Fields::HEIGHT_DIFF_ACCESS: {
     m_height_diff_access = value.toInt();
     break;
   }
   case Schema::Fields::HEIGHT_DIFF_DIFFICULTIES: {
     m_height_diff_difficulties = value.toInt();
     break;
   }
   case Schema::Fields::HEIGHT_DIFF_DOWN: {
     m_height_diff_down = value.toInt();
     break;
   }
   case Schema::Fields::HEIGHT_DIFF_UP: {
     m_height_diff_up = value.toInt();
     break;
   }
   case Schema::Fields::HIKING_MTB_EXPOSITION: {
     m_hiking_mtb_exposition = value.toString();
     break;
   }
   case Schema::Fields::HIKING_RATING: {
     m_hiking_rating = value.toString();
     break;
   }
   case Schema::Fields::ICE_RATING: {
     m_ice_rating = value.toString();
     break;
   }
   case Schema::Fields::LABANDE_GLOBAL_RATING: {
     m_labande_global_rating = value.toString();
     break;
   }
   case Schema::Fields::LABANDE_SKI_RATING: {
     m_labande_ski_rating = value.toString();
     break;
   }
   case Schema::Fields::LIFT_ACCESS: {
     m_lift_access = value.toBool();
     break;
   }
   case Schema::Fields::MAIN_WAYPOINT_ID: {
     m_main_waypoint_id = value.toInt();
     break;
   }
   case Schema::Fields::MIXED_RATING: {
     m_mixed_rating = value.toString();
     break;
   }
   case Schema::Fields::MTB_DOWN_RATING: {
     m_mtb_down_rating = value.toString();
     break;
   }
   case Schema::Fields::MTB_HEIGHT_DIFF_PORTAGES: {
     m_mtb_height_diff_portages = value.toInt();
     break;
   }
   case Schema::Fields::MTB_LENGTH_ASPHALT: {
     m_mtb_length_asphalt = value.toInt();
     break;
   }
   case Schema::Fields::MTB_LENGTH_TRAIL: {
     m_mtb_length_trail = value.toInt();
     break;
   }
   case Schema::Fields::MTB_UP_RATING: {
     m_mtb_up_rating = value.toString();
     break;
   }
   case Schema::Fields::ORIENTATIONS: {
     m_orientations = value.toStringList();
     break;
   }
   case Schema::Fields::RISK_RATING: {
     m_risk_rating = value.toString();
     break;
   }
   case Schema::Fields::ROCK_FREE_RATING: {
     m_rock_free_rating = value.toString();
     break;
   }
   case Schema::Fields::ROCK_REQUIRED_RATING: {
     m_rock_required_rating = value.toString();
     break;
   }
   case Schema::Fields::ROCK_TYPES: {
     m_rock_types = value.toStringList();
     break;
   }
   case Schema::Fields::ROUTE_LENGTH: {
     m_route_length = value.toInt();
     break;
   }
   case Schema::Fields::ROUTE_TYPES: {
     m_route_types = value.toStringList();
     break;
   }
   case Schema::Fields::SKI_EXPOSITION: {
     m_ski_exposition = value.toString();
     break;
   }
   case Schema::Fields::SKI_RATING: {
     m_ski_rating = value.toString();
     break;
   }
   case Schema::Fields::SLACKLINE_HEIGHT: {
     m_slackline_height = value.toInt();
     break;
   }
   case Schema::Fields::SLACKLINE_TYPE: {
     m_slackline_type = value.toString();
     break;
   }
   case Schema::Fields::SNOWSHOE_RATING: {
     m_snowshoe_rating = value.toString();
     break;
   }
   case Schema::Fields::VIA_FERRATA_RATING: {
     m_via_ferrata_rating = value.toString();
     break;
   }
  }
}

void
C2cRoutes::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cRoutes::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cRoutes::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cRoutes & obj)
{
  out << obj.document_id();
  out << obj.activities();
  out << obj.aid_rating();
  out << obj.climbing_outdoor_type();
  out << obj.configuration();
  out << obj.difficulties_height();
  out << obj.durations();
  out << obj.elevation_max();
  out << obj.elevation_min();
  out << obj.engagement_rating();
  out << obj.equipment_rating();
  out << obj.exposition_rock_rating();
  out << obj.glacier_gear();
  out << obj.global_rating();
  out << obj.height_diff_access();
  out << obj.height_diff_difficulties();
  out << obj.height_diff_down();
  out << obj.height_diff_up();
  out << obj.hiking_mtb_exposition();
  out << obj.hiking_rating();
  out << obj.ice_rating();
  out << obj.labande_global_rating();
  out << obj.labande_ski_rating();
  out << obj.lift_access();
  out << obj.main_waypoint_id();
  out << obj.mixed_rating();
  out << obj.mtb_down_rating();
  out << obj.mtb_height_diff_portages();
  out << obj.mtb_length_asphalt();
  out << obj.mtb_length_trail();
  out << obj.mtb_up_rating();
  out << obj.orientations();
  out << obj.risk_rating();
  out << obj.rock_free_rating();
  out << obj.rock_required_rating();
  out << obj.rock_types();
  out << obj.route_length();
  out << obj.route_types();
  out << obj.ski_exposition();
  out << obj.ski_rating();
  out << obj.slackline_height();
  out << obj.slackline_type();
  out << obj.snowshoe_rating();
  out << obj.via_ferrata_rating();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cRoutes & obj)
{
  QString _QString;
  QStringList _QStringList;
  bool _bool;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QString;
  obj.set_aid_rating(_QString);
  in >> _QString;
  obj.set_climbing_outdoor_type(_QString);
  in >> _QStringList;
  obj.set_configuration(_QStringList);
  in >> _int;
  obj.set_difficulties_height(_int);
  in >> _QStringList;
  obj.set_durations(_QStringList);
  in >> _int;
  obj.set_elevation_max(_int);
  in >> _int;
  obj.set_elevation_min(_int);
  in >> _QString;
  obj.set_engagement_rating(_QString);
  in >> _QString;
  obj.set_equipment_rating(_QString);
  in >> _QString;
  obj.set_exposition_rock_rating(_QString);
  in >> _QString;
  obj.set_glacier_gear(_QString);
  in >> _QString;
  obj.set_global_rating(_QString);
  in >> _int;
  obj.set_height_diff_access(_int);
  in >> _int;
  obj.set_height_diff_difficulties(_int);
  in >> _int;
  obj.set_height_diff_down(_int);
  in >> _int;
  obj.set_height_diff_up(_int);
  in >> _QString;
  obj.set_hiking_mtb_exposition(_QString);
  in >> _QString;
  obj.set_hiking_rating(_QString);
  in >> _QString;
  obj.set_ice_rating(_QString);
  in >> _QString;
  obj.set_labande_global_rating(_QString);
  in >> _QString;
  obj.set_labande_ski_rating(_QString);
  in >> _bool;
  obj.set_lift_access(_bool);
  in >> _int;
  obj.set_main_waypoint_id(_int);
  in >> _QString;
  obj.set_mixed_rating(_QString);
  in >> _QString;
  obj.set_mtb_down_rating(_QString);
  in >> _int;
  obj.set_mtb_height_diff_portages(_int);
  in >> _int;
  obj.set_mtb_length_asphalt(_int);
  in >> _int;
  obj.set_mtb_length_trail(_int);
  in >> _QString;
  obj.set_mtb_up_rating(_QString);
  in >> _QStringList;
  obj.set_orientations(_QStringList);
  in >> _QString;
  obj.set_risk_rating(_QString);
  in >> _QString;
  obj.set_rock_free_rating(_QString);
  in >> _QString;
  obj.set_rock_required_rating(_QString);
  in >> _QStringList;
  obj.set_rock_types(_QStringList);
  in >> _int;
  obj.set_route_length(_int);
  in >> _QStringList;
  obj.set_route_types(_QStringList);
  in >> _QString;
  obj.set_ski_exposition(_QString);
  in >> _QString;
  obj.set_ski_rating(_QString);
  in >> _int;
  obj.set_slackline_height(_int);
  in >> _QString;
  obj.set_slackline_type(_QString);
  in >> _QString;
  obj.set_snowshoe_rating(_QString);
  in >> _QString;
  obj.set_via_ferrata_rating(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cRoutes & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cRoutes(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.aid_rating();
  debug << QStringLiteral(", ");
  debug << obj.climbing_outdoor_type();
  debug << QStringLiteral(", ");
  debug << obj.configuration();
  debug << QStringLiteral(", ");
  debug << obj.difficulties_height();
  debug << QStringLiteral(", ");
  debug << obj.durations();
  debug << QStringLiteral(", ");
  debug << obj.elevation_max();
  debug << QStringLiteral(", ");
  debug << obj.elevation_min();
  debug << QStringLiteral(", ");
  debug << obj.engagement_rating();
  debug << QStringLiteral(", ");
  debug << obj.equipment_rating();
  debug << QStringLiteral(", ");
  debug << obj.exposition_rock_rating();
  debug << QStringLiteral(", ");
  debug << obj.glacier_gear();
  debug << QStringLiteral(", ");
  debug << obj.global_rating();
  debug << QStringLiteral(", ");
  debug << obj.height_diff_access();
  debug << QStringLiteral(", ");
  debug << obj.height_diff_difficulties();
  debug << QStringLiteral(", ");
  debug << obj.height_diff_down();
  debug << QStringLiteral(", ");
  debug << obj.height_diff_up();
  debug << QStringLiteral(", ");
  debug << obj.hiking_mtb_exposition();
  debug << QStringLiteral(", ");
  debug << obj.hiking_rating();
  debug << QStringLiteral(", ");
  debug << obj.ice_rating();
  debug << QStringLiteral(", ");
  debug << obj.labande_global_rating();
  debug << QStringLiteral(", ");
  debug << obj.labande_ski_rating();
  debug << QStringLiteral(", ");
  debug << obj.lift_access();
  debug << QStringLiteral(", ");
  debug << obj.main_waypoint_id();
  debug << QStringLiteral(", ");
  debug << obj.mixed_rating();
  debug << QStringLiteral(", ");
  debug << obj.mtb_down_rating();
  debug << QStringLiteral(", ");
  debug << obj.mtb_height_diff_portages();
  debug << QStringLiteral(", ");
  debug << obj.mtb_length_asphalt();
  debug << QStringLiteral(", ");
  debug << obj.mtb_length_trail();
  debug << QStringLiteral(", ");
  debug << obj.mtb_up_rating();
  debug << QStringLiteral(", ");
  debug << obj.orientations();
  debug << QStringLiteral(", ");
  debug << obj.risk_rating();
  debug << QStringLiteral(", ");
  debug << obj.rock_free_rating();
  debug << QStringLiteral(", ");
  debug << obj.rock_required_rating();
  debug << QStringLiteral(", ");
  debug << obj.rock_types();
  debug << QStringLiteral(", ");
  debug << obj.route_length();
  debug << QStringLiteral(", ");
  debug << obj.route_types();
  debug << QStringLiteral(", ");
  debug << obj.ski_exposition();
  debug << QStringLiteral(", ");
  debug << obj.ski_rating();
  debug << QStringLiteral(", ");
  debug << obj.slackline_height();
  debug << QStringLiteral(", ");
  debug << obj.slackline_type();
  debug << QStringLiteral(", ");
  debug << obj.snowshoe_rating();
  debug << QStringLiteral(", ");
  debug << obj.via_ferrata_rating();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cRoutesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cRoutesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cRoutesCache::C2cRoutesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cRoutesCache::~C2cRoutesCache()
{}

void
C2cRoutesCache::add(C2cRoutesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cRoutes::changed,
                   this, &C2cRoutesCache::on_changed);
}

void
C2cRoutesCache::remove(C2cRoutesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cRoutesCache::on_changed()
{
  C2cRoutes * row = qobject_cast<C2cRoutes *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cRoutesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cRoutesModel::C2cRoutesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cRoutesModel::C2cRoutesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cRoutesModel::~C2cRoutesModel()
{}

int
C2cRoutesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cRoutesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cRoutesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACTIVITIES:
    return item->activities();
  case AID_RATING:
    return item->aid_rating();
  case CLIMBING_OUTDOOR_TYPE:
    return item->climbing_outdoor_type();
  case CONFIGURATION:
    return item->configuration();
  case DIFFICULTIES_HEIGHT:
    return item->difficulties_height();
  case DURATIONS:
    return item->durations();
  case ELEVATION_MAX:
    return item->elevation_max();
  case ELEVATION_MIN:
    return item->elevation_min();
  case ENGAGEMENT_RATING:
    return item->engagement_rating();
  case EQUIPMENT_RATING:
    return item->equipment_rating();
  case EXPOSITION_ROCK_RATING:
    return item->exposition_rock_rating();
  case GLACIER_GEAR:
    return item->glacier_gear();
  case GLOBAL_RATING:
    return item->global_rating();
  case HEIGHT_DIFF_ACCESS:
    return item->height_diff_access();
  case HEIGHT_DIFF_DIFFICULTIES:
    return item->height_diff_difficulties();
  case HEIGHT_DIFF_DOWN:
    return item->height_diff_down();
  case HEIGHT_DIFF_UP:
    return item->height_diff_up();
  case HIKING_MTB_EXPOSITION:
    return item->hiking_mtb_exposition();
  case HIKING_RATING:
    return item->hiking_rating();
  case ICE_RATING:
    return item->ice_rating();
  case LABANDE_GLOBAL_RATING:
    return item->labande_global_rating();
  case LABANDE_SKI_RATING:
    return item->labande_ski_rating();
  case LIFT_ACCESS:
    return item->lift_access();
  case MAIN_WAYPOINT_ID:
    return item->main_waypoint_id();
  case MIXED_RATING:
    return item->mixed_rating();
  case MTB_DOWN_RATING:
    return item->mtb_down_rating();
  case MTB_HEIGHT_DIFF_PORTAGES:
    return item->mtb_height_diff_portages();
  case MTB_LENGTH_ASPHALT:
    return item->mtb_length_asphalt();
  case MTB_LENGTH_TRAIL:
    return item->mtb_length_trail();
  case MTB_UP_RATING:
    return item->mtb_up_rating();
  case ORIENTATIONS:
    return item->orientations();
  case RISK_RATING:
    return item->risk_rating();
  case ROCK_FREE_RATING:
    return item->rock_free_rating();
  case ROCK_REQUIRED_RATING:
    return item->rock_required_rating();
  case ROCK_TYPES:
    return item->rock_types();
  case ROUTE_LENGTH:
    return item->route_length();
  case ROUTE_TYPES:
    return item->route_types();
  case SKI_EXPOSITION:
    return item->ski_exposition();
  case SKI_RATING:
    return item->ski_rating();
  case SLACKLINE_HEIGHT:
    return item->slackline_height();
  case SLACKLINE_TYPE:
    return item->slackline_type();
  case SNOWSHOE_RATING:
    return item->snowshoe_rating();
  case VIA_FERRATA_RATING:
    return item->via_ferrata_rating();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cRoutesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[AID_RATING] = QStringLiteral("aid_rating").latin1();
  role_names[CLIMBING_OUTDOOR_TYPE] = QStringLiteral("climbing_outdoor_type").latin1();
  role_names[CONFIGURATION] = QStringLiteral("configuration").latin1();
  role_names[DIFFICULTIES_HEIGHT] = QStringLiteral("difficulties_height").latin1();
  role_names[DURATIONS] = QStringLiteral("durations").latin1();
  role_names[ELEVATION_MAX] = QStringLiteral("elevation_max").latin1();
  role_names[ELEVATION_MIN] = QStringLiteral("elevation_min").latin1();
  role_names[ENGAGEMENT_RATING] = QStringLiteral("engagement_rating").latin1();
  role_names[EQUIPMENT_RATING] = QStringLiteral("equipment_rating").latin1();
  role_names[EXPOSITION_ROCK_RATING] = QStringLiteral("exposition_rock_rating").latin1();
  role_names[GLACIER_GEAR] = QStringLiteral("glacier_gear").latin1();
  role_names[GLOBAL_RATING] = QStringLiteral("global_rating").latin1();
  role_names[HEIGHT_DIFF_ACCESS] = QStringLiteral("height_diff_access").latin1();
  role_names[HEIGHT_DIFF_DIFFICULTIES] = QStringLiteral("height_diff_difficulties").latin1();
  role_names[HEIGHT_DIFF_DOWN] = QStringLiteral("height_diff_down").latin1();
  role_names[HEIGHT_DIFF_UP] = QStringLiteral("height_diff_up").latin1();
  role_names[HIKING_MTB_EXPOSITION] = QStringLiteral("hiking_mtb_exposition").latin1();
  role_names[HIKING_RATING] = QStringLiteral("hiking_rating").latin1();
  role_names[ICE_RATING] = QStringLiteral("ice_rating").latin1();
  role_names[LABANDE_GLOBAL_RATING] = QStringLiteral("labande_global_rating").latin1();
  role_names[LABANDE_SKI_RATING] = QStringLiteral("labande_ski_rating").latin1();
  role_names[LIFT_ACCESS] = QStringLiteral("lift_access").latin1();
  role_names[MAIN_WAYPOINT_ID] = QStringLiteral("main_waypoint_id").latin1();
  role_names[MIXED_RATING] = QStringLiteral("mixed_rating").latin1();
  role_names[MTB_DOWN_RATING] = QStringLiteral("mtb_down_rating").latin1();
  role_names[MTB_HEIGHT_DIFF_PORTAGES] = QStringLiteral("mtb_height_diff_portages").latin1();
  role_names[MTB_LENGTH_ASPHALT] = QStringLiteral("mtb_length_asphalt").latin1();
  role_names[MTB_LENGTH_TRAIL] = QStringLiteral("mtb_length_trail").latin1();
  role_names[MTB_UP_RATING] = QStringLiteral("mtb_up_rating").latin1();
  role_names[ORIENTATIONS] = QStringLiteral("orientations").latin1();
  role_names[RISK_RATING] = QStringLiteral("risk_rating").latin1();
  role_names[ROCK_FREE_RATING] = QStringLiteral("rock_free_rating").latin1();
  role_names[ROCK_REQUIRED_RATING] = QStringLiteral("rock_required_rating").latin1();
  role_names[ROCK_TYPES] = QStringLiteral("rock_types").latin1();
  role_names[ROUTE_LENGTH] = QStringLiteral("route_length").latin1();
  role_names[ROUTE_TYPES] = QStringLiteral("route_types").latin1();
  role_names[SKI_EXPOSITION] = QStringLiteral("ski_exposition").latin1();
  role_names[SKI_RATING] = QStringLiteral("ski_rating").latin1();
  role_names[SLACKLINE_HEIGHT] = QStringLiteral("slackline_height").latin1();
  role_names[SLACKLINE_TYPE] = QStringLiteral("slackline_type").latin1();
  role_names[SNOWSHOE_RATING] = QStringLiteral("snowshoe_rating").latin1();
  role_names[VIA_FERRATA_RATING] = QStringLiteral("via_ferrata_rating").latin1();

  return role_names;
}

void
C2cRoutesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cRoutesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cRoutesLocalesSchema::C2cRoutesLocalesSchema()
: QoSchema(QLatin1String("C2cRoutesLocales"), QLatin1String("c2c_routes_locales"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("external_resources"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("external_resources"),
      QLatin1String("external_resources"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("gear"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("gear"),
      QLatin1String("gear"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("remarks"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("remarks"),
      QLatin1String("remarks"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("route_history"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("route_history"),
      QLatin1String("route_history"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_anchor1"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("slackline_anchor1"),
      QLatin1String("slackline_anchor1"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_anchor2"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("slackline_anchor2"),
      QLatin1String("slackline_anchor2"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slope"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("slope"),
      QLatin1String("slope"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("title_prefix"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("title_prefix"),
      QLatin1String("title_prefix"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cRoutesLocalesSchema::~C2cRoutesLocalesSchema()
{}

/**************************************************************************************************/

C2cRoutesLocales::C2cRoutesLocales()
  : QObject(),
    QoRow<C2cRoutesLocalesSchema>(),
    m_id(),
    m_external_resources(),
    m_gear(),
    m_remarks(),
    m_route_history(),
    m_slackline_anchor1(),
    m_slackline_anchor2(),
    m_slope(),
    m_title_prefix()
{
}

C2cRoutesLocales::C2cRoutesLocales(const C2cRoutesLocales & other)
  : QObject(),
    QoRow<C2cRoutesLocalesSchema>(other),
    m_id(other.m_id),
    m_external_resources(other.m_external_resources),
    m_gear(other.m_gear),
    m_remarks(other.m_remarks),
    m_route_history(other.m_route_history),
    m_slackline_anchor1(other.m_slackline_anchor1),
    m_slackline_anchor2(other.m_slackline_anchor2),
    m_slope(other.m_slope),
    m_title_prefix(other.m_title_prefix)
{
}

C2cRoutesLocales::C2cRoutesLocales(const QJsonObject & json_object)
 : C2cRoutesLocales()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_external_resources = json_object[QLatin1String("external_resources")].toString();
  m_gear = json_object[QLatin1String("gear")].toString();
  m_remarks = json_object[QLatin1String("remarks")].toString();
  m_route_history = json_object[QLatin1String("route_history")].toString();
  m_slackline_anchor1 = json_object[QLatin1String("slackline_anchor1")].toString();
  m_slackline_anchor2 = json_object[QLatin1String("slackline_anchor2")].toString();
  m_slope = json_object[QLatin1String("slope")].toString();
  m_title_prefix = json_object[QLatin1String("title_prefix")].toString();
}

C2cRoutesLocales::C2cRoutesLocales(const QVariantHash & variant_hash)
 : C2cRoutesLocales()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_external_resources = variant_hash[QLatin1String("external_resources")].toString();
  m_gear = variant_hash[QLatin1String("gear")].toString();
  m_remarks = variant_hash[QLatin1String("remarks")].toString();
  m_route_history = variant_hash[QLatin1String("route_history")].toString();
  m_slackline_anchor1 = variant_hash[QLatin1String("slackline_anchor1")].toString();
  m_slackline_anchor2 = variant_hash[QLatin1String("slackline_anchor2")].toString();
  m_slope = variant_hash[QLatin1String("slope")].toString();
  m_title_prefix = variant_hash[QLatin1String("title_prefix")].toString();
}

C2cRoutesLocales::C2cRoutesLocales(const QVariantList & variants)
 : C2cRoutesLocales()
{
  m_id = variants[0].toInt();
  m_external_resources = variants[1].toString();
  m_gear = variants[2].toString();
  m_remarks = variants[3].toString();
  m_route_history = variants[4].toString();
  m_slackline_anchor1 = variants[5].toString();
  m_slackline_anchor2 = variants[6].toString();
  m_slope = variants[7].toString();
  m_title_prefix = variants[8].toString();
}

C2cRoutesLocales::C2cRoutesLocales(const QSqlRecord & record)
 : QoRow<C2cRoutesLocalesSchema>(record)
{
  m_id = record.value(0).toInt();
  m_external_resources = record.value(1).toString();
  m_gear = record.value(2).toString();
  m_remarks = record.value(3).toString();
  m_route_history = record.value(4).toString();
  m_slackline_anchor1 = record.value(5).toString();
  m_slackline_anchor2 = record.value(6).toString();
  m_slope = record.value(7).toString();
  m_title_prefix = record.value(8).toString();
}

C2cRoutesLocales::C2cRoutesLocales(const QSqlQuery & query, int offset)
 : QoRow<C2cRoutesLocalesSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_external_resources = query.value(offset++).toString();
  m_gear = query.value(offset++).toString();
  m_remarks = query.value(offset++).toString();
  m_route_history = query.value(offset++).toString();
  m_slackline_anchor1 = query.value(offset++).toString();
  m_slackline_anchor2 = query.value(offset++).toString();
  m_slope = query.value(offset++).toString();
  m_title_prefix = query.value(offset).toString();
}

C2cRoutesLocales::~C2cRoutesLocales()
{
// qATInfo() << "--- Delete" << "C2cRoutesLocales" << *this;
}

// bit array ?
C2cRoutesLocales &
C2cRoutesLocales::operator=(const C2cRoutesLocales & other)
{
  if (this != &other) {
    QoRow<C2cRoutesLocalesSchema>::operator=(other);
    m_id = other.m_id;
    m_external_resources = other.m_external_resources;
    m_gear = other.m_gear;
    m_remarks = other.m_remarks;
    m_route_history = other.m_route_history;
    m_slackline_anchor1 = other.m_slackline_anchor1;
    m_slackline_anchor2 = other.m_slackline_anchor2;
    m_slope = other.m_slope;
    m_title_prefix = other.m_title_prefix;
  }

  return *this;
}

// bit array ?
bool
C2cRoutesLocales::operator==(const C2cRoutesLocales & other) const
{
  if (not QoRow<C2cRoutesLocalesSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_external_resources != other.m_external_resources)
    return false;
  if (m_gear != other.m_gear)
    return false;
  if (m_remarks != other.m_remarks)
    return false;
  if (m_route_history != other.m_route_history)
    return false;
  if (m_slackline_anchor1 != other.m_slackline_anchor1)
    return false;
  if (m_slackline_anchor2 != other.m_slackline_anchor2)
    return false;
  if (m_slope != other.m_slope)
    return false;
  if (m_title_prefix != other.m_title_prefix)
    return false;

  return true;
}

void
C2cRoutesLocales::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_external_resources(const QString & value)
{
  if (m_external_resources != value) {
    m_external_resources = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EXTERNAL_RESOURCES);

    emit external_resourcesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_gear(const QString & value)
{
  if (m_gear != value) {
    m_gear = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GEAR);

    emit gearChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_remarks(const QString & value)
{
  if (m_remarks != value) {
    m_remarks = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::REMARKS);

    emit remarksChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_route_history(const QString & value)
{
  if (m_route_history != value) {
    m_route_history = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROUTE_HISTORY);

    emit route_historyChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_slackline_anchor1(const QString & value)
{
  if (m_slackline_anchor1 != value) {
    m_slackline_anchor1 = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_ANCHOR1);

    emit slackline_anchor1Changed();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_slackline_anchor2(const QString & value)
{
  if (m_slackline_anchor2 != value) {
    m_slackline_anchor2 = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_ANCHOR2);

    emit slackline_anchor2Changed();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_slope(const QString & value)
{
  if (m_slope != value) {
    m_slope = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLOPE);

    emit slopeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cRoutesLocales::set_title_prefix(const QString & value)
{
  if (m_title_prefix != value) {
    m_title_prefix = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TITLE_PREFIX);

    emit title_prefixChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cRoutesLocales::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_external_resources_modified())
      json_object.insert(QLatin1String("external_resources"), QJsonValue(m_external_resources));
    if (is_gear_modified())
      json_object.insert(QLatin1String("gear"), QJsonValue(m_gear));
    if (is_remarks_modified())
      json_object.insert(QLatin1String("remarks"), QJsonValue(m_remarks));
    if (is_route_history_modified())
      json_object.insert(QLatin1String("route_history"), QJsonValue(m_route_history));
    if (is_slackline_anchor1_modified())
      json_object.insert(QLatin1String("slackline_anchor1"), QJsonValue(m_slackline_anchor1));
    if (is_slackline_anchor2_modified())
      json_object.insert(QLatin1String("slackline_anchor2"), QJsonValue(m_slackline_anchor2));
    if (is_slope_modified())
      json_object.insert(QLatin1String("slope"), QJsonValue(m_slope));
    if (is_title_prefix_modified())
      json_object.insert(QLatin1String("title_prefix"), QJsonValue(m_title_prefix));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("external_resources"), QJsonValue(m_external_resources));
    json_object.insert(QLatin1String("gear"), QJsonValue(m_gear));
    json_object.insert(QLatin1String("remarks"), QJsonValue(m_remarks));
    json_object.insert(QLatin1String("route_history"), QJsonValue(m_route_history));
    json_object.insert(QLatin1String("slackline_anchor1"), QJsonValue(m_slackline_anchor1));
    json_object.insert(QLatin1String("slackline_anchor2"), QJsonValue(m_slackline_anchor2));
    json_object.insert(QLatin1String("slope"), QJsonValue(m_slope));
    json_object.insert(QLatin1String("title_prefix"), QJsonValue(m_title_prefix));
  }

  return json_object;
}

QVariantHash
C2cRoutesLocales::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_external_resources_modified())
      variant_hash[QLatin1String("external_resources")] = m_external_resources;
    if (is_gear_modified())
      variant_hash[QLatin1String("gear")] = m_gear;
    if (is_remarks_modified())
      variant_hash[QLatin1String("remarks")] = m_remarks;
    if (is_route_history_modified())
      variant_hash[QLatin1String("route_history")] = m_route_history;
    if (is_slackline_anchor1_modified())
      variant_hash[QLatin1String("slackline_anchor1")] = m_slackline_anchor1;
    if (is_slackline_anchor2_modified())
      variant_hash[QLatin1String("slackline_anchor2")] = m_slackline_anchor2;
    if (is_slope_modified())
      variant_hash[QLatin1String("slope")] = m_slope;
    if (is_title_prefix_modified())
      variant_hash[QLatin1String("title_prefix")] = m_title_prefix;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("external_resources")] = m_external_resources;
    variant_hash[QLatin1String("gear")] = m_gear;
    variant_hash[QLatin1String("remarks")] = m_remarks;
    variant_hash[QLatin1String("route_history")] = m_route_history;
    variant_hash[QLatin1String("slackline_anchor1")] = m_slackline_anchor1;
    variant_hash[QLatin1String("slackline_anchor2")] = m_slackline_anchor2;
    variant_hash[QLatin1String("slope")] = m_slope;
    variant_hash[QLatin1String("title_prefix")] = m_title_prefix;
  }

  return variant_hash;
}

QVariantList
C2cRoutesLocales::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_external_resources;
  variants << m_gear;
  variants << m_remarks;
  variants << m_route_history;
  variants << m_slackline_anchor1;
  variants << m_slackline_anchor2;
  variants << m_slope;
  variants << m_title_prefix;

  return variants;
}

QVariantHash
C2cRoutesLocales::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_external_resources_modified())
      variant_hash[QLatin1String("external_resources")] = m_external_resources;
    if (is_gear_modified())
      variant_hash[QLatin1String("gear")] = m_gear;
    if (is_remarks_modified())
      variant_hash[QLatin1String("remarks")] = m_remarks;
    if (is_route_history_modified())
      variant_hash[QLatin1String("route_history")] = m_route_history;
    if (is_slackline_anchor1_modified())
      variant_hash[QLatin1String("slackline_anchor1")] = m_slackline_anchor1;
    if (is_slackline_anchor2_modified())
      variant_hash[QLatin1String("slackline_anchor2")] = m_slackline_anchor2;
    if (is_slope_modified())
      variant_hash[QLatin1String("slope")] = m_slope;
    if (is_title_prefix_modified())
      variant_hash[QLatin1String("title_prefix")] = m_title_prefix;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("external_resources")] = m_external_resources;
    variant_hash[QLatin1String("gear")] = m_gear;
    variant_hash[QLatin1String("remarks")] = m_remarks;
    variant_hash[QLatin1String("route_history")] = m_route_history;
    variant_hash[QLatin1String("slackline_anchor1")] = m_slackline_anchor1;
    variant_hash[QLatin1String("slackline_anchor2")] = m_slackline_anchor2;
    variant_hash[QLatin1String("slope")] = m_slope;
    variant_hash[QLatin1String("title_prefix")] = m_title_prefix;
  }

  return variant_hash;
}

QVariantList
C2cRoutesLocales::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_external_resources;
  variants << m_gear;
  variants << m_remarks;
  variants << m_route_history;
  variants << m_slackline_anchor1;
  variants << m_slackline_anchor2;
  variants << m_slope;
  variants << m_title_prefix;

  return variants;
}

QVariant
C2cRoutesLocales::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::EXTERNAL_RESOURCES:
     return m_external_resources;
   case Schema::Fields::GEAR:
     return m_gear;
   case Schema::Fields::REMARKS:
     return m_remarks;
   case Schema::Fields::ROUTE_HISTORY:
     return m_route_history;
   case Schema::Fields::SLACKLINE_ANCHOR1:
     return m_slackline_anchor1;
   case Schema::Fields::SLACKLINE_ANCHOR2:
     return m_slackline_anchor2;
   case Schema::Fields::SLOPE:
     return m_slope;
   case Schema::Fields::TITLE_PREFIX:
     return m_title_prefix;
   default:
     return QVariant(); // error
  }
}

void
C2cRoutesLocales::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::EXTERNAL_RESOURCES: {
     m_external_resources = value.toString();
     break;
   }
   case Schema::Fields::GEAR: {
     m_gear = value.toString();
     break;
   }
   case Schema::Fields::REMARKS: {
     m_remarks = value.toString();
     break;
   }
   case Schema::Fields::ROUTE_HISTORY: {
     m_route_history = value.toString();
     break;
   }
   case Schema::Fields::SLACKLINE_ANCHOR1: {
     m_slackline_anchor1 = value.toString();
     break;
   }
   case Schema::Fields::SLACKLINE_ANCHOR2: {
     m_slackline_anchor2 = value.toString();
     break;
   }
   case Schema::Fields::SLOPE: {
     m_slope = value.toString();
     break;
   }
   case Schema::Fields::TITLE_PREFIX: {
     m_title_prefix = value.toString();
     break;
   }
  }
}

void
C2cRoutesLocales::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cRoutesLocales::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cRoutesLocales::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cRoutesLocales & obj)
{
  out << obj.id();
  out << obj.external_resources();
  out << obj.gear();
  out << obj.remarks();
  out << obj.route_history();
  out << obj.slackline_anchor1();
  out << obj.slackline_anchor2();
  out << obj.slope();
  out << obj.title_prefix();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cRoutesLocales & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QString;
  obj.set_external_resources(_QString);
  in >> _QString;
  obj.set_gear(_QString);
  in >> _QString;
  obj.set_remarks(_QString);
  in >> _QString;
  obj.set_route_history(_QString);
  in >> _QString;
  obj.set_slackline_anchor1(_QString);
  in >> _QString;
  obj.set_slackline_anchor2(_QString);
  in >> _QString;
  obj.set_slope(_QString);
  in >> _QString;
  obj.set_title_prefix(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cRoutesLocales & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cRoutesLocales(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.external_resources();
  debug << QStringLiteral(", ");
  debug << obj.gear();
  debug << QStringLiteral(", ");
  debug << obj.remarks();
  debug << QStringLiteral(", ");
  debug << obj.route_history();
  debug << QStringLiteral(", ");
  debug << obj.slackline_anchor1();
  debug << QStringLiteral(", ");
  debug << obj.slackline_anchor2();
  debug << QStringLiteral(", ");
  debug << obj.slope();
  debug << QStringLiteral(", ");
  debug << obj.title_prefix();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cRoutesLocalesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cRoutesLocalesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cRoutesLocalesCache::C2cRoutesLocalesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cRoutesLocalesCache::~C2cRoutesLocalesCache()
{}

void
C2cRoutesLocalesCache::add(C2cRoutesLocalesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cRoutesLocales::changed,
                   this, &C2cRoutesLocalesCache::on_changed);
}

void
C2cRoutesLocalesCache::remove(C2cRoutesLocalesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cRoutesLocalesCache::on_changed()
{
  C2cRoutesLocales * row = qobject_cast<C2cRoutesLocales *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cRoutesLocalesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cRoutesLocalesModel::C2cRoutesLocalesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cRoutesLocalesModel::C2cRoutesLocalesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cRoutesLocalesModel::~C2cRoutesLocalesModel()
{}

int
C2cRoutesLocalesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cRoutesLocalesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cRoutesLocalesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case EXTERNAL_RESOURCES:
    return item->external_resources();
  case GEAR:
    return item->gear();
  case REMARKS:
    return item->remarks();
  case ROUTE_HISTORY:
    return item->route_history();
  case SLACKLINE_ANCHOR1:
    return item->slackline_anchor1();
  case SLACKLINE_ANCHOR2:
    return item->slackline_anchor2();
  case SLOPE:
    return item->slope();
  case TITLE_PREFIX:
    return item->title_prefix();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cRoutesLocalesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[EXTERNAL_RESOURCES] = QStringLiteral("external_resources").latin1();
  role_names[GEAR] = QStringLiteral("gear").latin1();
  role_names[REMARKS] = QStringLiteral("remarks").latin1();
  role_names[ROUTE_HISTORY] = QStringLiteral("route_history").latin1();
  role_names[SLACKLINE_ANCHOR1] = QStringLiteral("slackline_anchor1").latin1();
  role_names[SLACKLINE_ANCHOR2] = QStringLiteral("slackline_anchor2").latin1();
  role_names[SLOPE] = QStringLiteral("slope").latin1();
  role_names[TITLE_PREFIX] = QStringLiteral("title_prefix").latin1();

  return role_names;
}

void
C2cRoutesLocalesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cRoutesLocalesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cUserSchema::C2cUserSchema()
: QoSchema(QLatin1String("C2cUser"), QLatin1String("c2c_user"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("blocked"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("blocked"),
      QLatin1String("blocked"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("email"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("email"),
      QLatin1String("email"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("email_to_validate"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("email_to_validate"),
      QLatin1String("email_to_validate"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("email_validated"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("email_validated"),
      QLatin1String("email_validated"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("feed_filter_activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("feed_filter_activities"),
      QLatin1String("feed_filter_activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("feed_followed_only"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("feed_followed_only"),
      QLatin1String("feed_followed_only"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("forum_username"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("forum_username"),
      QLatin1String("forum_username"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("is_profile_public"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("is_profile_public"),
      QLatin1String("is_profile_public"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("lang"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("lang"),
      QLatin1String("lang"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("last_modified"),
      QLatin1String("QDateTime"),
      QLatin1String("text"),
      QLatin1String("last_modified"),
      QLatin1String("last_modified"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("moderator"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("moderator"),
      QLatin1String("moderator"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("name"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("name"),
      QLatin1String("name"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("password"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("password"),
      QLatin1String("password"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("username"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("username"),
      QLatin1String("username"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("validation_nonce"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("validation_nonce"),
      QLatin1String("validation_nonce"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("validation_nonce_expire"),
      QLatin1String("QDateTime"),
      QLatin1String("text"),
      QLatin1String("validation_nonce_expire"),
      QLatin1String("validation_nonce_expire"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cUserSchema::~C2cUserSchema()
{}

/**************************************************************************************************/

C2cUser::C2cUser()
  : QObject(),
    QoRow<C2cUserSchema>(),
    m_id(),
    m_blocked(),
    m_email(),
    m_email_to_validate(),
    m_email_validated(),
    m_feed_filter_activities(),
    m_feed_followed_only(),
    m_forum_username(),
    m_is_profile_public(),
    m_lang(),
    m_last_modified(),
    m_moderator(),
    m_name(),
    m_password(),
    m_username(),
    m_validation_nonce(),
    m_validation_nonce_expire()
{
}

C2cUser::C2cUser(const C2cUser & other)
  : QObject(),
    QoRow<C2cUserSchema>(other),
    m_id(other.m_id),
    m_blocked(other.m_blocked),
    m_email(other.m_email),
    m_email_to_validate(other.m_email_to_validate),
    m_email_validated(other.m_email_validated),
    m_feed_filter_activities(other.m_feed_filter_activities),
    m_feed_followed_only(other.m_feed_followed_only),
    m_forum_username(other.m_forum_username),
    m_is_profile_public(other.m_is_profile_public),
    m_lang(other.m_lang),
    m_last_modified(other.m_last_modified),
    m_moderator(other.m_moderator),
    m_name(other.m_name),
    m_password(other.m_password),
    m_username(other.m_username),
    m_validation_nonce(other.m_validation_nonce),
    m_validation_nonce_expire(other.m_validation_nonce_expire)
{
}

C2cUser::C2cUser(const QJsonObject & json_object)
 : C2cUser()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_blocked = json_object[QLatin1String("blocked")].toBool();
  m_email = json_object[QLatin1String("email")].toString();
  m_email_to_validate = json_object[QLatin1String("email_to_validate")].toString();
  m_email_validated = json_object[QLatin1String("email_validated")].toBool();
  m_feed_filter_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("feed_filter_activities")]);
  m_feed_followed_only = json_object[QLatin1String("feed_followed_only")].toBool();
  m_forum_username = json_object[QLatin1String("forum_username")].toString();
  m_is_profile_public = json_object[QLatin1String("is_profile_public")].toBool();
  m_lang = json_object[QLatin1String("lang")].toString();
  m_last_modified = orm_type_conversion::load_datetime(json_object[QLatin1String("last_modified")]);
  m_moderator = json_object[QLatin1String("moderator")].toBool();
  m_name = json_object[QLatin1String("name")].toString();
  m_password = json_object[QLatin1String("password")].toString();
  m_username = json_object[QLatin1String("username")].toString();
  m_validation_nonce = json_object[QLatin1String("validation_nonce")].toString();
  m_validation_nonce_expire = orm_type_conversion::load_datetime(json_object[QLatin1String("validation_nonce_expire")]);
}

C2cUser::C2cUser(const QVariantHash & variant_hash)
 : C2cUser()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_blocked = variant_hash[QLatin1String("blocked")].toBool();
  m_email = variant_hash[QLatin1String("email")].toString();
  m_email_to_validate = variant_hash[QLatin1String("email_to_validate")].toString();
  m_email_validated = variant_hash[QLatin1String("email_validated")].toBool();
  m_feed_filter_activities = variant_hash[QLatin1String("feed_filter_activities")].toStringList();
  m_feed_followed_only = variant_hash[QLatin1String("feed_followed_only")].toBool();
  m_forum_username = variant_hash[QLatin1String("forum_username")].toString();
  m_is_profile_public = variant_hash[QLatin1String("is_profile_public")].toBool();
  m_lang = variant_hash[QLatin1String("lang")].toString();
  m_last_modified = variant_hash[QLatin1String("last_modified")].toDateTime();
  m_moderator = variant_hash[QLatin1String("moderator")].toBool();
  m_name = variant_hash[QLatin1String("name")].toString();
  m_password = variant_hash[QLatin1String("password")].toString();
  m_username = variant_hash[QLatin1String("username")].toString();
  m_validation_nonce = variant_hash[QLatin1String("validation_nonce")].toString();
  m_validation_nonce_expire = variant_hash[QLatin1String("validation_nonce_expire")].toDateTime();
}

C2cUser::C2cUser(const QVariantList & variants)
 : C2cUser()
{
  m_id = variants[0].toInt();
  m_blocked = variants[1].toBool();
  m_email = variants[2].toString();
  m_email_to_validate = variants[3].toString();
  m_email_validated = variants[4].toBool();
  m_feed_filter_activities = variants[5].toStringList();
  m_feed_followed_only = variants[6].toBool();
  m_forum_username = variants[7].toString();
  m_is_profile_public = variants[8].toBool();
  m_lang = variants[9].toString();
  m_last_modified = variants[10].toDateTime();
  m_moderator = variants[11].toBool();
  m_name = variants[12].toString();
  m_password = variants[13].toString();
  m_username = variants[14].toString();
  m_validation_nonce = variants[15].toString();
  m_validation_nonce_expire = variants[16].toDateTime();
}

C2cUser::C2cUser(const QSqlRecord & record)
 : QoRow<C2cUserSchema>(record)
{
  m_id = record.value(0).toInt();
  m_blocked = record.value(1).toBool();
  m_email = record.value(2).toString();
  m_email_to_validate = record.value(3).toString();
  m_email_validated = record.value(4).toBool();
  m_feed_filter_activities = record.value(5).toStringList();
  m_feed_followed_only = record.value(6).toBool();
  m_forum_username = record.value(7).toString();
  m_is_profile_public = record.value(8).toBool();
  m_lang = record.value(9).toString();
  m_last_modified = record.value(10).toDateTime();
  m_moderator = record.value(11).toBool();
  m_name = record.value(12).toString();
  m_password = record.value(13).toString();
  m_username = record.value(14).toString();
  m_validation_nonce = record.value(15).toString();
  m_validation_nonce_expire = record.value(16).toDateTime();
}

C2cUser::C2cUser(const QSqlQuery & query, int offset)
 : QoRow<C2cUserSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_blocked = query.value(offset++).toBool();
  m_email = query.value(offset++).toString();
  m_email_to_validate = query.value(offset++).toString();
  m_email_validated = query.value(offset++).toBool();
  m_feed_filter_activities = query.value(offset++).toStringList();
  m_feed_followed_only = query.value(offset++).toBool();
  m_forum_username = query.value(offset++).toString();
  m_is_profile_public = query.value(offset++).toBool();
  m_lang = query.value(offset++).toString();
  m_last_modified = query.value(offset++).toDateTime();
  m_moderator = query.value(offset++).toBool();
  m_name = query.value(offset++).toString();
  m_password = query.value(offset++).toString();
  m_username = query.value(offset++).toString();
  m_validation_nonce = query.value(offset++).toString();
  m_validation_nonce_expire = query.value(offset).toDateTime();
}

C2cUser::~C2cUser()
{
// qATInfo() << "--- Delete" << "C2cUser" << *this;
}

// bit array ?
C2cUser &
C2cUser::operator=(const C2cUser & other)
{
  if (this != &other) {
    QoRow<C2cUserSchema>::operator=(other);
    m_id = other.m_id;
    m_blocked = other.m_blocked;
    m_email = other.m_email;
    m_email_to_validate = other.m_email_to_validate;
    m_email_validated = other.m_email_validated;
    m_feed_filter_activities = other.m_feed_filter_activities;
    m_feed_followed_only = other.m_feed_followed_only;
    m_forum_username = other.m_forum_username;
    m_is_profile_public = other.m_is_profile_public;
    m_lang = other.m_lang;
    m_last_modified = other.m_last_modified;
    m_moderator = other.m_moderator;
    m_name = other.m_name;
    m_password = other.m_password;
    m_username = other.m_username;
    m_validation_nonce = other.m_validation_nonce;
    m_validation_nonce_expire = other.m_validation_nonce_expire;
  }

  return *this;
}

// bit array ?
bool
C2cUser::operator==(const C2cUser & other) const
{
  if (not QoRow<C2cUserSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_blocked != other.m_blocked)
    return false;
  if (m_email != other.m_email)
    return false;
  if (m_email_to_validate != other.m_email_to_validate)
    return false;
  if (m_email_validated != other.m_email_validated)
    return false;
  if (m_feed_filter_activities != other.m_feed_filter_activities)
    return false;
  if (m_feed_followed_only != other.m_feed_followed_only)
    return false;
  if (m_forum_username != other.m_forum_username)
    return false;
  if (m_is_profile_public != other.m_is_profile_public)
    return false;
  if (m_lang != other.m_lang)
    return false;
  if (m_last_modified != other.m_last_modified)
    return false;
  if (m_moderator != other.m_moderator)
    return false;
  if (m_name != other.m_name)
    return false;
  if (m_password != other.m_password)
    return false;
  if (m_username != other.m_username)
    return false;
  if (m_validation_nonce != other.m_validation_nonce)
    return false;
  if (m_validation_nonce_expire != other.m_validation_nonce_expire)
    return false;

  return true;
}

void
C2cUser::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_blocked(bool value)
{
  if (m_blocked != value) {
    m_blocked = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::BLOCKED);

    emit blockedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_email(const QString & value)
{
  if (m_email != value) {
    m_email = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EMAIL);

    emit emailChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_email_to_validate(const QString & value)
{
  if (m_email_to_validate != value) {
    m_email_to_validate = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EMAIL_TO_VALIDATE);

    emit email_to_validateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_email_validated(bool value)
{
  if (m_email_validated != value) {
    m_email_validated = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EMAIL_VALIDATED);

    emit email_validatedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_feed_filter_activities(const QStringList & value)
{
  if (m_feed_filter_activities != value) {
    m_feed_filter_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FEED_FILTER_ACTIVITIES);

    emit feed_filter_activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_feed_followed_only(bool value)
{
  if (m_feed_followed_only != value) {
    m_feed_followed_only = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FEED_FOLLOWED_ONLY);

    emit feed_followed_onlyChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_forum_username(const QString & value)
{
  if (m_forum_username != value) {
    m_forum_username = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::FORUM_USERNAME);

    emit forum_usernameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_is_profile_public(bool value)
{
  if (m_is_profile_public != value) {
    m_is_profile_public = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::IS_PROFILE_PUBLIC);

    emit is_profile_publicChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_lang(const QString & value)
{
  if (m_lang != value) {
    m_lang = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LANG);

    emit langChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_last_modified(const QDateTime & value)
{
  if (m_last_modified != value) {
    m_last_modified = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LAST_MODIFIED);

    emit last_modifiedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_moderator(bool value)
{
  if (m_moderator != value) {
    m_moderator = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MODERATOR);

    emit moderatorChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_name(const QString & value)
{
  if (m_name != value) {
    m_name = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NAME);

    emit nameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_password(const QString & value)
{
  if (m_password != value) {
    m_password = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PASSWORD);

    emit passwordChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_username(const QString & value)
{
  if (m_username != value) {
    m_username = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::USERNAME);

    emit usernameChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_validation_nonce(const QString & value)
{
  if (m_validation_nonce != value) {
    m_validation_nonce = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VALIDATION_NONCE);

    emit validation_nonceChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUser::set_validation_nonce_expire(const QDateTime & value)
{
  if (m_validation_nonce_expire != value) {
    m_validation_nonce_expire = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::VALIDATION_NONCE_EXPIRE);

    emit validation_nonce_expireChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cUser::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_blocked_modified())
      json_object.insert(QLatin1String("blocked"), QJsonValue(m_blocked));
    if (is_email_modified())
      json_object.insert(QLatin1String("email"), QJsonValue(m_email));
    if (is_email_to_validate_modified())
      json_object.insert(QLatin1String("email_to_validate"), QJsonValue(m_email_to_validate));
    if (is_email_validated_modified())
      json_object.insert(QLatin1String("email_validated"), QJsonValue(m_email_validated));
    if (is_feed_filter_activities_modified())
      json_object.insert(QLatin1String("feed_filter_activities"), orm_type_conversion::dump_string_list(m_feed_filter_activities));
    if (is_feed_followed_only_modified())
      json_object.insert(QLatin1String("feed_followed_only"), QJsonValue(m_feed_followed_only));
    if (is_forum_username_modified())
      json_object.insert(QLatin1String("forum_username"), QJsonValue(m_forum_username));
    if (is_is_profile_public_modified())
      json_object.insert(QLatin1String("is_profile_public"), QJsonValue(m_is_profile_public));
    if (is_lang_modified())
      json_object.insert(QLatin1String("lang"), QJsonValue(m_lang));
    if (is_last_modified_modified())
      json_object.insert(QLatin1String("last_modified"), orm_type_conversion::dump_datetime(m_last_modified));
    if (is_moderator_modified())
      json_object.insert(QLatin1String("moderator"), QJsonValue(m_moderator));
    if (is_name_modified())
      json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    if (is_password_modified())
      json_object.insert(QLatin1String("password"), QJsonValue(m_password));
    if (is_username_modified())
      json_object.insert(QLatin1String("username"), QJsonValue(m_username));
    if (is_validation_nonce_modified())
      json_object.insert(QLatin1String("validation_nonce"), QJsonValue(m_validation_nonce));
    if (is_validation_nonce_expire_modified())
      json_object.insert(QLatin1String("validation_nonce_expire"), orm_type_conversion::dump_datetime(m_validation_nonce_expire));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("blocked"), QJsonValue(m_blocked));
    json_object.insert(QLatin1String("email"), QJsonValue(m_email));
    json_object.insert(QLatin1String("email_to_validate"), QJsonValue(m_email_to_validate));
    json_object.insert(QLatin1String("email_validated"), QJsonValue(m_email_validated));
    json_object.insert(QLatin1String("feed_filter_activities"), orm_type_conversion::dump_string_list(m_feed_filter_activities));
    json_object.insert(QLatin1String("feed_followed_only"), QJsonValue(m_feed_followed_only));
    json_object.insert(QLatin1String("forum_username"), QJsonValue(m_forum_username));
    json_object.insert(QLatin1String("is_profile_public"), QJsonValue(m_is_profile_public));
    json_object.insert(QLatin1String("lang"), QJsonValue(m_lang));
    json_object.insert(QLatin1String("last_modified"), orm_type_conversion::dump_datetime(m_last_modified));
    json_object.insert(QLatin1String("moderator"), QJsonValue(m_moderator));
    json_object.insert(QLatin1String("name"), QJsonValue(m_name));
    json_object.insert(QLatin1String("password"), QJsonValue(m_password));
    json_object.insert(QLatin1String("username"), QJsonValue(m_username));
    json_object.insert(QLatin1String("validation_nonce"), QJsonValue(m_validation_nonce));
    json_object.insert(QLatin1String("validation_nonce_expire"), orm_type_conversion::dump_datetime(m_validation_nonce_expire));
  }

  return json_object;
}

QVariantHash
C2cUser::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_blocked_modified())
      variant_hash[QLatin1String("blocked")] = m_blocked;
    if (is_email_modified())
      variant_hash[QLatin1String("email")] = m_email;
    if (is_email_to_validate_modified())
      variant_hash[QLatin1String("email_to_validate")] = m_email_to_validate;
    if (is_email_validated_modified())
      variant_hash[QLatin1String("email_validated")] = m_email_validated;
    if (is_feed_filter_activities_modified())
      variant_hash[QLatin1String("feed_filter_activities")] = m_feed_filter_activities;
    if (is_feed_followed_only_modified())
      variant_hash[QLatin1String("feed_followed_only")] = m_feed_followed_only;
    if (is_forum_username_modified())
      variant_hash[QLatin1String("forum_username")] = m_forum_username;
    if (is_is_profile_public_modified())
      variant_hash[QLatin1String("is_profile_public")] = m_is_profile_public;
    if (is_lang_modified())
      variant_hash[QLatin1String("lang")] = m_lang;
    if (is_last_modified_modified())
      variant_hash[QLatin1String("last_modified")] = m_last_modified;
    if (is_moderator_modified())
      variant_hash[QLatin1String("moderator")] = m_moderator;
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_password_modified())
      variant_hash[QLatin1String("password")] = m_password;
    if (is_username_modified())
      variant_hash[QLatin1String("username")] = m_username;
    if (is_validation_nonce_modified())
      variant_hash[QLatin1String("validation_nonce")] = m_validation_nonce;
    if (is_validation_nonce_expire_modified())
      variant_hash[QLatin1String("validation_nonce_expire")] = m_validation_nonce_expire;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("blocked")] = m_blocked;
    variant_hash[QLatin1String("email")] = m_email;
    variant_hash[QLatin1String("email_to_validate")] = m_email_to_validate;
    variant_hash[QLatin1String("email_validated")] = m_email_validated;
    variant_hash[QLatin1String("feed_filter_activities")] = m_feed_filter_activities;
    variant_hash[QLatin1String("feed_followed_only")] = m_feed_followed_only;
    variant_hash[QLatin1String("forum_username")] = m_forum_username;
    variant_hash[QLatin1String("is_profile_public")] = m_is_profile_public;
    variant_hash[QLatin1String("lang")] = m_lang;
    variant_hash[QLatin1String("last_modified")] = m_last_modified;
    variant_hash[QLatin1String("moderator")] = m_moderator;
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("password")] = m_password;
    variant_hash[QLatin1String("username")] = m_username;
    variant_hash[QLatin1String("validation_nonce")] = m_validation_nonce;
    variant_hash[QLatin1String("validation_nonce_expire")] = m_validation_nonce_expire;
  }

  return variant_hash;
}

QVariantList
C2cUser::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_blocked;
  variants << m_email;
  variants << m_email_to_validate;
  variants << m_email_validated;
  variants << m_feed_filter_activities;
  variants << m_feed_followed_only;
  variants << m_forum_username;
  variants << m_is_profile_public;
  variants << m_lang;
  variants << m_last_modified;
  variants << m_moderator;
  variants << m_name;
  variants << m_password;
  variants << m_username;
  variants << m_validation_nonce;
  variants << m_validation_nonce_expire;

  return variants;
}

QVariantHash
C2cUser::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_blocked_modified())
      variant_hash[QLatin1String("blocked")] = m_blocked;
    if (is_email_modified())
      variant_hash[QLatin1String("email")] = m_email;
    if (is_email_to_validate_modified())
      variant_hash[QLatin1String("email_to_validate")] = m_email_to_validate;
    if (is_email_validated_modified())
      variant_hash[QLatin1String("email_validated")] = m_email_validated;
    if (is_feed_filter_activities_modified())
      variant_hash[QLatin1String("feed_filter_activities")] = m_feed_filter_activities;
    if (is_feed_followed_only_modified())
      variant_hash[QLatin1String("feed_followed_only")] = m_feed_followed_only;
    if (is_forum_username_modified())
      variant_hash[QLatin1String("forum_username")] = m_forum_username;
    if (is_is_profile_public_modified())
      variant_hash[QLatin1String("is_profile_public")] = m_is_profile_public;
    if (is_lang_modified())
      variant_hash[QLatin1String("lang")] = m_lang;
    if (is_last_modified_modified())
      variant_hash[QLatin1String("last_modified")] = m_last_modified;
    if (is_moderator_modified())
      variant_hash[QLatin1String("moderator")] = m_moderator;
    if (is_name_modified())
      variant_hash[QLatin1String("name")] = m_name;
    if (is_password_modified())
      variant_hash[QLatin1String("password")] = m_password;
    if (is_username_modified())
      variant_hash[QLatin1String("username")] = m_username;
    if (is_validation_nonce_modified())
      variant_hash[QLatin1String("validation_nonce")] = m_validation_nonce;
    if (is_validation_nonce_expire_modified())
      variant_hash[QLatin1String("validation_nonce_expire")] = m_validation_nonce_expire;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("blocked")] = m_blocked;
    variant_hash[QLatin1String("email")] = m_email;
    variant_hash[QLatin1String("email_to_validate")] = m_email_to_validate;
    variant_hash[QLatin1String("email_validated")] = m_email_validated;
    variant_hash[QLatin1String("feed_filter_activities")] = m_feed_filter_activities;
    variant_hash[QLatin1String("feed_followed_only")] = m_feed_followed_only;
    variant_hash[QLatin1String("forum_username")] = m_forum_username;
    variant_hash[QLatin1String("is_profile_public")] = m_is_profile_public;
    variant_hash[QLatin1String("lang")] = m_lang;
    variant_hash[QLatin1String("last_modified")] = m_last_modified;
    variant_hash[QLatin1String("moderator")] = m_moderator;
    variant_hash[QLatin1String("name")] = m_name;
    variant_hash[QLatin1String("password")] = m_password;
    variant_hash[QLatin1String("username")] = m_username;
    variant_hash[QLatin1String("validation_nonce")] = m_validation_nonce;
    variant_hash[QLatin1String("validation_nonce_expire")] = m_validation_nonce_expire;
  }

  return variant_hash;
}

QVariantList
C2cUser::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_blocked;
  variants << m_email;
  variants << m_email_to_validate;
  variants << m_email_validated;
  variants << m_feed_filter_activities;
  variants << m_feed_followed_only;
  variants << m_forum_username;
  variants << m_is_profile_public;
  variants << m_lang;
  variants << m_last_modified;
  variants << m_moderator;
  variants << m_name;
  variants << m_password;
  variants << m_username;
  variants << m_validation_nonce;
  variants << m_validation_nonce_expire;

  return variants;
}

QVariant
C2cUser::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::BLOCKED:
     return m_blocked;
   case Schema::Fields::EMAIL:
     return m_email;
   case Schema::Fields::EMAIL_TO_VALIDATE:
     return m_email_to_validate;
   case Schema::Fields::EMAIL_VALIDATED:
     return m_email_validated;
   case Schema::Fields::FEED_FILTER_ACTIVITIES:
     return m_feed_filter_activities;
   case Schema::Fields::FEED_FOLLOWED_ONLY:
     return m_feed_followed_only;
   case Schema::Fields::FORUM_USERNAME:
     return m_forum_username;
   case Schema::Fields::IS_PROFILE_PUBLIC:
     return m_is_profile_public;
   case Schema::Fields::LANG:
     return m_lang;
   case Schema::Fields::LAST_MODIFIED:
     return m_last_modified;
   case Schema::Fields::MODERATOR:
     return m_moderator;
   case Schema::Fields::NAME:
     return m_name;
   case Schema::Fields::PASSWORD:
     return m_password;
   case Schema::Fields::USERNAME:
     return m_username;
   case Schema::Fields::VALIDATION_NONCE:
     return m_validation_nonce;
   case Schema::Fields::VALIDATION_NONCE_EXPIRE:
     return m_validation_nonce_expire;
   default:
     return QVariant(); // error
  }
}

void
C2cUser::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::BLOCKED: {
     m_blocked = value.toBool();
     break;
   }
   case Schema::Fields::EMAIL: {
     m_email = value.toString();
     break;
   }
   case Schema::Fields::EMAIL_TO_VALIDATE: {
     m_email_to_validate = value.toString();
     break;
   }
   case Schema::Fields::EMAIL_VALIDATED: {
     m_email_validated = value.toBool();
     break;
   }
   case Schema::Fields::FEED_FILTER_ACTIVITIES: {
     m_feed_filter_activities = value.toStringList();
     break;
   }
   case Schema::Fields::FEED_FOLLOWED_ONLY: {
     m_feed_followed_only = value.toBool();
     break;
   }
   case Schema::Fields::FORUM_USERNAME: {
     m_forum_username = value.toString();
     break;
   }
   case Schema::Fields::IS_PROFILE_PUBLIC: {
     m_is_profile_public = value.toBool();
     break;
   }
   case Schema::Fields::LANG: {
     m_lang = value.toString();
     break;
   }
   case Schema::Fields::LAST_MODIFIED: {
     m_last_modified = value.toDateTime();
     break;
   }
   case Schema::Fields::MODERATOR: {
     m_moderator = value.toBool();
     break;
   }
   case Schema::Fields::NAME: {
     m_name = value.toString();
     break;
   }
   case Schema::Fields::PASSWORD: {
     m_password = value.toString();
     break;
   }
   case Schema::Fields::USERNAME: {
     m_username = value.toString();
     break;
   }
   case Schema::Fields::VALIDATION_NONCE: {
     m_validation_nonce = value.toString();
     break;
   }
   case Schema::Fields::VALIDATION_NONCE_EXPIRE: {
     m_validation_nonce_expire = value.toDateTime();
     break;
   }
  }
}

void
C2cUser::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cUser::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cUser::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cUser & obj)
{
  out << obj.id();
  out << obj.blocked();
  out << obj.email();
  out << obj.email_to_validate();
  out << obj.email_validated();
  out << obj.feed_filter_activities();
  out << obj.feed_followed_only();
  out << obj.forum_username();
  out << obj.is_profile_public();
  out << obj.lang();
  out << obj.last_modified();
  out << obj.moderator();
  out << obj.name();
  out << obj.password();
  out << obj.username();
  out << obj.validation_nonce();
  out << obj.validation_nonce_expire();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cUser & obj)
{
  QDateTime _QDateTime;
  QString _QString;
  QStringList _QStringList;
  bool _bool;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _bool;
  obj.set_blocked(_bool);
  in >> _QString;
  obj.set_email(_QString);
  in >> _QString;
  obj.set_email_to_validate(_QString);
  in >> _bool;
  obj.set_email_validated(_bool);
  in >> _QStringList;
  obj.set_feed_filter_activities(_QStringList);
  in >> _bool;
  obj.set_feed_followed_only(_bool);
  in >> _QString;
  obj.set_forum_username(_QString);
  in >> _bool;
  obj.set_is_profile_public(_bool);
  in >> _QString;
  obj.set_lang(_QString);
  in >> _QDateTime;
  obj.set_last_modified(_QDateTime);
  in >> _bool;
  obj.set_moderator(_bool);
  in >> _QString;
  obj.set_name(_QString);
  in >> _QString;
  obj.set_password(_QString);
  in >> _QString;
  obj.set_username(_QString);
  in >> _QString;
  obj.set_validation_nonce(_QString);
  in >> _QDateTime;
  obj.set_validation_nonce_expire(_QDateTime);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cUser & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cUser(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.blocked();
  debug << QStringLiteral(", ");
  debug << obj.email();
  debug << QStringLiteral(", ");
  debug << obj.email_to_validate();
  debug << QStringLiteral(", ");
  debug << obj.email_validated();
  debug << QStringLiteral(", ");
  debug << obj.feed_filter_activities();
  debug << QStringLiteral(", ");
  debug << obj.feed_followed_only();
  debug << QStringLiteral(", ");
  debug << obj.forum_username();
  debug << QStringLiteral(", ");
  debug << obj.is_profile_public();
  debug << QStringLiteral(", ");
  debug << obj.lang();
  debug << QStringLiteral(", ");
  debug << obj.last_modified();
  debug << QStringLiteral(", ");
  debug << obj.moderator();
  debug << QStringLiteral(", ");
  debug << obj.name();
  debug << QStringLiteral(", ");
  debug << obj.password();
  debug << QStringLiteral(", ");
  debug << obj.username();
  debug << QStringLiteral(", ");
  debug << obj.validation_nonce();
  debug << QStringLiteral(", ");
  debug << obj.validation_nonce_expire();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cUserPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cUserPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cUserCache::C2cUserCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cUserCache::~C2cUserCache()
{}

void
C2cUserCache::add(C2cUserPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cUser::changed,
                   this, &C2cUserCache::on_changed);
}

void
C2cUserCache::remove(C2cUserPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cUserCache::on_changed()
{
  C2cUser * row = qobject_cast<C2cUser *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cUserPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cUserModel::C2cUserModel()
  : QAbstractListModel(),
    m_items()
{}

C2cUserModel::C2cUserModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cUserModel::~C2cUserModel()
{}

int
C2cUserModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cUserModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cUserModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case BLOCKED:
    return item->blocked();
  case EMAIL:
    return item->email();
  case EMAIL_TO_VALIDATE:
    return item->email_to_validate();
  case EMAIL_VALIDATED:
    return item->email_validated();
  case FEED_FILTER_ACTIVITIES:
    return item->feed_filter_activities();
  case FEED_FOLLOWED_ONLY:
    return item->feed_followed_only();
  case FORUM_USERNAME:
    return item->forum_username();
  case IS_PROFILE_PUBLIC:
    return item->is_profile_public();
  case LANG:
    return item->lang();
  case LAST_MODIFIED:
    return item->last_modified();
  case MODERATOR:
    return item->moderator();
  case NAME:
    return item->name();
  case PASSWORD:
    return item->password();
  case USERNAME:
    return item->username();
  case VALIDATION_NONCE:
    return item->validation_nonce();
  case VALIDATION_NONCE_EXPIRE:
    return item->validation_nonce_expire();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cUserModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[BLOCKED] = QStringLiteral("blocked").latin1();
  role_names[EMAIL] = QStringLiteral("email").latin1();
  role_names[EMAIL_TO_VALIDATE] = QStringLiteral("email_to_validate").latin1();
  role_names[EMAIL_VALIDATED] = QStringLiteral("email_validated").latin1();
  role_names[FEED_FILTER_ACTIVITIES] = QStringLiteral("feed_filter_activities").latin1();
  role_names[FEED_FOLLOWED_ONLY] = QStringLiteral("feed_followed_only").latin1();
  role_names[FORUM_USERNAME] = QStringLiteral("forum_username").latin1();
  role_names[IS_PROFILE_PUBLIC] = QStringLiteral("is_profile_public").latin1();
  role_names[LANG] = QStringLiteral("lang").latin1();
  role_names[LAST_MODIFIED] = QStringLiteral("last_modified").latin1();
  role_names[MODERATOR] = QStringLiteral("moderator").latin1();
  role_names[NAME] = QStringLiteral("name").latin1();
  role_names[PASSWORD] = QStringLiteral("password").latin1();
  role_names[USERNAME] = QStringLiteral("username").latin1();
  role_names[VALIDATION_NONCE] = QStringLiteral("validation_nonce").latin1();
  role_names[VALIDATION_NONCE_EXPIRE] = QStringLiteral("validation_nonce_expire").latin1();

  return role_names;
}

void
C2cUserModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cUserModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cUserProfilesSchema::C2cUserProfilesSchema()
: QoSchema(QLatin1String("C2cUserProfiles"), QLatin1String("c2c_user_profiles"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("categories"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("categories"),
      QLatin1String("categories"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cUserProfilesSchema::~C2cUserProfilesSchema()
{}

/**************************************************************************************************/

C2cUserProfiles::C2cUserProfiles()
  : QObject(),
    QoRow<C2cUserProfilesSchema>(),
    m_document_id(),
    m_activities(),
    m_categories()
{
}

C2cUserProfiles::C2cUserProfiles(const C2cUserProfiles & other)
  : QObject(),
    QoRow<C2cUserProfilesSchema>(other),
    m_document_id(other.m_document_id),
    m_activities(other.m_activities),
    m_categories(other.m_categories)
{
}

C2cUserProfiles::C2cUserProfiles(const QJsonObject & json_object)
 : C2cUserProfiles()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_categories = orm_type_conversion::load_string_list(json_object[QLatin1String("categories")]);
}

C2cUserProfiles::C2cUserProfiles(const QVariantHash & variant_hash)
 : C2cUserProfiles()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_categories = variant_hash[QLatin1String("categories")].toStringList();
}

C2cUserProfiles::C2cUserProfiles(const QVariantList & variants)
 : C2cUserProfiles()
{
  m_document_id = variants[0].toInt();
  m_activities = variants[1].toStringList();
  m_categories = variants[2].toStringList();
}

C2cUserProfiles::C2cUserProfiles(const QSqlRecord & record)
 : QoRow<C2cUserProfilesSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_activities = record.value(1).toStringList();
  m_categories = record.value(2).toStringList();
}

C2cUserProfiles::C2cUserProfiles(const QSqlQuery & query, int offset)
 : QoRow<C2cUserProfilesSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_activities = query.value(offset++).toStringList();
  m_categories = query.value(offset).toStringList();
}

C2cUserProfiles::~C2cUserProfiles()
{
// qATInfo() << "--- Delete" << "C2cUserProfiles" << *this;
}

// bit array ?
C2cUserProfiles &
C2cUserProfiles::operator=(const C2cUserProfiles & other)
{
  if (this != &other) {
    QoRow<C2cUserProfilesSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_activities = other.m_activities;
    m_categories = other.m_categories;
  }

  return *this;
}

// bit array ?
bool
C2cUserProfiles::operator==(const C2cUserProfiles & other) const
{
  if (not QoRow<C2cUserProfilesSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_categories != other.m_categories)
    return false;

  return true;
}

void
C2cUserProfiles::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUserProfiles::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cUserProfiles::set_categories(const QStringList & value)
{
  if (m_categories != value) {
    m_categories = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CATEGORIES);

    emit categoriesChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cUserProfiles::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_categories_modified())
      json_object.insert(QLatin1String("categories"), orm_type_conversion::dump_string_list(m_categories));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("categories"), orm_type_conversion::dump_string_list(m_categories));
  }

  return json_object;
}

QVariantHash
C2cUserProfiles::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_categories_modified())
      variant_hash[QLatin1String("categories")] = m_categories;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("categories")] = m_categories;
  }

  return variant_hash;
}

QVariantList
C2cUserProfiles::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_activities;
  variants << m_categories;

  return variants;
}

QVariantHash
C2cUserProfiles::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_categories_modified())
      variant_hash[QLatin1String("categories")] = m_categories;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("categories")] = m_categories;
  }

  return variant_hash;
}

QVariantList
C2cUserProfiles::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_activities;
  variants << m_categories;

  return variants;
}

QVariant
C2cUserProfiles::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::CATEGORIES:
     return m_categories;
   default:
     return QVariant(); // error
  }
}

void
C2cUserProfiles::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::CATEGORIES: {
     m_categories = value.toStringList();
     break;
   }
  }
}

void
C2cUserProfiles::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cUserProfiles::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cUserProfiles::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cUserProfiles & obj)
{
  out << obj.document_id();
  out << obj.activities();
  out << obj.categories();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cUserProfiles & obj)
{
  QStringList _QStringList;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QStringList;
  obj.set_categories(_QStringList);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cUserProfiles & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cUserProfiles(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.categories();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cUserProfilesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cUserProfilesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cUserProfilesCache::C2cUserProfilesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cUserProfilesCache::~C2cUserProfilesCache()
{}

void
C2cUserProfilesCache::add(C2cUserProfilesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cUserProfiles::changed,
                   this, &C2cUserProfilesCache::on_changed);
}

void
C2cUserProfilesCache::remove(C2cUserProfilesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cUserProfilesCache::on_changed()
{
  C2cUserProfiles * row = qobject_cast<C2cUserProfiles *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cUserProfilesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cUserProfilesModel::C2cUserProfilesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cUserProfilesModel::C2cUserProfilesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cUserProfilesModel::~C2cUserProfilesModel()
{}

int
C2cUserProfilesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cUserProfilesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cUserProfilesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACTIVITIES:
    return item->activities();
  case CATEGORIES:
    return item->categories();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cUserProfilesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[CATEGORIES] = QStringLiteral("categories").latin1();

  return role_names;
}

void
C2cUserProfilesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cUserProfilesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cWaypointsSchema::C2cWaypointsSchema()
: QoSchema(QLatin1String("C2cWaypoints"), QLatin1String("c2c_waypoints"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("access_time"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("access_time"),
      QLatin1String("access_time"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("best_periods"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("best_periods"),
      QLatin1String("best_periods"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("blanket_unstaffed"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("blanket_unstaffed"),
      QLatin1String("blanket_unstaffed"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("capacity"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("capacity"),
      QLatin1String("capacity"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("capacity_staffed"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("capacity_staffed"),
      QLatin1String("capacity_staffed"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("children_proof"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("children_proof"),
      QLatin1String("children_proof"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_indoor_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("climbing_indoor_types"),
      QLatin1String("climbing_indoor_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_outdoor_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("climbing_outdoor_types"),
      QLatin1String("climbing_outdoor_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_rating_max"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("climbing_rating_max"),
      QLatin1String("climbing_rating_max"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_rating_median"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("climbing_rating_median"),
      QLatin1String("climbing_rating_median"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_rating_min"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("climbing_rating_min"),
      QLatin1String("climbing_rating_min"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("climbing_styles"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("climbing_styles"),
      QLatin1String("climbing_styles"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("custodianship"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("custodianship"),
      QLatin1String("custodianship"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation"),
      QLatin1String("elevation"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation_min"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation_min"),
      QLatin1String("elevation_min"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("equipment_ratings"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("equipment_ratings"),
      QLatin1String("equipment_ratings"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("exposition_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("exposition_rating"),
      QLatin1String("exposition_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("gas_unstaffed"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("gas_unstaffed"),
      QLatin1String("gas_unstaffed"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("ground_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("ground_types"),
      QLatin1String("ground_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("heating_unstaffed"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("heating_unstaffed"),
      QLatin1String("heating_unstaffed"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_max"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_max"),
      QLatin1String("height_max"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_median"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_median"),
      QLatin1String("height_median"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("height_min"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("height_min"),
      QLatin1String("height_min"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("length"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("length"),
      QLatin1String("length"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("lift_access"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("lift_access"),
      QLatin1String("lift_access"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("maps_info"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("maps_info"),
      QLatin1String("maps_info"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("matress_unstaffed"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("matress_unstaffed"),
      QLatin1String("matress_unstaffed"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("orientations"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("orientations"),
      QLatin1String("orientations"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("paragliding_rating"),
      QLatin1String("QChar"),
      QLatin1String("text"),
      QLatin1String("paragliding_rating"),
      QLatin1String("paragliding_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("parking_fee"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("parking_fee"),
      QLatin1String("parking_fee"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("phone"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("phone"),
      QLatin1String("phone"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("phone_custodian"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("phone_custodian"),
      QLatin1String("phone_custodian"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("product_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("product_types"),
      QLatin1String("product_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("prominence"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("prominence"),
      QLatin1String("prominence"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("public_transportation_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("public_transportation_rating"),
      QLatin1String("public_transportation_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("public_transportation_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("public_transportation_types"),
      QLatin1String("public_transportation_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rain_proof"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("rain_proof"),
      QLatin1String("rain_proof"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rock_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("rock_types"),
      QLatin1String("rock_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("routes_quantity"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("routes_quantity"),
      QLatin1String("routes_quantity"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_length_max"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("slackline_length_max"),
      QLatin1String("slackline_length_max"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_length_min"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("slackline_length_min"),
      QLatin1String("slackline_length_min"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slackline_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("slackline_types"),
      QLatin1String("slackline_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("slope"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("slope"),
      QLatin1String("slope"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("snow_clearance_rating"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("snow_clearance_rating"),
      QLatin1String("snow_clearance_rating"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("url"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("url"),
      QLatin1String("url"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("waypoint_type"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("waypoint_type"),
      QLatin1String("waypoint_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("weather_station_types"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("weather_station_types"),
      QLatin1String("weather_station_types"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cWaypointsSchema::~C2cWaypointsSchema()
{}

/**************************************************************************************************/

C2cWaypoints::C2cWaypoints()
  : QObject(),
    QoRow<C2cWaypointsSchema>(),
    m_document_id(),
    m_access_time(),
    m_best_periods(),
    m_blanket_unstaffed(),
    m_capacity(),
    m_capacity_staffed(),
    m_children_proof(),
    m_climbing_indoor_types(),
    m_climbing_outdoor_types(),
    m_climbing_rating_max(),
    m_climbing_rating_median(),
    m_climbing_rating_min(),
    m_climbing_styles(),
    m_custodianship(),
    m_elevation(),
    m_elevation_min(),
    m_equipment_ratings(),
    m_exposition_rating(),
    m_gas_unstaffed(),
    m_ground_types(),
    m_heating_unstaffed(),
    m_height_max(),
    m_height_median(),
    m_height_min(),
    m_length(),
    m_lift_access(),
    m_maps_info(),
    m_matress_unstaffed(),
    m_orientations(),
    m_paragliding_rating(),
    m_parking_fee(),
    m_phone(),
    m_phone_custodian(),
    m_product_types(),
    m_prominence(),
    m_public_transportation_rating(),
    m_public_transportation_types(),
    m_rain_proof(),
    m_rock_types(),
    m_routes_quantity(),
    m_slackline_length_max(),
    m_slackline_length_min(),
    m_slackline_types(),
    m_slope(),
    m_snow_clearance_rating(),
    m_url(),
    m_waypoint_type(),
    m_weather_station_types()
{
}

C2cWaypoints::C2cWaypoints(const C2cWaypoints & other)
  : QObject(),
    QoRow<C2cWaypointsSchema>(other),
    m_document_id(other.m_document_id),
    m_access_time(other.m_access_time),
    m_best_periods(other.m_best_periods),
    m_blanket_unstaffed(other.m_blanket_unstaffed),
    m_capacity(other.m_capacity),
    m_capacity_staffed(other.m_capacity_staffed),
    m_children_proof(other.m_children_proof),
    m_climbing_indoor_types(other.m_climbing_indoor_types),
    m_climbing_outdoor_types(other.m_climbing_outdoor_types),
    m_climbing_rating_max(other.m_climbing_rating_max),
    m_climbing_rating_median(other.m_climbing_rating_median),
    m_climbing_rating_min(other.m_climbing_rating_min),
    m_climbing_styles(other.m_climbing_styles),
    m_custodianship(other.m_custodianship),
    m_elevation(other.m_elevation),
    m_elevation_min(other.m_elevation_min),
    m_equipment_ratings(other.m_equipment_ratings),
    m_exposition_rating(other.m_exposition_rating),
    m_gas_unstaffed(other.m_gas_unstaffed),
    m_ground_types(other.m_ground_types),
    m_heating_unstaffed(other.m_heating_unstaffed),
    m_height_max(other.m_height_max),
    m_height_median(other.m_height_median),
    m_height_min(other.m_height_min),
    m_length(other.m_length),
    m_lift_access(other.m_lift_access),
    m_maps_info(other.m_maps_info),
    m_matress_unstaffed(other.m_matress_unstaffed),
    m_orientations(other.m_orientations),
    m_paragliding_rating(other.m_paragliding_rating),
    m_parking_fee(other.m_parking_fee),
    m_phone(other.m_phone),
    m_phone_custodian(other.m_phone_custodian),
    m_product_types(other.m_product_types),
    m_prominence(other.m_prominence),
    m_public_transportation_rating(other.m_public_transportation_rating),
    m_public_transportation_types(other.m_public_transportation_types),
    m_rain_proof(other.m_rain_proof),
    m_rock_types(other.m_rock_types),
    m_routes_quantity(other.m_routes_quantity),
    m_slackline_length_max(other.m_slackline_length_max),
    m_slackline_length_min(other.m_slackline_length_min),
    m_slackline_types(other.m_slackline_types),
    m_slope(other.m_slope),
    m_snow_clearance_rating(other.m_snow_clearance_rating),
    m_url(other.m_url),
    m_waypoint_type(other.m_waypoint_type),
    m_weather_station_types(other.m_weather_station_types)
{
}

C2cWaypoints::C2cWaypoints(const QJsonObject & json_object)
 : C2cWaypoints()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_access_time = json_object[QLatin1String("access_time")].toString();
  m_best_periods = orm_type_conversion::load_string_list(json_object[QLatin1String("best_periods")]);
  m_blanket_unstaffed = json_object[QLatin1String("blanket_unstaffed")].toBool();
  m_capacity = json_object[QLatin1String("capacity")].toInt();
  m_capacity_staffed = json_object[QLatin1String("capacity_staffed")].toInt();
  m_children_proof = json_object[QLatin1String("children_proof")].toString();
  m_climbing_indoor_types = orm_type_conversion::load_string_list(json_object[QLatin1String("climbing_indoor_types")]);
  m_climbing_outdoor_types = orm_type_conversion::load_string_list(json_object[QLatin1String("climbing_outdoor_types")]);
  m_climbing_rating_max = json_object[QLatin1String("climbing_rating_max")].toString();
  m_climbing_rating_median = json_object[QLatin1String("climbing_rating_median")].toString();
  m_climbing_rating_min = json_object[QLatin1String("climbing_rating_min")].toString();
  m_climbing_styles = orm_type_conversion::load_string_list(json_object[QLatin1String("climbing_styles")]);
  m_custodianship = json_object[QLatin1String("custodianship")].toString();
  m_elevation = json_object[QLatin1String("elevation")].toInt();
  m_elevation_min = json_object[QLatin1String("elevation_min")].toInt();
  m_equipment_ratings = orm_type_conversion::load_string_list(json_object[QLatin1String("equipment_ratings")]);
  m_exposition_rating = json_object[QLatin1String("exposition_rating")].toString();
  m_gas_unstaffed = json_object[QLatin1String("gas_unstaffed")].toBool();
  m_ground_types = orm_type_conversion::load_string_list(json_object[QLatin1String("ground_types")]);
  m_heating_unstaffed = json_object[QLatin1String("heating_unstaffed")].toBool();
  m_height_max = json_object[QLatin1String("height_max")].toInt();
  m_height_median = json_object[QLatin1String("height_median")].toInt();
  m_height_min = json_object[QLatin1String("height_min")].toInt();
  m_length = json_object[QLatin1String("length")].toInt();
  m_lift_access = json_object[QLatin1String("lift_access")].toBool();
  m_maps_info = json_object[QLatin1String("maps_info")].toString();
  m_matress_unstaffed = json_object[QLatin1String("matress_unstaffed")].toBool();
  m_orientations = orm_type_conversion::load_string_list(json_object[QLatin1String("orientations")]);
  m_paragliding_rating = json_object[QLatin1String("paragliding_rating")].toVariant().toChar();
  m_parking_fee = json_object[QLatin1String("parking_fee")].toString();
  m_phone = json_object[QLatin1String("phone")].toString();
  m_phone_custodian = json_object[QLatin1String("phone_custodian")].toString();
  m_product_types = orm_type_conversion::load_string_list(json_object[QLatin1String("product_types")]);
  m_prominence = json_object[QLatin1String("prominence")].toInt();
  m_public_transportation_rating = json_object[QLatin1String("public_transportation_rating")].toString();
  m_public_transportation_types = orm_type_conversion::load_string_list(json_object[QLatin1String("public_transportation_types")]);
  m_rain_proof = json_object[QLatin1String("rain_proof")].toString();
  m_rock_types = orm_type_conversion::load_string_list(json_object[QLatin1String("rock_types")]);
  m_routes_quantity = json_object[QLatin1String("routes_quantity")].toInt();
  m_slackline_length_max = json_object[QLatin1String("slackline_length_max")].toInt();
  m_slackline_length_min = json_object[QLatin1String("slackline_length_min")].toInt();
  m_slackline_types = orm_type_conversion::load_string_list(json_object[QLatin1String("slackline_types")]);
  m_slope = json_object[QLatin1String("slope")].toInt();
  m_snow_clearance_rating = json_object[QLatin1String("snow_clearance_rating")].toString();
  m_url = json_object[QLatin1String("url")].toString();
  m_waypoint_type = json_object[QLatin1String("waypoint_type")].toString();
  m_weather_station_types = orm_type_conversion::load_string_list(json_object[QLatin1String("weather_station_types")]);
}

C2cWaypoints::C2cWaypoints(const QVariantHash & variant_hash)
 : C2cWaypoints()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_access_time = variant_hash[QLatin1String("access_time")].toString();
  m_best_periods = variant_hash[QLatin1String("best_periods")].toStringList();
  m_blanket_unstaffed = variant_hash[QLatin1String("blanket_unstaffed")].toBool();
  m_capacity = variant_hash[QLatin1String("capacity")].toInt();
  m_capacity_staffed = variant_hash[QLatin1String("capacity_staffed")].toInt();
  m_children_proof = variant_hash[QLatin1String("children_proof")].toString();
  m_climbing_indoor_types = variant_hash[QLatin1String("climbing_indoor_types")].toStringList();
  m_climbing_outdoor_types = variant_hash[QLatin1String("climbing_outdoor_types")].toStringList();
  m_climbing_rating_max = variant_hash[QLatin1String("climbing_rating_max")].toString();
  m_climbing_rating_median = variant_hash[QLatin1String("climbing_rating_median")].toString();
  m_climbing_rating_min = variant_hash[QLatin1String("climbing_rating_min")].toString();
  m_climbing_styles = variant_hash[QLatin1String("climbing_styles")].toStringList();
  m_custodianship = variant_hash[QLatin1String("custodianship")].toString();
  m_elevation = variant_hash[QLatin1String("elevation")].toInt();
  m_elevation_min = variant_hash[QLatin1String("elevation_min")].toInt();
  m_equipment_ratings = variant_hash[QLatin1String("equipment_ratings")].toStringList();
  m_exposition_rating = variant_hash[QLatin1String("exposition_rating")].toString();
  m_gas_unstaffed = variant_hash[QLatin1String("gas_unstaffed")].toBool();
  m_ground_types = variant_hash[QLatin1String("ground_types")].toStringList();
  m_heating_unstaffed = variant_hash[QLatin1String("heating_unstaffed")].toBool();
  m_height_max = variant_hash[QLatin1String("height_max")].toInt();
  m_height_median = variant_hash[QLatin1String("height_median")].toInt();
  m_height_min = variant_hash[QLatin1String("height_min")].toInt();
  m_length = variant_hash[QLatin1String("length")].toInt();
  m_lift_access = variant_hash[QLatin1String("lift_access")].toBool();
  m_maps_info = variant_hash[QLatin1String("maps_info")].toString();
  m_matress_unstaffed = variant_hash[QLatin1String("matress_unstaffed")].toBool();
  m_orientations = variant_hash[QLatin1String("orientations")].toStringList();
  m_paragliding_rating = variant_hash[QLatin1String("paragliding_rating")].toChar();
  m_parking_fee = variant_hash[QLatin1String("parking_fee")].toString();
  m_phone = variant_hash[QLatin1String("phone")].toString();
  m_phone_custodian = variant_hash[QLatin1String("phone_custodian")].toString();
  m_product_types = variant_hash[QLatin1String("product_types")].toStringList();
  m_prominence = variant_hash[QLatin1String("prominence")].toInt();
  m_public_transportation_rating = variant_hash[QLatin1String("public_transportation_rating")].toString();
  m_public_transportation_types = variant_hash[QLatin1String("public_transportation_types")].toStringList();
  m_rain_proof = variant_hash[QLatin1String("rain_proof")].toString();
  m_rock_types = variant_hash[QLatin1String("rock_types")].toStringList();
  m_routes_quantity = variant_hash[QLatin1String("routes_quantity")].toInt();
  m_slackline_length_max = variant_hash[QLatin1String("slackline_length_max")].toInt();
  m_slackline_length_min = variant_hash[QLatin1String("slackline_length_min")].toInt();
  m_slackline_types = variant_hash[QLatin1String("slackline_types")].toStringList();
  m_slope = variant_hash[QLatin1String("slope")].toInt();
  m_snow_clearance_rating = variant_hash[QLatin1String("snow_clearance_rating")].toString();
  m_url = variant_hash[QLatin1String("url")].toString();
  m_waypoint_type = variant_hash[QLatin1String("waypoint_type")].toString();
  m_weather_station_types = variant_hash[QLatin1String("weather_station_types")].toStringList();
}

C2cWaypoints::C2cWaypoints(const QVariantList & variants)
 : C2cWaypoints()
{
  m_document_id = variants[0].toInt();
  m_access_time = variants[1].toString();
  m_best_periods = variants[2].toStringList();
  m_blanket_unstaffed = variants[3].toBool();
  m_capacity = variants[4].toInt();
  m_capacity_staffed = variants[5].toInt();
  m_children_proof = variants[6].toString();
  m_climbing_indoor_types = variants[7].toStringList();
  m_climbing_outdoor_types = variants[8].toStringList();
  m_climbing_rating_max = variants[9].toString();
  m_climbing_rating_median = variants[10].toString();
  m_climbing_rating_min = variants[11].toString();
  m_climbing_styles = variants[12].toStringList();
  m_custodianship = variants[13].toString();
  m_elevation = variants[14].toInt();
  m_elevation_min = variants[15].toInt();
  m_equipment_ratings = variants[16].toStringList();
  m_exposition_rating = variants[17].toString();
  m_gas_unstaffed = variants[18].toBool();
  m_ground_types = variants[19].toStringList();
  m_heating_unstaffed = variants[20].toBool();
  m_height_max = variants[21].toInt();
  m_height_median = variants[22].toInt();
  m_height_min = variants[23].toInt();
  m_length = variants[24].toInt();
  m_lift_access = variants[25].toBool();
  m_maps_info = variants[26].toString();
  m_matress_unstaffed = variants[27].toBool();
  m_orientations = variants[28].toStringList();
  m_paragliding_rating = variants[29].toChar();
  m_parking_fee = variants[30].toString();
  m_phone = variants[31].toString();
  m_phone_custodian = variants[32].toString();
  m_product_types = variants[33].toStringList();
  m_prominence = variants[34].toInt();
  m_public_transportation_rating = variants[35].toString();
  m_public_transportation_types = variants[36].toStringList();
  m_rain_proof = variants[37].toString();
  m_rock_types = variants[38].toStringList();
  m_routes_quantity = variants[39].toInt();
  m_slackline_length_max = variants[40].toInt();
  m_slackline_length_min = variants[41].toInt();
  m_slackline_types = variants[42].toStringList();
  m_slope = variants[43].toInt();
  m_snow_clearance_rating = variants[44].toString();
  m_url = variants[45].toString();
  m_waypoint_type = variants[46].toString();
  m_weather_station_types = variants[47].toStringList();
}

C2cWaypoints::C2cWaypoints(const QSqlRecord & record)
 : QoRow<C2cWaypointsSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_access_time = record.value(1).toString();
  m_best_periods = record.value(2).toStringList();
  m_blanket_unstaffed = record.value(3).toBool();
  m_capacity = record.value(4).toInt();
  m_capacity_staffed = record.value(5).toInt();
  m_children_proof = record.value(6).toString();
  m_climbing_indoor_types = record.value(7).toStringList();
  m_climbing_outdoor_types = record.value(8).toStringList();
  m_climbing_rating_max = record.value(9).toString();
  m_climbing_rating_median = record.value(10).toString();
  m_climbing_rating_min = record.value(11).toString();
  m_climbing_styles = record.value(12).toStringList();
  m_custodianship = record.value(13).toString();
  m_elevation = record.value(14).toInt();
  m_elevation_min = record.value(15).toInt();
  m_equipment_ratings = record.value(16).toStringList();
  m_exposition_rating = record.value(17).toString();
  m_gas_unstaffed = record.value(18).toBool();
  m_ground_types = record.value(19).toStringList();
  m_heating_unstaffed = record.value(20).toBool();
  m_height_max = record.value(21).toInt();
  m_height_median = record.value(22).toInt();
  m_height_min = record.value(23).toInt();
  m_length = record.value(24).toInt();
  m_lift_access = record.value(25).toBool();
  m_maps_info = record.value(26).toString();
  m_matress_unstaffed = record.value(27).toBool();
  m_orientations = record.value(28).toStringList();
  m_paragliding_rating = record.value(29).toChar();
  m_parking_fee = record.value(30).toString();
  m_phone = record.value(31).toString();
  m_phone_custodian = record.value(32).toString();
  m_product_types = record.value(33).toStringList();
  m_prominence = record.value(34).toInt();
  m_public_transportation_rating = record.value(35).toString();
  m_public_transportation_types = record.value(36).toStringList();
  m_rain_proof = record.value(37).toString();
  m_rock_types = record.value(38).toStringList();
  m_routes_quantity = record.value(39).toInt();
  m_slackline_length_max = record.value(40).toInt();
  m_slackline_length_min = record.value(41).toInt();
  m_slackline_types = record.value(42).toStringList();
  m_slope = record.value(43).toInt();
  m_snow_clearance_rating = record.value(44).toString();
  m_url = record.value(45).toString();
  m_waypoint_type = record.value(46).toString();
  m_weather_station_types = record.value(47).toStringList();
}

C2cWaypoints::C2cWaypoints(const QSqlQuery & query, int offset)
 : QoRow<C2cWaypointsSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_access_time = query.value(offset++).toString();
  m_best_periods = query.value(offset++).toStringList();
  m_blanket_unstaffed = query.value(offset++).toBool();
  m_capacity = query.value(offset++).toInt();
  m_capacity_staffed = query.value(offset++).toInt();
  m_children_proof = query.value(offset++).toString();
  m_climbing_indoor_types = query.value(offset++).toStringList();
  m_climbing_outdoor_types = query.value(offset++).toStringList();
  m_climbing_rating_max = query.value(offset++).toString();
  m_climbing_rating_median = query.value(offset++).toString();
  m_climbing_rating_min = query.value(offset++).toString();
  m_climbing_styles = query.value(offset++).toStringList();
  m_custodianship = query.value(offset++).toString();
  m_elevation = query.value(offset++).toInt();
  m_elevation_min = query.value(offset++).toInt();
  m_equipment_ratings = query.value(offset++).toStringList();
  m_exposition_rating = query.value(offset++).toString();
  m_gas_unstaffed = query.value(offset++).toBool();
  m_ground_types = query.value(offset++).toStringList();
  m_heating_unstaffed = query.value(offset++).toBool();
  m_height_max = query.value(offset++).toInt();
  m_height_median = query.value(offset++).toInt();
  m_height_min = query.value(offset++).toInt();
  m_length = query.value(offset++).toInt();
  m_lift_access = query.value(offset++).toBool();
  m_maps_info = query.value(offset++).toString();
  m_matress_unstaffed = query.value(offset++).toBool();
  m_orientations = query.value(offset++).toStringList();
  m_paragliding_rating = query.value(offset++).toChar();
  m_parking_fee = query.value(offset++).toString();
  m_phone = query.value(offset++).toString();
  m_phone_custodian = query.value(offset++).toString();
  m_product_types = query.value(offset++).toStringList();
  m_prominence = query.value(offset++).toInt();
  m_public_transportation_rating = query.value(offset++).toString();
  m_public_transportation_types = query.value(offset++).toStringList();
  m_rain_proof = query.value(offset++).toString();
  m_rock_types = query.value(offset++).toStringList();
  m_routes_quantity = query.value(offset++).toInt();
  m_slackline_length_max = query.value(offset++).toInt();
  m_slackline_length_min = query.value(offset++).toInt();
  m_slackline_types = query.value(offset++).toStringList();
  m_slope = query.value(offset++).toInt();
  m_snow_clearance_rating = query.value(offset++).toString();
  m_url = query.value(offset++).toString();
  m_waypoint_type = query.value(offset++).toString();
  m_weather_station_types = query.value(offset).toStringList();
}

C2cWaypoints::~C2cWaypoints()
{
// qATInfo() << "--- Delete" << "C2cWaypoints" << *this;
}

// bit array ?
C2cWaypoints &
C2cWaypoints::operator=(const C2cWaypoints & other)
{
  if (this != &other) {
    QoRow<C2cWaypointsSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_access_time = other.m_access_time;
    m_best_periods = other.m_best_periods;
    m_blanket_unstaffed = other.m_blanket_unstaffed;
    m_capacity = other.m_capacity;
    m_capacity_staffed = other.m_capacity_staffed;
    m_children_proof = other.m_children_proof;
    m_climbing_indoor_types = other.m_climbing_indoor_types;
    m_climbing_outdoor_types = other.m_climbing_outdoor_types;
    m_climbing_rating_max = other.m_climbing_rating_max;
    m_climbing_rating_median = other.m_climbing_rating_median;
    m_climbing_rating_min = other.m_climbing_rating_min;
    m_climbing_styles = other.m_climbing_styles;
    m_custodianship = other.m_custodianship;
    m_elevation = other.m_elevation;
    m_elevation_min = other.m_elevation_min;
    m_equipment_ratings = other.m_equipment_ratings;
    m_exposition_rating = other.m_exposition_rating;
    m_gas_unstaffed = other.m_gas_unstaffed;
    m_ground_types = other.m_ground_types;
    m_heating_unstaffed = other.m_heating_unstaffed;
    m_height_max = other.m_height_max;
    m_height_median = other.m_height_median;
    m_height_min = other.m_height_min;
    m_length = other.m_length;
    m_lift_access = other.m_lift_access;
    m_maps_info = other.m_maps_info;
    m_matress_unstaffed = other.m_matress_unstaffed;
    m_orientations = other.m_orientations;
    m_paragliding_rating = other.m_paragliding_rating;
    m_parking_fee = other.m_parking_fee;
    m_phone = other.m_phone;
    m_phone_custodian = other.m_phone_custodian;
    m_product_types = other.m_product_types;
    m_prominence = other.m_prominence;
    m_public_transportation_rating = other.m_public_transportation_rating;
    m_public_transportation_types = other.m_public_transportation_types;
    m_rain_proof = other.m_rain_proof;
    m_rock_types = other.m_rock_types;
    m_routes_quantity = other.m_routes_quantity;
    m_slackline_length_max = other.m_slackline_length_max;
    m_slackline_length_min = other.m_slackline_length_min;
    m_slackline_types = other.m_slackline_types;
    m_slope = other.m_slope;
    m_snow_clearance_rating = other.m_snow_clearance_rating;
    m_url = other.m_url;
    m_waypoint_type = other.m_waypoint_type;
    m_weather_station_types = other.m_weather_station_types;
  }

  return *this;
}

// bit array ?
bool
C2cWaypoints::operator==(const C2cWaypoints & other) const
{
  if (not QoRow<C2cWaypointsSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_access_time != other.m_access_time)
    return false;
  if (m_best_periods != other.m_best_periods)
    return false;
  if (m_blanket_unstaffed != other.m_blanket_unstaffed)
    return false;
  if (m_capacity != other.m_capacity)
    return false;
  if (m_capacity_staffed != other.m_capacity_staffed)
    return false;
  if (m_children_proof != other.m_children_proof)
    return false;
  if (m_climbing_indoor_types != other.m_climbing_indoor_types)
    return false;
  if (m_climbing_outdoor_types != other.m_climbing_outdoor_types)
    return false;
  if (m_climbing_rating_max != other.m_climbing_rating_max)
    return false;
  if (m_climbing_rating_median != other.m_climbing_rating_median)
    return false;
  if (m_climbing_rating_min != other.m_climbing_rating_min)
    return false;
  if (m_climbing_styles != other.m_climbing_styles)
    return false;
  if (m_custodianship != other.m_custodianship)
    return false;
  if (m_elevation != other.m_elevation)
    return false;
  if (m_elevation_min != other.m_elevation_min)
    return false;
  if (m_equipment_ratings != other.m_equipment_ratings)
    return false;
  if (m_exposition_rating != other.m_exposition_rating)
    return false;
  if (m_gas_unstaffed != other.m_gas_unstaffed)
    return false;
  if (m_ground_types != other.m_ground_types)
    return false;
  if (m_heating_unstaffed != other.m_heating_unstaffed)
    return false;
  if (m_height_max != other.m_height_max)
    return false;
  if (m_height_median != other.m_height_median)
    return false;
  if (m_height_min != other.m_height_min)
    return false;
  if (m_length != other.m_length)
    return false;
  if (m_lift_access != other.m_lift_access)
    return false;
  if (m_maps_info != other.m_maps_info)
    return false;
  if (m_matress_unstaffed != other.m_matress_unstaffed)
    return false;
  if (m_orientations != other.m_orientations)
    return false;
  if (m_paragliding_rating != other.m_paragliding_rating)
    return false;
  if (m_parking_fee != other.m_parking_fee)
    return false;
  if (m_phone != other.m_phone)
    return false;
  if (m_phone_custodian != other.m_phone_custodian)
    return false;
  if (m_product_types != other.m_product_types)
    return false;
  if (m_prominence != other.m_prominence)
    return false;
  if (m_public_transportation_rating != other.m_public_transportation_rating)
    return false;
  if (m_public_transportation_types != other.m_public_transportation_types)
    return false;
  if (m_rain_proof != other.m_rain_proof)
    return false;
  if (m_rock_types != other.m_rock_types)
    return false;
  if (m_routes_quantity != other.m_routes_quantity)
    return false;
  if (m_slackline_length_max != other.m_slackline_length_max)
    return false;
  if (m_slackline_length_min != other.m_slackline_length_min)
    return false;
  if (m_slackline_types != other.m_slackline_types)
    return false;
  if (m_slope != other.m_slope)
    return false;
  if (m_snow_clearance_rating != other.m_snow_clearance_rating)
    return false;
  if (m_url != other.m_url)
    return false;
  if (m_waypoint_type != other.m_waypoint_type)
    return false;
  if (m_weather_station_types != other.m_weather_station_types)
    return false;

  return true;
}

void
C2cWaypoints::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_access_time(const QString & value)
{
  if (m_access_time != value) {
    m_access_time = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACCESS_TIME);

    emit access_timeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_best_periods(const QStringList & value)
{
  if (m_best_periods != value) {
    m_best_periods = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::BEST_PERIODS);

    emit best_periodsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_blanket_unstaffed(bool value)
{
  if (m_blanket_unstaffed != value) {
    m_blanket_unstaffed = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::BLANKET_UNSTAFFED);

    emit blanket_unstaffedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_capacity(int value)
{
  if (m_capacity != value) {
    m_capacity = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CAPACITY);

    emit capacityChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_capacity_staffed(int value)
{
  if (m_capacity_staffed != value) {
    m_capacity_staffed = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CAPACITY_STAFFED);

    emit capacity_staffedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_children_proof(const QString & value)
{
  if (m_children_proof != value) {
    m_children_proof = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CHILDREN_PROOF);

    emit children_proofChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_climbing_indoor_types(const QStringList & value)
{
  if (m_climbing_indoor_types != value) {
    m_climbing_indoor_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_INDOOR_TYPES);

    emit climbing_indoor_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_climbing_outdoor_types(const QStringList & value)
{
  if (m_climbing_outdoor_types != value) {
    m_climbing_outdoor_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_OUTDOOR_TYPES);

    emit climbing_outdoor_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_climbing_rating_max(const QString & value)
{
  if (m_climbing_rating_max != value) {
    m_climbing_rating_max = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_RATING_MAX);

    emit climbing_rating_maxChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_climbing_rating_median(const QString & value)
{
  if (m_climbing_rating_median != value) {
    m_climbing_rating_median = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_RATING_MEDIAN);

    emit climbing_rating_medianChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_climbing_rating_min(const QString & value)
{
  if (m_climbing_rating_min != value) {
    m_climbing_rating_min = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_RATING_MIN);

    emit climbing_rating_minChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_climbing_styles(const QStringList & value)
{
  if (m_climbing_styles != value) {
    m_climbing_styles = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CLIMBING_STYLES);

    emit climbing_stylesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_custodianship(const QString & value)
{
  if (m_custodianship != value) {
    m_custodianship = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CUSTODIANSHIP);

    emit custodianshipChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_elevation(int value)
{
  if (m_elevation != value) {
    m_elevation = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION);

    emit elevationChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_elevation_min(int value)
{
  if (m_elevation_min != value) {
    m_elevation_min = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION_MIN);

    emit elevation_minChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_equipment_ratings(const QStringList & value)
{
  if (m_equipment_ratings != value) {
    m_equipment_ratings = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EQUIPMENT_RATINGS);

    emit equipment_ratingsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_exposition_rating(const QString & value)
{
  if (m_exposition_rating != value) {
    m_exposition_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EXPOSITION_RATING);

    emit exposition_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_gas_unstaffed(bool value)
{
  if (m_gas_unstaffed != value) {
    m_gas_unstaffed = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GAS_UNSTAFFED);

    emit gas_unstaffedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_ground_types(const QStringList & value)
{
  if (m_ground_types != value) {
    m_ground_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GROUND_TYPES);

    emit ground_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_heating_unstaffed(bool value)
{
  if (m_heating_unstaffed != value) {
    m_heating_unstaffed = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEATING_UNSTAFFED);

    emit heating_unstaffedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_height_max(int value)
{
  if (m_height_max != value) {
    m_height_max = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_MAX);

    emit height_maxChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_height_median(int value)
{
  if (m_height_median != value) {
    m_height_median = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_MEDIAN);

    emit height_medianChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_height_min(int value)
{
  if (m_height_min != value) {
    m_height_min = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::HEIGHT_MIN);

    emit height_minChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_length(int value)
{
  if (m_length != value) {
    m_length = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LENGTH);

    emit lengthChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_lift_access(bool value)
{
  if (m_lift_access != value) {
    m_lift_access = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::LIFT_ACCESS);

    emit lift_accessChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_maps_info(const QString & value)
{
  if (m_maps_info != value) {
    m_maps_info = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MAPS_INFO);

    emit maps_infoChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_matress_unstaffed(bool value)
{
  if (m_matress_unstaffed != value) {
    m_matress_unstaffed = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MATRESS_UNSTAFFED);

    emit matress_unstaffedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_orientations(const QStringList & value)
{
  if (m_orientations != value) {
    m_orientations = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ORIENTATIONS);

    emit orientationsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_paragliding_rating(const QChar & value)
{
  if (m_paragliding_rating != value) {
    m_paragliding_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARAGLIDING_RATING);

    emit paragliding_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_parking_fee(const QString & value)
{
  if (m_parking_fee != value) {
    m_parking_fee = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PARKING_FEE);

    emit parking_feeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_phone(const QString & value)
{
  if (m_phone != value) {
    m_phone = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PHONE);

    emit phoneChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_phone_custodian(const QString & value)
{
  if (m_phone_custodian != value) {
    m_phone_custodian = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PHONE_CUSTODIAN);

    emit phone_custodianChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_product_types(const QStringList & value)
{
  if (m_product_types != value) {
    m_product_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PRODUCT_TYPES);

    emit product_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_prominence(int value)
{
  if (m_prominence != value) {
    m_prominence = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PROMINENCE);

    emit prominenceChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_public_transportation_rating(const QString & value)
{
  if (m_public_transportation_rating != value) {
    m_public_transportation_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PUBLIC_TRANSPORTATION_RATING);

    emit public_transportation_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_public_transportation_types(const QStringList & value)
{
  if (m_public_transportation_types != value) {
    m_public_transportation_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PUBLIC_TRANSPORTATION_TYPES);

    emit public_transportation_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_rain_proof(const QString & value)
{
  if (m_rain_proof != value) {
    m_rain_proof = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::RAIN_PROOF);

    emit rain_proofChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_rock_types(const QStringList & value)
{
  if (m_rock_types != value) {
    m_rock_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROCK_TYPES);

    emit rock_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_routes_quantity(int value)
{
  if (m_routes_quantity != value) {
    m_routes_quantity = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROUTES_QUANTITY);

    emit routes_quantityChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_slackline_length_max(int value)
{
  if (m_slackline_length_max != value) {
    m_slackline_length_max = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_LENGTH_MAX);

    emit slackline_length_maxChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_slackline_length_min(int value)
{
  if (m_slackline_length_min != value) {
    m_slackline_length_min = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_LENGTH_MIN);

    emit slackline_length_minChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_slackline_types(const QStringList & value)
{
  if (m_slackline_types != value) {
    m_slackline_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLACKLINE_TYPES);

    emit slackline_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_slope(int value)
{
  if (m_slope != value) {
    m_slope = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SLOPE);

    emit slopeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_snow_clearance_rating(const QString & value)
{
  if (m_snow_clearance_rating != value) {
    m_snow_clearance_rating = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SNOW_CLEARANCE_RATING);

    emit snow_clearance_ratingChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_url(const QString & value)
{
  if (m_url != value) {
    m_url = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::URL);

    emit urlChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_waypoint_type(const QString & value)
{
  if (m_waypoint_type != value) {
    m_waypoint_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::WAYPOINT_TYPE);

    emit waypoint_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypoints::set_weather_station_types(const QStringList & value)
{
  if (m_weather_station_types != value) {
    m_weather_station_types = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::WEATHER_STATION_TYPES);

    emit weather_station_typesChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cWaypoints::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_access_time_modified())
      json_object.insert(QLatin1String("access_time"), QJsonValue(m_access_time));
    if (is_best_periods_modified())
      json_object.insert(QLatin1String("best_periods"), orm_type_conversion::dump_string_list(m_best_periods));
    if (is_blanket_unstaffed_modified())
      json_object.insert(QLatin1String("blanket_unstaffed"), QJsonValue(m_blanket_unstaffed));
    if (is_capacity_modified())
      json_object.insert(QLatin1String("capacity"), QJsonValue(m_capacity));
    if (is_capacity_staffed_modified())
      json_object.insert(QLatin1String("capacity_staffed"), QJsonValue(m_capacity_staffed));
    if (is_children_proof_modified())
      json_object.insert(QLatin1String("children_proof"), QJsonValue(m_children_proof));
    if (is_climbing_indoor_types_modified())
      json_object.insert(QLatin1String("climbing_indoor_types"), orm_type_conversion::dump_string_list(m_climbing_indoor_types));
    if (is_climbing_outdoor_types_modified())
      json_object.insert(QLatin1String("climbing_outdoor_types"), orm_type_conversion::dump_string_list(m_climbing_outdoor_types));
    if (is_climbing_rating_max_modified())
      json_object.insert(QLatin1String("climbing_rating_max"), QJsonValue(m_climbing_rating_max));
    if (is_climbing_rating_median_modified())
      json_object.insert(QLatin1String("climbing_rating_median"), QJsonValue(m_climbing_rating_median));
    if (is_climbing_rating_min_modified())
      json_object.insert(QLatin1String("climbing_rating_min"), QJsonValue(m_climbing_rating_min));
    if (is_climbing_styles_modified())
      json_object.insert(QLatin1String("climbing_styles"), orm_type_conversion::dump_string_list(m_climbing_styles));
    if (is_custodianship_modified())
      json_object.insert(QLatin1String("custodianship"), QJsonValue(m_custodianship));
    if (is_elevation_modified())
      json_object.insert(QLatin1String("elevation"), QJsonValue(m_elevation));
    if (is_elevation_min_modified())
      json_object.insert(QLatin1String("elevation_min"), QJsonValue(m_elevation_min));
    if (is_equipment_ratings_modified())
      json_object.insert(QLatin1String("equipment_ratings"), orm_type_conversion::dump_string_list(m_equipment_ratings));
    if (is_exposition_rating_modified())
      json_object.insert(QLatin1String("exposition_rating"), QJsonValue(m_exposition_rating));
    if (is_gas_unstaffed_modified())
      json_object.insert(QLatin1String("gas_unstaffed"), QJsonValue(m_gas_unstaffed));
    if (is_ground_types_modified())
      json_object.insert(QLatin1String("ground_types"), orm_type_conversion::dump_string_list(m_ground_types));
    if (is_heating_unstaffed_modified())
      json_object.insert(QLatin1String("heating_unstaffed"), QJsonValue(m_heating_unstaffed));
    if (is_height_max_modified())
      json_object.insert(QLatin1String("height_max"), QJsonValue(m_height_max));
    if (is_height_median_modified())
      json_object.insert(QLatin1String("height_median"), QJsonValue(m_height_median));
    if (is_height_min_modified())
      json_object.insert(QLatin1String("height_min"), QJsonValue(m_height_min));
    if (is_length_modified())
      json_object.insert(QLatin1String("length"), QJsonValue(m_length));
    if (is_lift_access_modified())
      json_object.insert(QLatin1String("lift_access"), QJsonValue(m_lift_access));
    if (is_maps_info_modified())
      json_object.insert(QLatin1String("maps_info"), QJsonValue(m_maps_info));
    if (is_matress_unstaffed_modified())
      json_object.insert(QLatin1String("matress_unstaffed"), QJsonValue(m_matress_unstaffed));
    if (is_orientations_modified())
      json_object.insert(QLatin1String("orientations"), orm_type_conversion::dump_string_list(m_orientations));
    if (is_paragliding_rating_modified())
      json_object.insert(QLatin1String("paragliding_rating"), QJsonValue(m_paragliding_rating));
    if (is_parking_fee_modified())
      json_object.insert(QLatin1String("parking_fee"), QJsonValue(m_parking_fee));
    if (is_phone_modified())
      json_object.insert(QLatin1String("phone"), QJsonValue(m_phone));
    if (is_phone_custodian_modified())
      json_object.insert(QLatin1String("phone_custodian"), QJsonValue(m_phone_custodian));
    if (is_product_types_modified())
      json_object.insert(QLatin1String("product_types"), orm_type_conversion::dump_string_list(m_product_types));
    if (is_prominence_modified())
      json_object.insert(QLatin1String("prominence"), QJsonValue(m_prominence));
    if (is_public_transportation_rating_modified())
      json_object.insert(QLatin1String("public_transportation_rating"), QJsonValue(m_public_transportation_rating));
    if (is_public_transportation_types_modified())
      json_object.insert(QLatin1String("public_transportation_types"), orm_type_conversion::dump_string_list(m_public_transportation_types));
    if (is_rain_proof_modified())
      json_object.insert(QLatin1String("rain_proof"), QJsonValue(m_rain_proof));
    if (is_rock_types_modified())
      json_object.insert(QLatin1String("rock_types"), orm_type_conversion::dump_string_list(m_rock_types));
    if (is_routes_quantity_modified())
      json_object.insert(QLatin1String("routes_quantity"), QJsonValue(m_routes_quantity));
    if (is_slackline_length_max_modified())
      json_object.insert(QLatin1String("slackline_length_max"), QJsonValue(m_slackline_length_max));
    if (is_slackline_length_min_modified())
      json_object.insert(QLatin1String("slackline_length_min"), QJsonValue(m_slackline_length_min));
    if (is_slackline_types_modified())
      json_object.insert(QLatin1String("slackline_types"), orm_type_conversion::dump_string_list(m_slackline_types));
    if (is_slope_modified())
      json_object.insert(QLatin1String("slope"), QJsonValue(m_slope));
    if (is_snow_clearance_rating_modified())
      json_object.insert(QLatin1String("snow_clearance_rating"), QJsonValue(m_snow_clearance_rating));
    if (is_url_modified())
      json_object.insert(QLatin1String("url"), QJsonValue(m_url));
    if (is_waypoint_type_modified())
      json_object.insert(QLatin1String("waypoint_type"), QJsonValue(m_waypoint_type));
    if (is_weather_station_types_modified())
      json_object.insert(QLatin1String("weather_station_types"), orm_type_conversion::dump_string_list(m_weather_station_types));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("access_time"), QJsonValue(m_access_time));
    json_object.insert(QLatin1String("best_periods"), orm_type_conversion::dump_string_list(m_best_periods));
    json_object.insert(QLatin1String("blanket_unstaffed"), QJsonValue(m_blanket_unstaffed));
    json_object.insert(QLatin1String("capacity"), QJsonValue(m_capacity));
    json_object.insert(QLatin1String("capacity_staffed"), QJsonValue(m_capacity_staffed));
    json_object.insert(QLatin1String("children_proof"), QJsonValue(m_children_proof));
    json_object.insert(QLatin1String("climbing_indoor_types"), orm_type_conversion::dump_string_list(m_climbing_indoor_types));
    json_object.insert(QLatin1String("climbing_outdoor_types"), orm_type_conversion::dump_string_list(m_climbing_outdoor_types));
    json_object.insert(QLatin1String("climbing_rating_max"), QJsonValue(m_climbing_rating_max));
    json_object.insert(QLatin1String("climbing_rating_median"), QJsonValue(m_climbing_rating_median));
    json_object.insert(QLatin1String("climbing_rating_min"), QJsonValue(m_climbing_rating_min));
    json_object.insert(QLatin1String("climbing_styles"), orm_type_conversion::dump_string_list(m_climbing_styles));
    json_object.insert(QLatin1String("custodianship"), QJsonValue(m_custodianship));
    json_object.insert(QLatin1String("elevation"), QJsonValue(m_elevation));
    json_object.insert(QLatin1String("elevation_min"), QJsonValue(m_elevation_min));
    json_object.insert(QLatin1String("equipment_ratings"), orm_type_conversion::dump_string_list(m_equipment_ratings));
    json_object.insert(QLatin1String("exposition_rating"), QJsonValue(m_exposition_rating));
    json_object.insert(QLatin1String("gas_unstaffed"), QJsonValue(m_gas_unstaffed));
    json_object.insert(QLatin1String("ground_types"), orm_type_conversion::dump_string_list(m_ground_types));
    json_object.insert(QLatin1String("heating_unstaffed"), QJsonValue(m_heating_unstaffed));
    json_object.insert(QLatin1String("height_max"), QJsonValue(m_height_max));
    json_object.insert(QLatin1String("height_median"), QJsonValue(m_height_median));
    json_object.insert(QLatin1String("height_min"), QJsonValue(m_height_min));
    json_object.insert(QLatin1String("length"), QJsonValue(m_length));
    json_object.insert(QLatin1String("lift_access"), QJsonValue(m_lift_access));
    json_object.insert(QLatin1String("maps_info"), QJsonValue(m_maps_info));
    json_object.insert(QLatin1String("matress_unstaffed"), QJsonValue(m_matress_unstaffed));
    json_object.insert(QLatin1String("orientations"), orm_type_conversion::dump_string_list(m_orientations));
    json_object.insert(QLatin1String("paragliding_rating"), QJsonValue(m_paragliding_rating));
    json_object.insert(QLatin1String("parking_fee"), QJsonValue(m_parking_fee));
    json_object.insert(QLatin1String("phone"), QJsonValue(m_phone));
    json_object.insert(QLatin1String("phone_custodian"), QJsonValue(m_phone_custodian));
    json_object.insert(QLatin1String("product_types"), orm_type_conversion::dump_string_list(m_product_types));
    json_object.insert(QLatin1String("prominence"), QJsonValue(m_prominence));
    json_object.insert(QLatin1String("public_transportation_rating"), QJsonValue(m_public_transportation_rating));
    json_object.insert(QLatin1String("public_transportation_types"), orm_type_conversion::dump_string_list(m_public_transportation_types));
    json_object.insert(QLatin1String("rain_proof"), QJsonValue(m_rain_proof));
    json_object.insert(QLatin1String("rock_types"), orm_type_conversion::dump_string_list(m_rock_types));
    json_object.insert(QLatin1String("routes_quantity"), QJsonValue(m_routes_quantity));
    json_object.insert(QLatin1String("slackline_length_max"), QJsonValue(m_slackline_length_max));
    json_object.insert(QLatin1String("slackline_length_min"), QJsonValue(m_slackline_length_min));
    json_object.insert(QLatin1String("slackline_types"), orm_type_conversion::dump_string_list(m_slackline_types));
    json_object.insert(QLatin1String("slope"), QJsonValue(m_slope));
    json_object.insert(QLatin1String("snow_clearance_rating"), QJsonValue(m_snow_clearance_rating));
    json_object.insert(QLatin1String("url"), QJsonValue(m_url));
    json_object.insert(QLatin1String("waypoint_type"), QJsonValue(m_waypoint_type));
    json_object.insert(QLatin1String("weather_station_types"), orm_type_conversion::dump_string_list(m_weather_station_types));
  }

  return json_object;
}

QVariantHash
C2cWaypoints::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_access_time_modified())
      variant_hash[QLatin1String("access_time")] = m_access_time;
    if (is_best_periods_modified())
      variant_hash[QLatin1String("best_periods")] = m_best_periods;
    if (is_blanket_unstaffed_modified())
      variant_hash[QLatin1String("blanket_unstaffed")] = m_blanket_unstaffed;
    if (is_capacity_modified())
      variant_hash[QLatin1String("capacity")] = m_capacity;
    if (is_capacity_staffed_modified())
      variant_hash[QLatin1String("capacity_staffed")] = m_capacity_staffed;
    if (is_children_proof_modified())
      variant_hash[QLatin1String("children_proof")] = m_children_proof;
    if (is_climbing_indoor_types_modified())
      variant_hash[QLatin1String("climbing_indoor_types")] = m_climbing_indoor_types;
    if (is_climbing_outdoor_types_modified())
      variant_hash[QLatin1String("climbing_outdoor_types")] = m_climbing_outdoor_types;
    if (is_climbing_rating_max_modified())
      variant_hash[QLatin1String("climbing_rating_max")] = m_climbing_rating_max;
    if (is_climbing_rating_median_modified())
      variant_hash[QLatin1String("climbing_rating_median")] = m_climbing_rating_median;
    if (is_climbing_rating_min_modified())
      variant_hash[QLatin1String("climbing_rating_min")] = m_climbing_rating_min;
    if (is_climbing_styles_modified())
      variant_hash[QLatin1String("climbing_styles")] = m_climbing_styles;
    if (is_custodianship_modified())
      variant_hash[QLatin1String("custodianship")] = m_custodianship;
    if (is_elevation_modified())
      variant_hash[QLatin1String("elevation")] = m_elevation;
    if (is_elevation_min_modified())
      variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    if (is_equipment_ratings_modified())
      variant_hash[QLatin1String("equipment_ratings")] = m_equipment_ratings;
    if (is_exposition_rating_modified())
      variant_hash[QLatin1String("exposition_rating")] = m_exposition_rating;
    if (is_gas_unstaffed_modified())
      variant_hash[QLatin1String("gas_unstaffed")] = m_gas_unstaffed;
    if (is_ground_types_modified())
      variant_hash[QLatin1String("ground_types")] = m_ground_types;
    if (is_heating_unstaffed_modified())
      variant_hash[QLatin1String("heating_unstaffed")] = m_heating_unstaffed;
    if (is_height_max_modified())
      variant_hash[QLatin1String("height_max")] = m_height_max;
    if (is_height_median_modified())
      variant_hash[QLatin1String("height_median")] = m_height_median;
    if (is_height_min_modified())
      variant_hash[QLatin1String("height_min")] = m_height_min;
    if (is_length_modified())
      variant_hash[QLatin1String("length")] = m_length;
    if (is_lift_access_modified())
      variant_hash[QLatin1String("lift_access")] = m_lift_access;
    if (is_maps_info_modified())
      variant_hash[QLatin1String("maps_info")] = m_maps_info;
    if (is_matress_unstaffed_modified())
      variant_hash[QLatin1String("matress_unstaffed")] = m_matress_unstaffed;
    if (is_orientations_modified())
      variant_hash[QLatin1String("orientations")] = m_orientations;
    if (is_paragliding_rating_modified())
      variant_hash[QLatin1String("paragliding_rating")] = m_paragliding_rating;
    if (is_parking_fee_modified())
      variant_hash[QLatin1String("parking_fee")] = m_parking_fee;
    if (is_phone_modified())
      variant_hash[QLatin1String("phone")] = m_phone;
    if (is_phone_custodian_modified())
      variant_hash[QLatin1String("phone_custodian")] = m_phone_custodian;
    if (is_product_types_modified())
      variant_hash[QLatin1String("product_types")] = m_product_types;
    if (is_prominence_modified())
      variant_hash[QLatin1String("prominence")] = m_prominence;
    if (is_public_transportation_rating_modified())
      variant_hash[QLatin1String("public_transportation_rating")] = m_public_transportation_rating;
    if (is_public_transportation_types_modified())
      variant_hash[QLatin1String("public_transportation_types")] = m_public_transportation_types;
    if (is_rain_proof_modified())
      variant_hash[QLatin1String("rain_proof")] = m_rain_proof;
    if (is_rock_types_modified())
      variant_hash[QLatin1String("rock_types")] = m_rock_types;
    if (is_routes_quantity_modified())
      variant_hash[QLatin1String("routes_quantity")] = m_routes_quantity;
    if (is_slackline_length_max_modified())
      variant_hash[QLatin1String("slackline_length_max")] = m_slackline_length_max;
    if (is_slackline_length_min_modified())
      variant_hash[QLatin1String("slackline_length_min")] = m_slackline_length_min;
    if (is_slackline_types_modified())
      variant_hash[QLatin1String("slackline_types")] = m_slackline_types;
    if (is_slope_modified())
      variant_hash[QLatin1String("slope")] = m_slope;
    if (is_snow_clearance_rating_modified())
      variant_hash[QLatin1String("snow_clearance_rating")] = m_snow_clearance_rating;
    if (is_url_modified())
      variant_hash[QLatin1String("url")] = m_url;
    if (is_waypoint_type_modified())
      variant_hash[QLatin1String("waypoint_type")] = m_waypoint_type;
    if (is_weather_station_types_modified())
      variant_hash[QLatin1String("weather_station_types")] = m_weather_station_types;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("access_time")] = m_access_time;
    variant_hash[QLatin1String("best_periods")] = m_best_periods;
    variant_hash[QLatin1String("blanket_unstaffed")] = m_blanket_unstaffed;
    variant_hash[QLatin1String("capacity")] = m_capacity;
    variant_hash[QLatin1String("capacity_staffed")] = m_capacity_staffed;
    variant_hash[QLatin1String("children_proof")] = m_children_proof;
    variant_hash[QLatin1String("climbing_indoor_types")] = m_climbing_indoor_types;
    variant_hash[QLatin1String("climbing_outdoor_types")] = m_climbing_outdoor_types;
    variant_hash[QLatin1String("climbing_rating_max")] = m_climbing_rating_max;
    variant_hash[QLatin1String("climbing_rating_median")] = m_climbing_rating_median;
    variant_hash[QLatin1String("climbing_rating_min")] = m_climbing_rating_min;
    variant_hash[QLatin1String("climbing_styles")] = m_climbing_styles;
    variant_hash[QLatin1String("custodianship")] = m_custodianship;
    variant_hash[QLatin1String("elevation")] = m_elevation;
    variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    variant_hash[QLatin1String("equipment_ratings")] = m_equipment_ratings;
    variant_hash[QLatin1String("exposition_rating")] = m_exposition_rating;
    variant_hash[QLatin1String("gas_unstaffed")] = m_gas_unstaffed;
    variant_hash[QLatin1String("ground_types")] = m_ground_types;
    variant_hash[QLatin1String("heating_unstaffed")] = m_heating_unstaffed;
    variant_hash[QLatin1String("height_max")] = m_height_max;
    variant_hash[QLatin1String("height_median")] = m_height_median;
    variant_hash[QLatin1String("height_min")] = m_height_min;
    variant_hash[QLatin1String("length")] = m_length;
    variant_hash[QLatin1String("lift_access")] = m_lift_access;
    variant_hash[QLatin1String("maps_info")] = m_maps_info;
    variant_hash[QLatin1String("matress_unstaffed")] = m_matress_unstaffed;
    variant_hash[QLatin1String("orientations")] = m_orientations;
    variant_hash[QLatin1String("paragliding_rating")] = m_paragliding_rating;
    variant_hash[QLatin1String("parking_fee")] = m_parking_fee;
    variant_hash[QLatin1String("phone")] = m_phone;
    variant_hash[QLatin1String("phone_custodian")] = m_phone_custodian;
    variant_hash[QLatin1String("product_types")] = m_product_types;
    variant_hash[QLatin1String("prominence")] = m_prominence;
    variant_hash[QLatin1String("public_transportation_rating")] = m_public_transportation_rating;
    variant_hash[QLatin1String("public_transportation_types")] = m_public_transportation_types;
    variant_hash[QLatin1String("rain_proof")] = m_rain_proof;
    variant_hash[QLatin1String("rock_types")] = m_rock_types;
    variant_hash[QLatin1String("routes_quantity")] = m_routes_quantity;
    variant_hash[QLatin1String("slackline_length_max")] = m_slackline_length_max;
    variant_hash[QLatin1String("slackline_length_min")] = m_slackline_length_min;
    variant_hash[QLatin1String("slackline_types")] = m_slackline_types;
    variant_hash[QLatin1String("slope")] = m_slope;
    variant_hash[QLatin1String("snow_clearance_rating")] = m_snow_clearance_rating;
    variant_hash[QLatin1String("url")] = m_url;
    variant_hash[QLatin1String("waypoint_type")] = m_waypoint_type;
    variant_hash[QLatin1String("weather_station_types")] = m_weather_station_types;
  }

  return variant_hash;
}

QVariantList
C2cWaypoints::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_access_time;
  variants << m_best_periods;
  variants << m_blanket_unstaffed;
  variants << m_capacity;
  variants << m_capacity_staffed;
  variants << m_children_proof;
  variants << m_climbing_indoor_types;
  variants << m_climbing_outdoor_types;
  variants << m_climbing_rating_max;
  variants << m_climbing_rating_median;
  variants << m_climbing_rating_min;
  variants << m_climbing_styles;
  variants << m_custodianship;
  variants << m_elevation;
  variants << m_elevation_min;
  variants << m_equipment_ratings;
  variants << m_exposition_rating;
  variants << m_gas_unstaffed;
  variants << m_ground_types;
  variants << m_heating_unstaffed;
  variants << m_height_max;
  variants << m_height_median;
  variants << m_height_min;
  variants << m_length;
  variants << m_lift_access;
  variants << m_maps_info;
  variants << m_matress_unstaffed;
  variants << m_orientations;
  variants << m_paragliding_rating;
  variants << m_parking_fee;
  variants << m_phone;
  variants << m_phone_custodian;
  variants << m_product_types;
  variants << m_prominence;
  variants << m_public_transportation_rating;
  variants << m_public_transportation_types;
  variants << m_rain_proof;
  variants << m_rock_types;
  variants << m_routes_quantity;
  variants << m_slackline_length_max;
  variants << m_slackline_length_min;
  variants << m_slackline_types;
  variants << m_slope;
  variants << m_snow_clearance_rating;
  variants << m_url;
  variants << m_waypoint_type;
  variants << m_weather_station_types;

  return variants;
}

QVariantHash
C2cWaypoints::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_access_time_modified())
      variant_hash[QLatin1String("access_time")] = m_access_time;
    if (is_best_periods_modified())
      variant_hash[QLatin1String("best_periods")] = m_best_periods;
    if (is_blanket_unstaffed_modified())
      variant_hash[QLatin1String("blanket_unstaffed")] = m_blanket_unstaffed;
    if (is_capacity_modified())
      variant_hash[QLatin1String("capacity")] = m_capacity;
    if (is_capacity_staffed_modified())
      variant_hash[QLatin1String("capacity_staffed")] = m_capacity_staffed;
    if (is_children_proof_modified())
      variant_hash[QLatin1String("children_proof")] = m_children_proof;
    if (is_climbing_indoor_types_modified())
      variant_hash[QLatin1String("climbing_indoor_types")] = m_climbing_indoor_types;
    if (is_climbing_outdoor_types_modified())
      variant_hash[QLatin1String("climbing_outdoor_types")] = m_climbing_outdoor_types;
    if (is_climbing_rating_max_modified())
      variant_hash[QLatin1String("climbing_rating_max")] = m_climbing_rating_max;
    if (is_climbing_rating_median_modified())
      variant_hash[QLatin1String("climbing_rating_median")] = m_climbing_rating_median;
    if (is_climbing_rating_min_modified())
      variant_hash[QLatin1String("climbing_rating_min")] = m_climbing_rating_min;
    if (is_climbing_styles_modified())
      variant_hash[QLatin1String("climbing_styles")] = m_climbing_styles;
    if (is_custodianship_modified())
      variant_hash[QLatin1String("custodianship")] = m_custodianship;
    if (is_elevation_modified())
      variant_hash[QLatin1String("elevation")] = m_elevation;
    if (is_elevation_min_modified())
      variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    if (is_equipment_ratings_modified())
      variant_hash[QLatin1String("equipment_ratings")] = m_equipment_ratings;
    if (is_exposition_rating_modified())
      variant_hash[QLatin1String("exposition_rating")] = m_exposition_rating;
    if (is_gas_unstaffed_modified())
      variant_hash[QLatin1String("gas_unstaffed")] = m_gas_unstaffed;
    if (is_ground_types_modified())
      variant_hash[QLatin1String("ground_types")] = m_ground_types;
    if (is_heating_unstaffed_modified())
      variant_hash[QLatin1String("heating_unstaffed")] = m_heating_unstaffed;
    if (is_height_max_modified())
      variant_hash[QLatin1String("height_max")] = m_height_max;
    if (is_height_median_modified())
      variant_hash[QLatin1String("height_median")] = m_height_median;
    if (is_height_min_modified())
      variant_hash[QLatin1String("height_min")] = m_height_min;
    if (is_length_modified())
      variant_hash[QLatin1String("length")] = m_length;
    if (is_lift_access_modified())
      variant_hash[QLatin1String("lift_access")] = m_lift_access;
    if (is_maps_info_modified())
      variant_hash[QLatin1String("maps_info")] = m_maps_info;
    if (is_matress_unstaffed_modified())
      variant_hash[QLatin1String("matress_unstaffed")] = m_matress_unstaffed;
    if (is_orientations_modified())
      variant_hash[QLatin1String("orientations")] = m_orientations;
    if (is_paragliding_rating_modified())
      variant_hash[QLatin1String("paragliding_rating")] = m_paragliding_rating;
    if (is_parking_fee_modified())
      variant_hash[QLatin1String("parking_fee")] = m_parking_fee;
    if (is_phone_modified())
      variant_hash[QLatin1String("phone")] = m_phone;
    if (is_phone_custodian_modified())
      variant_hash[QLatin1String("phone_custodian")] = m_phone_custodian;
    if (is_product_types_modified())
      variant_hash[QLatin1String("product_types")] = m_product_types;
    if (is_prominence_modified())
      variant_hash[QLatin1String("prominence")] = m_prominence;
    if (is_public_transportation_rating_modified())
      variant_hash[QLatin1String("public_transportation_rating")] = m_public_transportation_rating;
    if (is_public_transportation_types_modified())
      variant_hash[QLatin1String("public_transportation_types")] = m_public_transportation_types;
    if (is_rain_proof_modified())
      variant_hash[QLatin1String("rain_proof")] = m_rain_proof;
    if (is_rock_types_modified())
      variant_hash[QLatin1String("rock_types")] = m_rock_types;
    if (is_routes_quantity_modified())
      variant_hash[QLatin1String("routes_quantity")] = m_routes_quantity;
    if (is_slackline_length_max_modified())
      variant_hash[QLatin1String("slackline_length_max")] = m_slackline_length_max;
    if (is_slackline_length_min_modified())
      variant_hash[QLatin1String("slackline_length_min")] = m_slackline_length_min;
    if (is_slackline_types_modified())
      variant_hash[QLatin1String("slackline_types")] = m_slackline_types;
    if (is_slope_modified())
      variant_hash[QLatin1String("slope")] = m_slope;
    if (is_snow_clearance_rating_modified())
      variant_hash[QLatin1String("snow_clearance_rating")] = m_snow_clearance_rating;
    if (is_url_modified())
      variant_hash[QLatin1String("url")] = m_url;
    if (is_waypoint_type_modified())
      variant_hash[QLatin1String("waypoint_type")] = m_waypoint_type;
    if (is_weather_station_types_modified())
      variant_hash[QLatin1String("weather_station_types")] = m_weather_station_types;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("access_time")] = m_access_time;
    variant_hash[QLatin1String("best_periods")] = m_best_periods;
    variant_hash[QLatin1String("blanket_unstaffed")] = m_blanket_unstaffed;
    variant_hash[QLatin1String("capacity")] = m_capacity;
    variant_hash[QLatin1String("capacity_staffed")] = m_capacity_staffed;
    variant_hash[QLatin1String("children_proof")] = m_children_proof;
    variant_hash[QLatin1String("climbing_indoor_types")] = m_climbing_indoor_types;
    variant_hash[QLatin1String("climbing_outdoor_types")] = m_climbing_outdoor_types;
    variant_hash[QLatin1String("climbing_rating_max")] = m_climbing_rating_max;
    variant_hash[QLatin1String("climbing_rating_median")] = m_climbing_rating_median;
    variant_hash[QLatin1String("climbing_rating_min")] = m_climbing_rating_min;
    variant_hash[QLatin1String("climbing_styles")] = m_climbing_styles;
    variant_hash[QLatin1String("custodianship")] = m_custodianship;
    variant_hash[QLatin1String("elevation")] = m_elevation;
    variant_hash[QLatin1String("elevation_min")] = m_elevation_min;
    variant_hash[QLatin1String("equipment_ratings")] = m_equipment_ratings;
    variant_hash[QLatin1String("exposition_rating")] = m_exposition_rating;
    variant_hash[QLatin1String("gas_unstaffed")] = m_gas_unstaffed;
    variant_hash[QLatin1String("ground_types")] = m_ground_types;
    variant_hash[QLatin1String("heating_unstaffed")] = m_heating_unstaffed;
    variant_hash[QLatin1String("height_max")] = m_height_max;
    variant_hash[QLatin1String("height_median")] = m_height_median;
    variant_hash[QLatin1String("height_min")] = m_height_min;
    variant_hash[QLatin1String("length")] = m_length;
    variant_hash[QLatin1String("lift_access")] = m_lift_access;
    variant_hash[QLatin1String("maps_info")] = m_maps_info;
    variant_hash[QLatin1String("matress_unstaffed")] = m_matress_unstaffed;
    variant_hash[QLatin1String("orientations")] = m_orientations;
    variant_hash[QLatin1String("paragliding_rating")] = m_paragliding_rating;
    variant_hash[QLatin1String("parking_fee")] = m_parking_fee;
    variant_hash[QLatin1String("phone")] = m_phone;
    variant_hash[QLatin1String("phone_custodian")] = m_phone_custodian;
    variant_hash[QLatin1String("product_types")] = m_product_types;
    variant_hash[QLatin1String("prominence")] = m_prominence;
    variant_hash[QLatin1String("public_transportation_rating")] = m_public_transportation_rating;
    variant_hash[QLatin1String("public_transportation_types")] = m_public_transportation_types;
    variant_hash[QLatin1String("rain_proof")] = m_rain_proof;
    variant_hash[QLatin1String("rock_types")] = m_rock_types;
    variant_hash[QLatin1String("routes_quantity")] = m_routes_quantity;
    variant_hash[QLatin1String("slackline_length_max")] = m_slackline_length_max;
    variant_hash[QLatin1String("slackline_length_min")] = m_slackline_length_min;
    variant_hash[QLatin1String("slackline_types")] = m_slackline_types;
    variant_hash[QLatin1String("slope")] = m_slope;
    variant_hash[QLatin1String("snow_clearance_rating")] = m_snow_clearance_rating;
    variant_hash[QLatin1String("url")] = m_url;
    variant_hash[QLatin1String("waypoint_type")] = m_waypoint_type;
    variant_hash[QLatin1String("weather_station_types")] = m_weather_station_types;
  }

  return variant_hash;
}

QVariantList
C2cWaypoints::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_access_time;
  variants << m_best_periods;
  variants << m_blanket_unstaffed;
  variants << m_capacity;
  variants << m_capacity_staffed;
  variants << m_children_proof;
  variants << m_climbing_indoor_types;
  variants << m_climbing_outdoor_types;
  variants << m_climbing_rating_max;
  variants << m_climbing_rating_median;
  variants << m_climbing_rating_min;
  variants << m_climbing_styles;
  variants << m_custodianship;
  variants << m_elevation;
  variants << m_elevation_min;
  variants << m_equipment_ratings;
  variants << m_exposition_rating;
  variants << m_gas_unstaffed;
  variants << m_ground_types;
  variants << m_heating_unstaffed;
  variants << m_height_max;
  variants << m_height_median;
  variants << m_height_min;
  variants << m_length;
  variants << m_lift_access;
  variants << m_maps_info;
  variants << m_matress_unstaffed;
  variants << m_orientations;
  variants << m_paragliding_rating;
  variants << m_parking_fee;
  variants << m_phone;
  variants << m_phone_custodian;
  variants << m_product_types;
  variants << m_prominence;
  variants << m_public_transportation_rating;
  variants << m_public_transportation_types;
  variants << m_rain_proof;
  variants << m_rock_types;
  variants << m_routes_quantity;
  variants << m_slackline_length_max;
  variants << m_slackline_length_min;
  variants << m_slackline_types;
  variants << m_slope;
  variants << m_snow_clearance_rating;
  variants << m_url;
  variants << m_waypoint_type;
  variants << m_weather_station_types;

  return variants;
}

QVariant
C2cWaypoints::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACCESS_TIME:
     return m_access_time;
   case Schema::Fields::BEST_PERIODS:
     return m_best_periods;
   case Schema::Fields::BLANKET_UNSTAFFED:
     return m_blanket_unstaffed;
   case Schema::Fields::CAPACITY:
     return m_capacity;
   case Schema::Fields::CAPACITY_STAFFED:
     return m_capacity_staffed;
   case Schema::Fields::CHILDREN_PROOF:
     return m_children_proof;
   case Schema::Fields::CLIMBING_INDOOR_TYPES:
     return m_climbing_indoor_types;
   case Schema::Fields::CLIMBING_OUTDOOR_TYPES:
     return m_climbing_outdoor_types;
   case Schema::Fields::CLIMBING_RATING_MAX:
     return m_climbing_rating_max;
   case Schema::Fields::CLIMBING_RATING_MEDIAN:
     return m_climbing_rating_median;
   case Schema::Fields::CLIMBING_RATING_MIN:
     return m_climbing_rating_min;
   case Schema::Fields::CLIMBING_STYLES:
     return m_climbing_styles;
   case Schema::Fields::CUSTODIANSHIP:
     return m_custodianship;
   case Schema::Fields::ELEVATION:
     return m_elevation;
   case Schema::Fields::ELEVATION_MIN:
     return m_elevation_min;
   case Schema::Fields::EQUIPMENT_RATINGS:
     return m_equipment_ratings;
   case Schema::Fields::EXPOSITION_RATING:
     return m_exposition_rating;
   case Schema::Fields::GAS_UNSTAFFED:
     return m_gas_unstaffed;
   case Schema::Fields::GROUND_TYPES:
     return m_ground_types;
   case Schema::Fields::HEATING_UNSTAFFED:
     return m_heating_unstaffed;
   case Schema::Fields::HEIGHT_MAX:
     return m_height_max;
   case Schema::Fields::HEIGHT_MEDIAN:
     return m_height_median;
   case Schema::Fields::HEIGHT_MIN:
     return m_height_min;
   case Schema::Fields::LENGTH:
     return m_length;
   case Schema::Fields::LIFT_ACCESS:
     return m_lift_access;
   case Schema::Fields::MAPS_INFO:
     return m_maps_info;
   case Schema::Fields::MATRESS_UNSTAFFED:
     return m_matress_unstaffed;
   case Schema::Fields::ORIENTATIONS:
     return m_orientations;
   case Schema::Fields::PARAGLIDING_RATING:
     return m_paragliding_rating;
   case Schema::Fields::PARKING_FEE:
     return m_parking_fee;
   case Schema::Fields::PHONE:
     return m_phone;
   case Schema::Fields::PHONE_CUSTODIAN:
     return m_phone_custodian;
   case Schema::Fields::PRODUCT_TYPES:
     return m_product_types;
   case Schema::Fields::PROMINENCE:
     return m_prominence;
   case Schema::Fields::PUBLIC_TRANSPORTATION_RATING:
     return m_public_transportation_rating;
   case Schema::Fields::PUBLIC_TRANSPORTATION_TYPES:
     return m_public_transportation_types;
   case Schema::Fields::RAIN_PROOF:
     return m_rain_proof;
   case Schema::Fields::ROCK_TYPES:
     return m_rock_types;
   case Schema::Fields::ROUTES_QUANTITY:
     return m_routes_quantity;
   case Schema::Fields::SLACKLINE_LENGTH_MAX:
     return m_slackline_length_max;
   case Schema::Fields::SLACKLINE_LENGTH_MIN:
     return m_slackline_length_min;
   case Schema::Fields::SLACKLINE_TYPES:
     return m_slackline_types;
   case Schema::Fields::SLOPE:
     return m_slope;
   case Schema::Fields::SNOW_CLEARANCE_RATING:
     return m_snow_clearance_rating;
   case Schema::Fields::URL:
     return m_url;
   case Schema::Fields::WAYPOINT_TYPE:
     return m_waypoint_type;
   case Schema::Fields::WEATHER_STATION_TYPES:
     return m_weather_station_types;
   default:
     return QVariant(); // error
  }
}

void
C2cWaypoints::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACCESS_TIME: {
     m_access_time = value.toString();
     break;
   }
   case Schema::Fields::BEST_PERIODS: {
     m_best_periods = value.toStringList();
     break;
   }
   case Schema::Fields::BLANKET_UNSTAFFED: {
     m_blanket_unstaffed = value.toBool();
     break;
   }
   case Schema::Fields::CAPACITY: {
     m_capacity = value.toInt();
     break;
   }
   case Schema::Fields::CAPACITY_STAFFED: {
     m_capacity_staffed = value.toInt();
     break;
   }
   case Schema::Fields::CHILDREN_PROOF: {
     m_children_proof = value.toString();
     break;
   }
   case Schema::Fields::CLIMBING_INDOOR_TYPES: {
     m_climbing_indoor_types = value.toStringList();
     break;
   }
   case Schema::Fields::CLIMBING_OUTDOOR_TYPES: {
     m_climbing_outdoor_types = value.toStringList();
     break;
   }
   case Schema::Fields::CLIMBING_RATING_MAX: {
     m_climbing_rating_max = value.toString();
     break;
   }
   case Schema::Fields::CLIMBING_RATING_MEDIAN: {
     m_climbing_rating_median = value.toString();
     break;
   }
   case Schema::Fields::CLIMBING_RATING_MIN: {
     m_climbing_rating_min = value.toString();
     break;
   }
   case Schema::Fields::CLIMBING_STYLES: {
     m_climbing_styles = value.toStringList();
     break;
   }
   case Schema::Fields::CUSTODIANSHIP: {
     m_custodianship = value.toString();
     break;
   }
   case Schema::Fields::ELEVATION: {
     m_elevation = value.toInt();
     break;
   }
   case Schema::Fields::ELEVATION_MIN: {
     m_elevation_min = value.toInt();
     break;
   }
   case Schema::Fields::EQUIPMENT_RATINGS: {
     m_equipment_ratings = value.toStringList();
     break;
   }
   case Schema::Fields::EXPOSITION_RATING: {
     m_exposition_rating = value.toString();
     break;
   }
   case Schema::Fields::GAS_UNSTAFFED: {
     m_gas_unstaffed = value.toBool();
     break;
   }
   case Schema::Fields::GROUND_TYPES: {
     m_ground_types = value.toStringList();
     break;
   }
   case Schema::Fields::HEATING_UNSTAFFED: {
     m_heating_unstaffed = value.toBool();
     break;
   }
   case Schema::Fields::HEIGHT_MAX: {
     m_height_max = value.toInt();
     break;
   }
   case Schema::Fields::HEIGHT_MEDIAN: {
     m_height_median = value.toInt();
     break;
   }
   case Schema::Fields::HEIGHT_MIN: {
     m_height_min = value.toInt();
     break;
   }
   case Schema::Fields::LENGTH: {
     m_length = value.toInt();
     break;
   }
   case Schema::Fields::LIFT_ACCESS: {
     m_lift_access = value.toBool();
     break;
   }
   case Schema::Fields::MAPS_INFO: {
     m_maps_info = value.toString();
     break;
   }
   case Schema::Fields::MATRESS_UNSTAFFED: {
     m_matress_unstaffed = value.toBool();
     break;
   }
   case Schema::Fields::ORIENTATIONS: {
     m_orientations = value.toStringList();
     break;
   }
   case Schema::Fields::PARAGLIDING_RATING: {
     m_paragliding_rating = value.toChar();
     break;
   }
   case Schema::Fields::PARKING_FEE: {
     m_parking_fee = value.toString();
     break;
   }
   case Schema::Fields::PHONE: {
     m_phone = value.toString();
     break;
   }
   case Schema::Fields::PHONE_CUSTODIAN: {
     m_phone_custodian = value.toString();
     break;
   }
   case Schema::Fields::PRODUCT_TYPES: {
     m_product_types = value.toStringList();
     break;
   }
   case Schema::Fields::PROMINENCE: {
     m_prominence = value.toInt();
     break;
   }
   case Schema::Fields::PUBLIC_TRANSPORTATION_RATING: {
     m_public_transportation_rating = value.toString();
     break;
   }
   case Schema::Fields::PUBLIC_TRANSPORTATION_TYPES: {
     m_public_transportation_types = value.toStringList();
     break;
   }
   case Schema::Fields::RAIN_PROOF: {
     m_rain_proof = value.toString();
     break;
   }
   case Schema::Fields::ROCK_TYPES: {
     m_rock_types = value.toStringList();
     break;
   }
   case Schema::Fields::ROUTES_QUANTITY: {
     m_routes_quantity = value.toInt();
     break;
   }
   case Schema::Fields::SLACKLINE_LENGTH_MAX: {
     m_slackline_length_max = value.toInt();
     break;
   }
   case Schema::Fields::SLACKLINE_LENGTH_MIN: {
     m_slackline_length_min = value.toInt();
     break;
   }
   case Schema::Fields::SLACKLINE_TYPES: {
     m_slackline_types = value.toStringList();
     break;
   }
   case Schema::Fields::SLOPE: {
     m_slope = value.toInt();
     break;
   }
   case Schema::Fields::SNOW_CLEARANCE_RATING: {
     m_snow_clearance_rating = value.toString();
     break;
   }
   case Schema::Fields::URL: {
     m_url = value.toString();
     break;
   }
   case Schema::Fields::WAYPOINT_TYPE: {
     m_waypoint_type = value.toString();
     break;
   }
   case Schema::Fields::WEATHER_STATION_TYPES: {
     m_weather_station_types = value.toStringList();
     break;
   }
  }
}

void
C2cWaypoints::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cWaypoints::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cWaypoints::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cWaypoints & obj)
{
  out << obj.document_id();
  out << obj.access_time();
  out << obj.best_periods();
  out << obj.blanket_unstaffed();
  out << obj.capacity();
  out << obj.capacity_staffed();
  out << obj.children_proof();
  out << obj.climbing_indoor_types();
  out << obj.climbing_outdoor_types();
  out << obj.climbing_rating_max();
  out << obj.climbing_rating_median();
  out << obj.climbing_rating_min();
  out << obj.climbing_styles();
  out << obj.custodianship();
  out << obj.elevation();
  out << obj.elevation_min();
  out << obj.equipment_ratings();
  out << obj.exposition_rating();
  out << obj.gas_unstaffed();
  out << obj.ground_types();
  out << obj.heating_unstaffed();
  out << obj.height_max();
  out << obj.height_median();
  out << obj.height_min();
  out << obj.length();
  out << obj.lift_access();
  out << obj.maps_info();
  out << obj.matress_unstaffed();
  out << obj.orientations();
  out << obj.paragliding_rating();
  out << obj.parking_fee();
  out << obj.phone();
  out << obj.phone_custodian();
  out << obj.product_types();
  out << obj.prominence();
  out << obj.public_transportation_rating();
  out << obj.public_transportation_types();
  out << obj.rain_proof();
  out << obj.rock_types();
  out << obj.routes_quantity();
  out << obj.slackline_length_max();
  out << obj.slackline_length_min();
  out << obj.slackline_types();
  out << obj.slope();
  out << obj.snow_clearance_rating();
  out << obj.url();
  out << obj.waypoint_type();
  out << obj.weather_station_types();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cWaypoints & obj)
{
  QChar _QChar;
  QString _QString;
  QStringList _QStringList;
  bool _bool;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QString;
  obj.set_access_time(_QString);
  in >> _QStringList;
  obj.set_best_periods(_QStringList);
  in >> _bool;
  obj.set_blanket_unstaffed(_bool);
  in >> _int;
  obj.set_capacity(_int);
  in >> _int;
  obj.set_capacity_staffed(_int);
  in >> _QString;
  obj.set_children_proof(_QString);
  in >> _QStringList;
  obj.set_climbing_indoor_types(_QStringList);
  in >> _QStringList;
  obj.set_climbing_outdoor_types(_QStringList);
  in >> _QString;
  obj.set_climbing_rating_max(_QString);
  in >> _QString;
  obj.set_climbing_rating_median(_QString);
  in >> _QString;
  obj.set_climbing_rating_min(_QString);
  in >> _QStringList;
  obj.set_climbing_styles(_QStringList);
  in >> _QString;
  obj.set_custodianship(_QString);
  in >> _int;
  obj.set_elevation(_int);
  in >> _int;
  obj.set_elevation_min(_int);
  in >> _QStringList;
  obj.set_equipment_ratings(_QStringList);
  in >> _QString;
  obj.set_exposition_rating(_QString);
  in >> _bool;
  obj.set_gas_unstaffed(_bool);
  in >> _QStringList;
  obj.set_ground_types(_QStringList);
  in >> _bool;
  obj.set_heating_unstaffed(_bool);
  in >> _int;
  obj.set_height_max(_int);
  in >> _int;
  obj.set_height_median(_int);
  in >> _int;
  obj.set_height_min(_int);
  in >> _int;
  obj.set_length(_int);
  in >> _bool;
  obj.set_lift_access(_bool);
  in >> _QString;
  obj.set_maps_info(_QString);
  in >> _bool;
  obj.set_matress_unstaffed(_bool);
  in >> _QStringList;
  obj.set_orientations(_QStringList);
  in >> _QChar;
  obj.set_paragliding_rating(_QChar);
  in >> _QString;
  obj.set_parking_fee(_QString);
  in >> _QString;
  obj.set_phone(_QString);
  in >> _QString;
  obj.set_phone_custodian(_QString);
  in >> _QStringList;
  obj.set_product_types(_QStringList);
  in >> _int;
  obj.set_prominence(_int);
  in >> _QString;
  obj.set_public_transportation_rating(_QString);
  in >> _QStringList;
  obj.set_public_transportation_types(_QStringList);
  in >> _QString;
  obj.set_rain_proof(_QString);
  in >> _QStringList;
  obj.set_rock_types(_QStringList);
  in >> _int;
  obj.set_routes_quantity(_int);
  in >> _int;
  obj.set_slackline_length_max(_int);
  in >> _int;
  obj.set_slackline_length_min(_int);
  in >> _QStringList;
  obj.set_slackline_types(_QStringList);
  in >> _int;
  obj.set_slope(_int);
  in >> _QString;
  obj.set_snow_clearance_rating(_QString);
  in >> _QString;
  obj.set_url(_QString);
  in >> _QString;
  obj.set_waypoint_type(_QString);
  in >> _QStringList;
  obj.set_weather_station_types(_QStringList);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cWaypoints & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cWaypoints(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.access_time();
  debug << QStringLiteral(", ");
  debug << obj.best_periods();
  debug << QStringLiteral(", ");
  debug << obj.blanket_unstaffed();
  debug << QStringLiteral(", ");
  debug << obj.capacity();
  debug << QStringLiteral(", ");
  debug << obj.capacity_staffed();
  debug << QStringLiteral(", ");
  debug << obj.children_proof();
  debug << QStringLiteral(", ");
  debug << obj.climbing_indoor_types();
  debug << QStringLiteral(", ");
  debug << obj.climbing_outdoor_types();
  debug << QStringLiteral(", ");
  debug << obj.climbing_rating_max();
  debug << QStringLiteral(", ");
  debug << obj.climbing_rating_median();
  debug << QStringLiteral(", ");
  debug << obj.climbing_rating_min();
  debug << QStringLiteral(", ");
  debug << obj.climbing_styles();
  debug << QStringLiteral(", ");
  debug << obj.custodianship();
  debug << QStringLiteral(", ");
  debug << obj.elevation();
  debug << QStringLiteral(", ");
  debug << obj.elevation_min();
  debug << QStringLiteral(", ");
  debug << obj.equipment_ratings();
  debug << QStringLiteral(", ");
  debug << obj.exposition_rating();
  debug << QStringLiteral(", ");
  debug << obj.gas_unstaffed();
  debug << QStringLiteral(", ");
  debug << obj.ground_types();
  debug << QStringLiteral(", ");
  debug << obj.heating_unstaffed();
  debug << QStringLiteral(", ");
  debug << obj.height_max();
  debug << QStringLiteral(", ");
  debug << obj.height_median();
  debug << QStringLiteral(", ");
  debug << obj.height_min();
  debug << QStringLiteral(", ");
  debug << obj.length();
  debug << QStringLiteral(", ");
  debug << obj.lift_access();
  debug << QStringLiteral(", ");
  debug << obj.maps_info();
  debug << QStringLiteral(", ");
  debug << obj.matress_unstaffed();
  debug << QStringLiteral(", ");
  debug << obj.orientations();
  debug << QStringLiteral(", ");
  debug << obj.paragliding_rating();
  debug << QStringLiteral(", ");
  debug << obj.parking_fee();
  debug << QStringLiteral(", ");
  debug << obj.phone();
  debug << QStringLiteral(", ");
  debug << obj.phone_custodian();
  debug << QStringLiteral(", ");
  debug << obj.product_types();
  debug << QStringLiteral(", ");
  debug << obj.prominence();
  debug << QStringLiteral(", ");
  debug << obj.public_transportation_rating();
  debug << QStringLiteral(", ");
  debug << obj.public_transportation_types();
  debug << QStringLiteral(", ");
  debug << obj.rain_proof();
  debug << QStringLiteral(", ");
  debug << obj.rock_types();
  debug << QStringLiteral(", ");
  debug << obj.routes_quantity();
  debug << QStringLiteral(", ");
  debug << obj.slackline_length_max();
  debug << QStringLiteral(", ");
  debug << obj.slackline_length_min();
  debug << QStringLiteral(", ");
  debug << obj.slackline_types();
  debug << QStringLiteral(", ");
  debug << obj.slope();
  debug << QStringLiteral(", ");
  debug << obj.snow_clearance_rating();
  debug << QStringLiteral(", ");
  debug << obj.url();
  debug << QStringLiteral(", ");
  debug << obj.waypoint_type();
  debug << QStringLiteral(", ");
  debug << obj.weather_station_types();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cWaypointsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cWaypointsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cWaypointsCache::C2cWaypointsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cWaypointsCache::~C2cWaypointsCache()
{}

void
C2cWaypointsCache::add(C2cWaypointsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cWaypoints::changed,
                   this, &C2cWaypointsCache::on_changed);
}

void
C2cWaypointsCache::remove(C2cWaypointsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cWaypointsCache::on_changed()
{
  C2cWaypoints * row = qobject_cast<C2cWaypoints *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cWaypointsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cWaypointsModel::C2cWaypointsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cWaypointsModel::C2cWaypointsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cWaypointsModel::~C2cWaypointsModel()
{}

int
C2cWaypointsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cWaypointsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cWaypointsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACCESS_TIME:
    return item->access_time();
  case BEST_PERIODS:
    return item->best_periods();
  case BLANKET_UNSTAFFED:
    return item->blanket_unstaffed();
  case CAPACITY:
    return item->capacity();
  case CAPACITY_STAFFED:
    return item->capacity_staffed();
  case CHILDREN_PROOF:
    return item->children_proof();
  case CLIMBING_INDOOR_TYPES:
    return item->climbing_indoor_types();
  case CLIMBING_OUTDOOR_TYPES:
    return item->climbing_outdoor_types();
  case CLIMBING_RATING_MAX:
    return item->climbing_rating_max();
  case CLIMBING_RATING_MEDIAN:
    return item->climbing_rating_median();
  case CLIMBING_RATING_MIN:
    return item->climbing_rating_min();
  case CLIMBING_STYLES:
    return item->climbing_styles();
  case CUSTODIANSHIP:
    return item->custodianship();
  case ELEVATION:
    return item->elevation();
  case ELEVATION_MIN:
    return item->elevation_min();
  case EQUIPMENT_RATINGS:
    return item->equipment_ratings();
  case EXPOSITION_RATING:
    return item->exposition_rating();
  case GAS_UNSTAFFED:
    return item->gas_unstaffed();
  case GROUND_TYPES:
    return item->ground_types();
  case HEATING_UNSTAFFED:
    return item->heating_unstaffed();
  case HEIGHT_MAX:
    return item->height_max();
  case HEIGHT_MEDIAN:
    return item->height_median();
  case HEIGHT_MIN:
    return item->height_min();
  case LENGTH:
    return item->length();
  case LIFT_ACCESS:
    return item->lift_access();
  case MAPS_INFO:
    return item->maps_info();
  case MATRESS_UNSTAFFED:
    return item->matress_unstaffed();
  case ORIENTATIONS:
    return item->orientations();
  case PARAGLIDING_RATING:
    return item->paragliding_rating();
  case PARKING_FEE:
    return item->parking_fee();
  case PHONE:
    return item->phone();
  case PHONE_CUSTODIAN:
    return item->phone_custodian();
  case PRODUCT_TYPES:
    return item->product_types();
  case PROMINENCE:
    return item->prominence();
  case PUBLIC_TRANSPORTATION_RATING:
    return item->public_transportation_rating();
  case PUBLIC_TRANSPORTATION_TYPES:
    return item->public_transportation_types();
  case RAIN_PROOF:
    return item->rain_proof();
  case ROCK_TYPES:
    return item->rock_types();
  case ROUTES_QUANTITY:
    return item->routes_quantity();
  case SLACKLINE_LENGTH_MAX:
    return item->slackline_length_max();
  case SLACKLINE_LENGTH_MIN:
    return item->slackline_length_min();
  case SLACKLINE_TYPES:
    return item->slackline_types();
  case SLOPE:
    return item->slope();
  case SNOW_CLEARANCE_RATING:
    return item->snow_clearance_rating();
  case URL:
    return item->url();
  case WAYPOINT_TYPE:
    return item->waypoint_type();
  case WEATHER_STATION_TYPES:
    return item->weather_station_types();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cWaypointsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACCESS_TIME] = QStringLiteral("access_time").latin1();
  role_names[BEST_PERIODS] = QStringLiteral("best_periods").latin1();
  role_names[BLANKET_UNSTAFFED] = QStringLiteral("blanket_unstaffed").latin1();
  role_names[CAPACITY] = QStringLiteral("capacity").latin1();
  role_names[CAPACITY_STAFFED] = QStringLiteral("capacity_staffed").latin1();
  role_names[CHILDREN_PROOF] = QStringLiteral("children_proof").latin1();
  role_names[CLIMBING_INDOOR_TYPES] = QStringLiteral("climbing_indoor_types").latin1();
  role_names[CLIMBING_OUTDOOR_TYPES] = QStringLiteral("climbing_outdoor_types").latin1();
  role_names[CLIMBING_RATING_MAX] = QStringLiteral("climbing_rating_max").latin1();
  role_names[CLIMBING_RATING_MEDIAN] = QStringLiteral("climbing_rating_median").latin1();
  role_names[CLIMBING_RATING_MIN] = QStringLiteral("climbing_rating_min").latin1();
  role_names[CLIMBING_STYLES] = QStringLiteral("climbing_styles").latin1();
  role_names[CUSTODIANSHIP] = QStringLiteral("custodianship").latin1();
  role_names[ELEVATION] = QStringLiteral("elevation").latin1();
  role_names[ELEVATION_MIN] = QStringLiteral("elevation_min").latin1();
  role_names[EQUIPMENT_RATINGS] = QStringLiteral("equipment_ratings").latin1();
  role_names[EXPOSITION_RATING] = QStringLiteral("exposition_rating").latin1();
  role_names[GAS_UNSTAFFED] = QStringLiteral("gas_unstaffed").latin1();
  role_names[GROUND_TYPES] = QStringLiteral("ground_types").latin1();
  role_names[HEATING_UNSTAFFED] = QStringLiteral("heating_unstaffed").latin1();
  role_names[HEIGHT_MAX] = QStringLiteral("height_max").latin1();
  role_names[HEIGHT_MEDIAN] = QStringLiteral("height_median").latin1();
  role_names[HEIGHT_MIN] = QStringLiteral("height_min").latin1();
  role_names[LENGTH] = QStringLiteral("length").latin1();
  role_names[LIFT_ACCESS] = QStringLiteral("lift_access").latin1();
  role_names[MAPS_INFO] = QStringLiteral("maps_info").latin1();
  role_names[MATRESS_UNSTAFFED] = QStringLiteral("matress_unstaffed").latin1();
  role_names[ORIENTATIONS] = QStringLiteral("orientations").latin1();
  role_names[PARAGLIDING_RATING] = QStringLiteral("paragliding_rating").latin1();
  role_names[PARKING_FEE] = QStringLiteral("parking_fee").latin1();
  role_names[PHONE] = QStringLiteral("phone").latin1();
  role_names[PHONE_CUSTODIAN] = QStringLiteral("phone_custodian").latin1();
  role_names[PRODUCT_TYPES] = QStringLiteral("product_types").latin1();
  role_names[PROMINENCE] = QStringLiteral("prominence").latin1();
  role_names[PUBLIC_TRANSPORTATION_RATING] = QStringLiteral("public_transportation_rating").latin1();
  role_names[PUBLIC_TRANSPORTATION_TYPES] = QStringLiteral("public_transportation_types").latin1();
  role_names[RAIN_PROOF] = QStringLiteral("rain_proof").latin1();
  role_names[ROCK_TYPES] = QStringLiteral("rock_types").latin1();
  role_names[ROUTES_QUANTITY] = QStringLiteral("routes_quantity").latin1();
  role_names[SLACKLINE_LENGTH_MAX] = QStringLiteral("slackline_length_max").latin1();
  role_names[SLACKLINE_LENGTH_MIN] = QStringLiteral("slackline_length_min").latin1();
  role_names[SLACKLINE_TYPES] = QStringLiteral("slackline_types").latin1();
  role_names[SLOPE] = QStringLiteral("slope").latin1();
  role_names[SNOW_CLEARANCE_RATING] = QStringLiteral("snow_clearance_rating").latin1();
  role_names[URL] = QStringLiteral("url").latin1();
  role_names[WAYPOINT_TYPE] = QStringLiteral("waypoint_type").latin1();
  role_names[WEATHER_STATION_TYPES] = QStringLiteral("weather_station_types").latin1();

  return role_names;
}

void
C2cWaypointsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cWaypointsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cWaypointsLocalesSchema::C2cWaypointsLocalesSchema()
: QoSchema(QLatin1String("C2cWaypointsLocales"), QLatin1String("c2c_waypoints_locales"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("access"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("access"),
      QLatin1String("access"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("access_period"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("access_period"),
      QLatin1String("access_period"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cWaypointsLocalesSchema::~C2cWaypointsLocalesSchema()
{}

/**************************************************************************************************/

C2cWaypointsLocales::C2cWaypointsLocales()
  : QObject(),
    QoRow<C2cWaypointsLocalesSchema>(),
    m_id(),
    m_access(),
    m_access_period()
{
}

C2cWaypointsLocales::C2cWaypointsLocales(const C2cWaypointsLocales & other)
  : QObject(),
    QoRow<C2cWaypointsLocalesSchema>(other),
    m_id(other.m_id),
    m_access(other.m_access),
    m_access_period(other.m_access_period)
{
}

C2cWaypointsLocales::C2cWaypointsLocales(const QJsonObject & json_object)
 : C2cWaypointsLocales()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_access = json_object[QLatin1String("access")].toString();
  m_access_period = json_object[QLatin1String("access_period")].toString();
}

C2cWaypointsLocales::C2cWaypointsLocales(const QVariantHash & variant_hash)
 : C2cWaypointsLocales()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_access = variant_hash[QLatin1String("access")].toString();
  m_access_period = variant_hash[QLatin1String("access_period")].toString();
}

C2cWaypointsLocales::C2cWaypointsLocales(const QVariantList & variants)
 : C2cWaypointsLocales()
{
  m_id = variants[0].toInt();
  m_access = variants[1].toString();
  m_access_period = variants[2].toString();
}

C2cWaypointsLocales::C2cWaypointsLocales(const QSqlRecord & record)
 : QoRow<C2cWaypointsLocalesSchema>(record)
{
  m_id = record.value(0).toInt();
  m_access = record.value(1).toString();
  m_access_period = record.value(2).toString();
}

C2cWaypointsLocales::C2cWaypointsLocales(const QSqlQuery & query, int offset)
 : QoRow<C2cWaypointsLocalesSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_access = query.value(offset++).toString();
  m_access_period = query.value(offset).toString();
}

C2cWaypointsLocales::~C2cWaypointsLocales()
{
// qATInfo() << "--- Delete" << "C2cWaypointsLocales" << *this;
}

// bit array ?
C2cWaypointsLocales &
C2cWaypointsLocales::operator=(const C2cWaypointsLocales & other)
{
  if (this != &other) {
    QoRow<C2cWaypointsLocalesSchema>::operator=(other);
    m_id = other.m_id;
    m_access = other.m_access;
    m_access_period = other.m_access_period;
  }

  return *this;
}

// bit array ?
bool
C2cWaypointsLocales::operator==(const C2cWaypointsLocales & other) const
{
  if (not QoRow<C2cWaypointsLocalesSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_access != other.m_access)
    return false;
  if (m_access_period != other.m_access_period)
    return false;

  return true;
}

void
C2cWaypointsLocales::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypointsLocales::set_access(const QString & value)
{
  if (m_access != value) {
    m_access = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACCESS);

    emit accessChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cWaypointsLocales::set_access_period(const QString & value)
{
  if (m_access_period != value) {
    m_access_period = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACCESS_PERIOD);

    emit access_periodChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cWaypointsLocales::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_access_modified())
      json_object.insert(QLatin1String("access"), QJsonValue(m_access));
    if (is_access_period_modified())
      json_object.insert(QLatin1String("access_period"), QJsonValue(m_access_period));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("access"), QJsonValue(m_access));
    json_object.insert(QLatin1String("access_period"), QJsonValue(m_access_period));
  }

  return json_object;
}

QVariantHash
C2cWaypointsLocales::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_access_modified())
      variant_hash[QLatin1String("access")] = m_access;
    if (is_access_period_modified())
      variant_hash[QLatin1String("access_period")] = m_access_period;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("access")] = m_access;
    variant_hash[QLatin1String("access_period")] = m_access_period;
  }

  return variant_hash;
}

QVariantList
C2cWaypointsLocales::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_access;
  variants << m_access_period;

  return variants;
}

QVariantHash
C2cWaypointsLocales::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_access_modified())
      variant_hash[QLatin1String("access")] = m_access;
    if (is_access_period_modified())
      variant_hash[QLatin1String("access_period")] = m_access_period;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("access")] = m_access;
    variant_hash[QLatin1String("access_period")] = m_access_period;
  }

  return variant_hash;
}

QVariantList
C2cWaypointsLocales::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_access;
  variants << m_access_period;

  return variants;
}

QVariant
C2cWaypointsLocales::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::ACCESS:
     return m_access;
   case Schema::Fields::ACCESS_PERIOD:
     return m_access_period;
   default:
     return QVariant(); // error
  }
}

void
C2cWaypointsLocales::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::ACCESS: {
     m_access = value.toString();
     break;
   }
   case Schema::Fields::ACCESS_PERIOD: {
     m_access_period = value.toString();
     break;
   }
  }
}

void
C2cWaypointsLocales::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cWaypointsLocales::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cWaypointsLocales::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cWaypointsLocales & obj)
{
  out << obj.id();
  out << obj.access();
  out << obj.access_period();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cWaypointsLocales & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QString;
  obj.set_access(_QString);
  in >> _QString;
  obj.set_access_period(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cWaypointsLocales & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cWaypointsLocales(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.access();
  debug << QStringLiteral(", ");
  debug << obj.access_period();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cWaypointsLocalesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cWaypointsLocalesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cWaypointsLocalesCache::C2cWaypointsLocalesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cWaypointsLocalesCache::~C2cWaypointsLocalesCache()
{}

void
C2cWaypointsLocalesCache::add(C2cWaypointsLocalesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cWaypointsLocales::changed,
                   this, &C2cWaypointsLocalesCache::on_changed);
}

void
C2cWaypointsLocalesCache::remove(C2cWaypointsLocalesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cWaypointsLocalesCache::on_changed()
{
  C2cWaypointsLocales * row = qobject_cast<C2cWaypointsLocales *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cWaypointsLocalesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cWaypointsLocalesModel::C2cWaypointsLocalesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cWaypointsLocalesModel::C2cWaypointsLocalesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cWaypointsLocalesModel::~C2cWaypointsLocalesModel()
{}

int
C2cWaypointsLocalesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cWaypointsLocalesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cWaypointsLocalesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case ACCESS:
    return item->access();
  case ACCESS_PERIOD:
    return item->access_period();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cWaypointsLocalesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[ACCESS] = QStringLiteral("access").latin1();
  role_names[ACCESS_PERIOD] = QStringLiteral("access_period").latin1();

  return role_names;
}

void
C2cWaypointsLocalesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cWaypointsLocalesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cXreportsSchema::C2cXreportsSchema()
: QoSchema(QLatin1String("C2cXreports"), QLatin1String("c2c_xreports"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("document_id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("document_id"),
      QLatin1String("document_id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activities"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("activities"),
      QLatin1String("activities"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("activity_rate"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("activity_rate"),
      QLatin1String("activity_rate"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("age"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("age"),
      QLatin1String("age"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("author_status"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("author_status"),
      QLatin1String("author_status"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("autonomy"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("autonomy"),
      QLatin1String("autonomy"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("avalanche_level"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("avalanche_level"),
      QLatin1String("avalanche_level"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("avalanche_slope"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("avalanche_slope"),
      QLatin1String("avalanche_slope"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("date"),
      QLatin1String("QDate"),
      QLatin1String("text"),
      QLatin1String("date"),
      QLatin1String("date"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("disable_comments"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("disable_comments"),
      QLatin1String("disable_comments"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("elevation"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("elevation"),
      QLatin1String("elevation"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("event_type"),
      QLatin1String("QStringList"),
      QLatin1String("text"),
      QLatin1String("event_type"),
      QLatin1String("event_type"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("gender"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("gender"),
      QLatin1String("gender"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("nb_impacted"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("nb_impacted"),
      QLatin1String("nb_impacted"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("nb_outings"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("nb_outings"),
      QLatin1String("nb_outings"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("nb_participants"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("nb_participants"),
      QLatin1String("nb_participants"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("previous_injuries"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("previous_injuries"),
      QLatin1String("previous_injuries"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("rescue"),
      QLatin1String("bool"),
      QLatin1String("integer"),
      QLatin1String("rescue"),
      QLatin1String("rescue"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("severity"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("severity"),
      QLatin1String("severity"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cXreportsSchema::~C2cXreportsSchema()
{}

/**************************************************************************************************/

C2cXreports::C2cXreports()
  : QObject(),
    QoRow<C2cXreportsSchema>(),
    m_document_id(),
    m_activities(),
    m_activity_rate(),
    m_age(),
    m_author_status(),
    m_autonomy(),
    m_avalanche_level(),
    m_avalanche_slope(),
    m_date(),
    m_disable_comments(),
    m_elevation(),
    m_event_type(),
    m_gender(),
    m_nb_impacted(),
    m_nb_outings(),
    m_nb_participants(),
    m_previous_injuries(),
    m_rescue(),
    m_severity()
{
}

C2cXreports::C2cXreports(const C2cXreports & other)
  : QObject(),
    QoRow<C2cXreportsSchema>(other),
    m_document_id(other.m_document_id),
    m_activities(other.m_activities),
    m_activity_rate(other.m_activity_rate),
    m_age(other.m_age),
    m_author_status(other.m_author_status),
    m_autonomy(other.m_autonomy),
    m_avalanche_level(other.m_avalanche_level),
    m_avalanche_slope(other.m_avalanche_slope),
    m_date(other.m_date),
    m_disable_comments(other.m_disable_comments),
    m_elevation(other.m_elevation),
    m_event_type(other.m_event_type),
    m_gender(other.m_gender),
    m_nb_impacted(other.m_nb_impacted),
    m_nb_outings(other.m_nb_outings),
    m_nb_participants(other.m_nb_participants),
    m_previous_injuries(other.m_previous_injuries),
    m_rescue(other.m_rescue),
    m_severity(other.m_severity)
{
}

C2cXreports::C2cXreports(const QJsonObject & json_object)
 : C2cXreports()
{
  m_document_id = json_object[QLatin1String("document_id")].toInt();
  m_activities = orm_type_conversion::load_string_list(json_object[QLatin1String("activities")]);
  m_activity_rate = json_object[QLatin1String("activity_rate")].toString();
  m_age = json_object[QLatin1String("age")].toInt();
  m_author_status = json_object[QLatin1String("author_status")].toString();
  m_autonomy = json_object[QLatin1String("autonomy")].toString();
  m_avalanche_level = json_object[QLatin1String("avalanche_level")].toString();
  m_avalanche_slope = json_object[QLatin1String("avalanche_slope")].toString();
  m_date = orm_type_conversion::load_date(json_object[QLatin1String("date")]);
  m_disable_comments = json_object[QLatin1String("disable_comments")].toBool();
  m_elevation = json_object[QLatin1String("elevation")].toInt();
  m_event_type = orm_type_conversion::load_string_list(json_object[QLatin1String("event_type")]);
  m_gender = json_object[QLatin1String("gender")].toString();
  m_nb_impacted = json_object[QLatin1String("nb_impacted")].toInt();
  m_nb_outings = json_object[QLatin1String("nb_outings")].toString();
  m_nb_participants = json_object[QLatin1String("nb_participants")].toInt();
  m_previous_injuries = json_object[QLatin1String("previous_injuries")].toString();
  m_rescue = json_object[QLatin1String("rescue")].toBool();
  m_severity = json_object[QLatin1String("severity")].toString();
}

C2cXreports::C2cXreports(const QVariantHash & variant_hash)
 : C2cXreports()
{
  m_document_id = variant_hash[QLatin1String("document_id")].toInt();
  m_activities = variant_hash[QLatin1String("activities")].toStringList();
  m_activity_rate = variant_hash[QLatin1String("activity_rate")].toString();
  m_age = variant_hash[QLatin1String("age")].toInt();
  m_author_status = variant_hash[QLatin1String("author_status")].toString();
  m_autonomy = variant_hash[QLatin1String("autonomy")].toString();
  m_avalanche_level = variant_hash[QLatin1String("avalanche_level")].toString();
  m_avalanche_slope = variant_hash[QLatin1String("avalanche_slope")].toString();
  m_date = variant_hash[QLatin1String("date")].toDate();
  m_disable_comments = variant_hash[QLatin1String("disable_comments")].toBool();
  m_elevation = variant_hash[QLatin1String("elevation")].toInt();
  m_event_type = variant_hash[QLatin1String("event_type")].toStringList();
  m_gender = variant_hash[QLatin1String("gender")].toString();
  m_nb_impacted = variant_hash[QLatin1String("nb_impacted")].toInt();
  m_nb_outings = variant_hash[QLatin1String("nb_outings")].toString();
  m_nb_participants = variant_hash[QLatin1String("nb_participants")].toInt();
  m_previous_injuries = variant_hash[QLatin1String("previous_injuries")].toString();
  m_rescue = variant_hash[QLatin1String("rescue")].toBool();
  m_severity = variant_hash[QLatin1String("severity")].toString();
}

C2cXreports::C2cXreports(const QVariantList & variants)
 : C2cXreports()
{
  m_document_id = variants[0].toInt();
  m_activities = variants[1].toStringList();
  m_activity_rate = variants[2].toString();
  m_age = variants[3].toInt();
  m_author_status = variants[4].toString();
  m_autonomy = variants[5].toString();
  m_avalanche_level = variants[6].toString();
  m_avalanche_slope = variants[7].toString();
  m_date = variants[8].toDate();
  m_disable_comments = variants[9].toBool();
  m_elevation = variants[10].toInt();
  m_event_type = variants[11].toStringList();
  m_gender = variants[12].toString();
  m_nb_impacted = variants[13].toInt();
  m_nb_outings = variants[14].toString();
  m_nb_participants = variants[15].toInt();
  m_previous_injuries = variants[16].toString();
  m_rescue = variants[17].toBool();
  m_severity = variants[18].toString();
}

C2cXreports::C2cXreports(const QSqlRecord & record)
 : QoRow<C2cXreportsSchema>(record)
{
  m_document_id = record.value(0).toInt();
  m_activities = record.value(1).toStringList();
  m_activity_rate = record.value(2).toString();
  m_age = record.value(3).toInt();
  m_author_status = record.value(4).toString();
  m_autonomy = record.value(5).toString();
  m_avalanche_level = record.value(6).toString();
  m_avalanche_slope = record.value(7).toString();
  m_date = record.value(8).toDate();
  m_disable_comments = record.value(9).toBool();
  m_elevation = record.value(10).toInt();
  m_event_type = record.value(11).toStringList();
  m_gender = record.value(12).toString();
  m_nb_impacted = record.value(13).toInt();
  m_nb_outings = record.value(14).toString();
  m_nb_participants = record.value(15).toInt();
  m_previous_injuries = record.value(16).toString();
  m_rescue = record.value(17).toBool();
  m_severity = record.value(18).toString();
}

C2cXreports::C2cXreports(const QSqlQuery & query, int offset)
 : QoRow<C2cXreportsSchema>(query)
{
  m_document_id = query.value(offset++).toInt();
  m_activities = query.value(offset++).toStringList();
  m_activity_rate = query.value(offset++).toString();
  m_age = query.value(offset++).toInt();
  m_author_status = query.value(offset++).toString();
  m_autonomy = query.value(offset++).toString();
  m_avalanche_level = query.value(offset++).toString();
  m_avalanche_slope = query.value(offset++).toString();
  m_date = query.value(offset++).toDate();
  m_disable_comments = query.value(offset++).toBool();
  m_elevation = query.value(offset++).toInt();
  m_event_type = query.value(offset++).toStringList();
  m_gender = query.value(offset++).toString();
  m_nb_impacted = query.value(offset++).toInt();
  m_nb_outings = query.value(offset++).toString();
  m_nb_participants = query.value(offset++).toInt();
  m_previous_injuries = query.value(offset++).toString();
  m_rescue = query.value(offset++).toBool();
  m_severity = query.value(offset).toString();
}

C2cXreports::~C2cXreports()
{
// qATInfo() << "--- Delete" << "C2cXreports" << *this;
}

// bit array ?
C2cXreports &
C2cXreports::operator=(const C2cXreports & other)
{
  if (this != &other) {
    QoRow<C2cXreportsSchema>::operator=(other);
    m_document_id = other.m_document_id;
    m_activities = other.m_activities;
    m_activity_rate = other.m_activity_rate;
    m_age = other.m_age;
    m_author_status = other.m_author_status;
    m_autonomy = other.m_autonomy;
    m_avalanche_level = other.m_avalanche_level;
    m_avalanche_slope = other.m_avalanche_slope;
    m_date = other.m_date;
    m_disable_comments = other.m_disable_comments;
    m_elevation = other.m_elevation;
    m_event_type = other.m_event_type;
    m_gender = other.m_gender;
    m_nb_impacted = other.m_nb_impacted;
    m_nb_outings = other.m_nb_outings;
    m_nb_participants = other.m_nb_participants;
    m_previous_injuries = other.m_previous_injuries;
    m_rescue = other.m_rescue;
    m_severity = other.m_severity;
  }

  return *this;
}

// bit array ?
bool
C2cXreports::operator==(const C2cXreports & other) const
{
  if (not QoRow<C2cXreportsSchema>::operator==(other))
    return false;
  if (m_document_id != other.m_document_id)
    return false;
  if (m_activities != other.m_activities)
    return false;
  if (m_activity_rate != other.m_activity_rate)
    return false;
  if (m_age != other.m_age)
    return false;
  if (m_author_status != other.m_author_status)
    return false;
  if (m_autonomy != other.m_autonomy)
    return false;
  if (m_avalanche_level != other.m_avalanche_level)
    return false;
  if (m_avalanche_slope != other.m_avalanche_slope)
    return false;
  if (m_date != other.m_date)
    return false;
  if (m_disable_comments != other.m_disable_comments)
    return false;
  if (m_elevation != other.m_elevation)
    return false;
  if (m_event_type != other.m_event_type)
    return false;
  if (m_gender != other.m_gender)
    return false;
  if (m_nb_impacted != other.m_nb_impacted)
    return false;
  if (m_nb_outings != other.m_nb_outings)
    return false;
  if (m_nb_participants != other.m_nb_participants)
    return false;
  if (m_previous_injuries != other.m_previous_injuries)
    return false;
  if (m_rescue != other.m_rescue)
    return false;
  if (m_severity != other.m_severity)
    return false;

  return true;
}

void
C2cXreports::set_document_id(int value)
{
  if (m_document_id != value) {
    m_document_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DOCUMENT_ID);

    emit document_idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_activities(const QStringList & value)
{
  if (m_activities != value) {
    m_activities = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITIES);

    emit activitiesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_activity_rate(const QString & value)
{
  if (m_activity_rate != value) {
    m_activity_rate = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ACTIVITY_RATE);

    emit activity_rateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_age(int value)
{
  if (m_age != value) {
    m_age = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AGE);

    emit ageChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_author_status(const QString & value)
{
  if (m_author_status != value) {
    m_author_status = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AUTHOR_STATUS);

    emit author_statusChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_autonomy(const QString & value)
{
  if (m_autonomy != value) {
    m_autonomy = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AUTONOMY);

    emit autonomyChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_avalanche_level(const QString & value)
{
  if (m_avalanche_level != value) {
    m_avalanche_level = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AVALANCHE_LEVEL);

    emit avalanche_levelChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_avalanche_slope(const QString & value)
{
  if (m_avalanche_slope != value) {
    m_avalanche_slope = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::AVALANCHE_SLOPE);

    emit avalanche_slopeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_date(const QDate & value)
{
  if (m_date != value) {
    m_date = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DATE);

    emit dateChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_disable_comments(bool value)
{
  if (m_disable_comments != value) {
    m_disable_comments = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::DISABLE_COMMENTS);

    emit disable_commentsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_elevation(int value)
{
  if (m_elevation != value) {
    m_elevation = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ELEVATION);

    emit elevationChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_event_type(const QStringList & value)
{
  if (m_event_type != value) {
    m_event_type = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::EVENT_TYPE);

    emit event_typeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_gender(const QString & value)
{
  if (m_gender != value) {
    m_gender = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GENDER);

    emit genderChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_nb_impacted(int value)
{
  if (m_nb_impacted != value) {
    m_nb_impacted = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NB_IMPACTED);

    emit nb_impactedChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_nb_outings(const QString & value)
{
  if (m_nb_outings != value) {
    m_nb_outings = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NB_OUTINGS);

    emit nb_outingsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_nb_participants(int value)
{
  if (m_nb_participants != value) {
    m_nb_participants = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::NB_PARTICIPANTS);

    emit nb_participantsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_previous_injuries(const QString & value)
{
  if (m_previous_injuries != value) {
    m_previous_injuries = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PREVIOUS_INJURIES);

    emit previous_injuriesChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_rescue(bool value)
{
  if (m_rescue != value) {
    m_rescue = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::RESCUE);

    emit rescueChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreports::set_severity(const QString & value)
{
  if (m_severity != value) {
    m_severity = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SEVERITY);

    emit severityChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cXreports::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_document_id_modified())
      json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    if (is_activities_modified())
      json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    if (is_activity_rate_modified())
      json_object.insert(QLatin1String("activity_rate"), QJsonValue(m_activity_rate));
    if (is_age_modified())
      json_object.insert(QLatin1String("age"), QJsonValue(m_age));
    if (is_author_status_modified())
      json_object.insert(QLatin1String("author_status"), QJsonValue(m_author_status));
    if (is_autonomy_modified())
      json_object.insert(QLatin1String("autonomy"), QJsonValue(m_autonomy));
    if (is_avalanche_level_modified())
      json_object.insert(QLatin1String("avalanche_level"), QJsonValue(m_avalanche_level));
    if (is_avalanche_slope_modified())
      json_object.insert(QLatin1String("avalanche_slope"), QJsonValue(m_avalanche_slope));
    if (is_date_modified())
      json_object.insert(QLatin1String("date"), orm_type_conversion::dump_date(m_date));
    if (is_disable_comments_modified())
      json_object.insert(QLatin1String("disable_comments"), QJsonValue(m_disable_comments));
    if (is_elevation_modified())
      json_object.insert(QLatin1String("elevation"), QJsonValue(m_elevation));
    if (is_event_type_modified())
      json_object.insert(QLatin1String("event_type"), orm_type_conversion::dump_string_list(m_event_type));
    if (is_gender_modified())
      json_object.insert(QLatin1String("gender"), QJsonValue(m_gender));
    if (is_nb_impacted_modified())
      json_object.insert(QLatin1String("nb_impacted"), QJsonValue(m_nb_impacted));
    if (is_nb_outings_modified())
      json_object.insert(QLatin1String("nb_outings"), QJsonValue(m_nb_outings));
    if (is_nb_participants_modified())
      json_object.insert(QLatin1String("nb_participants"), QJsonValue(m_nb_participants));
    if (is_previous_injuries_modified())
      json_object.insert(QLatin1String("previous_injuries"), QJsonValue(m_previous_injuries));
    if (is_rescue_modified())
      json_object.insert(QLatin1String("rescue"), QJsonValue(m_rescue));
    if (is_severity_modified())
      json_object.insert(QLatin1String("severity"), QJsonValue(m_severity));
  } else {
    json_object.insert(QLatin1String("document_id"), QJsonValue(m_document_id));
    json_object.insert(QLatin1String("activities"), orm_type_conversion::dump_string_list(m_activities));
    json_object.insert(QLatin1String("activity_rate"), QJsonValue(m_activity_rate));
    json_object.insert(QLatin1String("age"), QJsonValue(m_age));
    json_object.insert(QLatin1String("author_status"), QJsonValue(m_author_status));
    json_object.insert(QLatin1String("autonomy"), QJsonValue(m_autonomy));
    json_object.insert(QLatin1String("avalanche_level"), QJsonValue(m_avalanche_level));
    json_object.insert(QLatin1String("avalanche_slope"), QJsonValue(m_avalanche_slope));
    json_object.insert(QLatin1String("date"), orm_type_conversion::dump_date(m_date));
    json_object.insert(QLatin1String("disable_comments"), QJsonValue(m_disable_comments));
    json_object.insert(QLatin1String("elevation"), QJsonValue(m_elevation));
    json_object.insert(QLatin1String("event_type"), orm_type_conversion::dump_string_list(m_event_type));
    json_object.insert(QLatin1String("gender"), QJsonValue(m_gender));
    json_object.insert(QLatin1String("nb_impacted"), QJsonValue(m_nb_impacted));
    json_object.insert(QLatin1String("nb_outings"), QJsonValue(m_nb_outings));
    json_object.insert(QLatin1String("nb_participants"), QJsonValue(m_nb_participants));
    json_object.insert(QLatin1String("previous_injuries"), QJsonValue(m_previous_injuries));
    json_object.insert(QLatin1String("rescue"), QJsonValue(m_rescue));
    json_object.insert(QLatin1String("severity"), QJsonValue(m_severity));
  }

  return json_object;
}

QVariantHash
C2cXreports::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_activity_rate_modified())
      variant_hash[QLatin1String("activity_rate")] = m_activity_rate;
    if (is_age_modified())
      variant_hash[QLatin1String("age")] = m_age;
    if (is_author_status_modified())
      variant_hash[QLatin1String("author_status")] = m_author_status;
    if (is_autonomy_modified())
      variant_hash[QLatin1String("autonomy")] = m_autonomy;
    if (is_avalanche_level_modified())
      variant_hash[QLatin1String("avalanche_level")] = m_avalanche_level;
    if (is_avalanche_slope_modified())
      variant_hash[QLatin1String("avalanche_slope")] = m_avalanche_slope;
    if (is_date_modified())
      variant_hash[QLatin1String("date")] = m_date;
    if (is_disable_comments_modified())
      variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    if (is_elevation_modified())
      variant_hash[QLatin1String("elevation")] = m_elevation;
    if (is_event_type_modified())
      variant_hash[QLatin1String("event_type")] = m_event_type;
    if (is_gender_modified())
      variant_hash[QLatin1String("gender")] = m_gender;
    if (is_nb_impacted_modified())
      variant_hash[QLatin1String("nb_impacted")] = m_nb_impacted;
    if (is_nb_outings_modified())
      variant_hash[QLatin1String("nb_outings")] = m_nb_outings;
    if (is_nb_participants_modified())
      variant_hash[QLatin1String("nb_participants")] = m_nb_participants;
    if (is_previous_injuries_modified())
      variant_hash[QLatin1String("previous_injuries")] = m_previous_injuries;
    if (is_rescue_modified())
      variant_hash[QLatin1String("rescue")] = m_rescue;
    if (is_severity_modified())
      variant_hash[QLatin1String("severity")] = m_severity;
  } else {
    variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("activity_rate")] = m_activity_rate;
    variant_hash[QLatin1String("age")] = m_age;
    variant_hash[QLatin1String("author_status")] = m_author_status;
    variant_hash[QLatin1String("autonomy")] = m_autonomy;
    variant_hash[QLatin1String("avalanche_level")] = m_avalanche_level;
    variant_hash[QLatin1String("avalanche_slope")] = m_avalanche_slope;
    variant_hash[QLatin1String("date")] = m_date;
    variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    variant_hash[QLatin1String("elevation")] = m_elevation;
    variant_hash[QLatin1String("event_type")] = m_event_type;
    variant_hash[QLatin1String("gender")] = m_gender;
    variant_hash[QLatin1String("nb_impacted")] = m_nb_impacted;
    variant_hash[QLatin1String("nb_outings")] = m_nb_outings;
    variant_hash[QLatin1String("nb_participants")] = m_nb_participants;
    variant_hash[QLatin1String("previous_injuries")] = m_previous_injuries;
    variant_hash[QLatin1String("rescue")] = m_rescue;
    variant_hash[QLatin1String("severity")] = m_severity;
  }

  return variant_hash;
}

QVariantList
C2cXreports::to_variant_list() const
{
  QVariantList variants;

  variants << m_document_id;
  variants << m_activities;
  variants << m_activity_rate;
  variants << m_age;
  variants << m_author_status;
  variants << m_autonomy;
  variants << m_avalanche_level;
  variants << m_avalanche_slope;
  variants << m_date;
  variants << m_disable_comments;
  variants << m_elevation;
  variants << m_event_type;
  variants << m_gender;
  variants << m_nb_impacted;
  variants << m_nb_outings;
  variants << m_nb_participants;
  variants << m_previous_injuries;
  variants << m_rescue;
  variants << m_severity;

  return variants;
}

QVariantHash
C2cXreports::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_document_id_modified())
      variant_hash[QLatin1String("document_id")] = m_document_id;
    if (is_activities_modified())
      variant_hash[QLatin1String("activities")] = m_activities;
    if (is_activity_rate_modified())
      variant_hash[QLatin1String("activity_rate")] = m_activity_rate;
    if (is_age_modified())
      variant_hash[QLatin1String("age")] = m_age;
    if (is_author_status_modified())
      variant_hash[QLatin1String("author_status")] = m_author_status;
    if (is_autonomy_modified())
      variant_hash[QLatin1String("autonomy")] = m_autonomy;
    if (is_avalanche_level_modified())
      variant_hash[QLatin1String("avalanche_level")] = m_avalanche_level;
    if (is_avalanche_slope_modified())
      variant_hash[QLatin1String("avalanche_slope")] = m_avalanche_slope;
    if (is_date_modified())
      variant_hash[QLatin1String("date")] = m_date;
    if (is_disable_comments_modified())
      variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    if (is_elevation_modified())
      variant_hash[QLatin1String("elevation")] = m_elevation;
    if (is_event_type_modified())
      variant_hash[QLatin1String("event_type")] = m_event_type;
    if (is_gender_modified())
      variant_hash[QLatin1String("gender")] = m_gender;
    if (is_nb_impacted_modified())
      variant_hash[QLatin1String("nb_impacted")] = m_nb_impacted;
    if (is_nb_outings_modified())
      variant_hash[QLatin1String("nb_outings")] = m_nb_outings;
    if (is_nb_participants_modified())
      variant_hash[QLatin1String("nb_participants")] = m_nb_participants;
    if (is_previous_injuries_modified())
      variant_hash[QLatin1String("previous_injuries")] = m_previous_injuries;
    if (is_rescue_modified())
      variant_hash[QLatin1String("rescue")] = m_rescue;
    if (is_severity_modified())
      variant_hash[QLatin1String("severity")] = m_severity;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("document_id")] = m_document_id;
    variant_hash[QLatin1String("activities")] = m_activities;
    variant_hash[QLatin1String("activity_rate")] = m_activity_rate;
    variant_hash[QLatin1String("age")] = m_age;
    variant_hash[QLatin1String("author_status")] = m_author_status;
    variant_hash[QLatin1String("autonomy")] = m_autonomy;
    variant_hash[QLatin1String("avalanche_level")] = m_avalanche_level;
    variant_hash[QLatin1String("avalanche_slope")] = m_avalanche_slope;
    variant_hash[QLatin1String("date")] = m_date;
    variant_hash[QLatin1String("disable_comments")] = m_disable_comments;
    variant_hash[QLatin1String("elevation")] = m_elevation;
    variant_hash[QLatin1String("event_type")] = m_event_type;
    variant_hash[QLatin1String("gender")] = m_gender;
    variant_hash[QLatin1String("nb_impacted")] = m_nb_impacted;
    variant_hash[QLatin1String("nb_outings")] = m_nb_outings;
    variant_hash[QLatin1String("nb_participants")] = m_nb_participants;
    variant_hash[QLatin1String("previous_injuries")] = m_previous_injuries;
    variant_hash[QLatin1String("rescue")] = m_rescue;
    variant_hash[QLatin1String("severity")] = m_severity;
  }

  return variant_hash;
}

QVariantList
C2cXreports::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_document_id;
  variants << m_activities;
  variants << m_activity_rate;
  variants << m_age;
  variants << m_author_status;
  variants << m_autonomy;
  variants << m_avalanche_level;
  variants << m_avalanche_slope;
  variants << m_date;
  variants << m_disable_comments;
  variants << m_elevation;
  variants << m_event_type;
  variants << m_gender;
  variants << m_nb_impacted;
  variants << m_nb_outings;
  variants << m_nb_participants;
  variants << m_previous_injuries;
  variants << m_rescue;
  variants << m_severity;

  return variants;
}

QVariant
C2cXreports::field(int position) const
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID:
     return m_document_id;
   case Schema::Fields::ACTIVITIES:
     return m_activities;
   case Schema::Fields::ACTIVITY_RATE:
     return m_activity_rate;
   case Schema::Fields::AGE:
     return m_age;
   case Schema::Fields::AUTHOR_STATUS:
     return m_author_status;
   case Schema::Fields::AUTONOMY:
     return m_autonomy;
   case Schema::Fields::AVALANCHE_LEVEL:
     return m_avalanche_level;
   case Schema::Fields::AVALANCHE_SLOPE:
     return m_avalanche_slope;
   case Schema::Fields::DATE:
     return m_date;
   case Schema::Fields::DISABLE_COMMENTS:
     return m_disable_comments;
   case Schema::Fields::ELEVATION:
     return m_elevation;
   case Schema::Fields::EVENT_TYPE:
     return m_event_type;
   case Schema::Fields::GENDER:
     return m_gender;
   case Schema::Fields::NB_IMPACTED:
     return m_nb_impacted;
   case Schema::Fields::NB_OUTINGS:
     return m_nb_outings;
   case Schema::Fields::NB_PARTICIPANTS:
     return m_nb_participants;
   case Schema::Fields::PREVIOUS_INJURIES:
     return m_previous_injuries;
   case Schema::Fields::RESCUE:
     return m_rescue;
   case Schema::Fields::SEVERITY:
     return m_severity;
   default:
     return QVariant(); // error
  }
}

void
C2cXreports::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::DOCUMENT_ID: {
     m_document_id = value.toInt();
     break;
   }
   case Schema::Fields::ACTIVITIES: {
     m_activities = value.toStringList();
     break;
   }
   case Schema::Fields::ACTIVITY_RATE: {
     m_activity_rate = value.toString();
     break;
   }
   case Schema::Fields::AGE: {
     m_age = value.toInt();
     break;
   }
   case Schema::Fields::AUTHOR_STATUS: {
     m_author_status = value.toString();
     break;
   }
   case Schema::Fields::AUTONOMY: {
     m_autonomy = value.toString();
     break;
   }
   case Schema::Fields::AVALANCHE_LEVEL: {
     m_avalanche_level = value.toString();
     break;
   }
   case Schema::Fields::AVALANCHE_SLOPE: {
     m_avalanche_slope = value.toString();
     break;
   }
   case Schema::Fields::DATE: {
     m_date = value.toDate();
     break;
   }
   case Schema::Fields::DISABLE_COMMENTS: {
     m_disable_comments = value.toBool();
     break;
   }
   case Schema::Fields::ELEVATION: {
     m_elevation = value.toInt();
     break;
   }
   case Schema::Fields::EVENT_TYPE: {
     m_event_type = value.toStringList();
     break;
   }
   case Schema::Fields::GENDER: {
     m_gender = value.toString();
     break;
   }
   case Schema::Fields::NB_IMPACTED: {
     m_nb_impacted = value.toInt();
     break;
   }
   case Schema::Fields::NB_OUTINGS: {
     m_nb_outings = value.toString();
     break;
   }
   case Schema::Fields::NB_PARTICIPANTS: {
     m_nb_participants = value.toInt();
     break;
   }
   case Schema::Fields::PREVIOUS_INJURIES: {
     m_previous_injuries = value.toString();
     break;
   }
   case Schema::Fields::RESCUE: {
     m_rescue = value.toBool();
     break;
   }
   case Schema::Fields::SEVERITY: {
     m_severity = value.toString();
     break;
   }
  }
}

void
C2cXreports::set_insert_id(int id)
{
  set_document_id(id);

}

bool
C2cXreports::can_update() const
{
  return m_document_id > 0;
}

QVariantHash
C2cXreports::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("document_id")] = m_document_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cXreports & obj)
{
  out << obj.document_id();
  out << obj.activities();
  out << obj.activity_rate();
  out << obj.age();
  out << obj.author_status();
  out << obj.autonomy();
  out << obj.avalanche_level();
  out << obj.avalanche_slope();
  out << obj.date();
  out << obj.disable_comments();
  out << obj.elevation();
  out << obj.event_type();
  out << obj.gender();
  out << obj.nb_impacted();
  out << obj.nb_outings();
  out << obj.nb_participants();
  out << obj.previous_injuries();
  out << obj.rescue();
  out << obj.severity();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cXreports & obj)
{
  QDate _QDate;
  QString _QString;
  QStringList _QStringList;
  bool _bool;
  int _int;
  in >> _int;
  obj.set_document_id(_int);
  in >> _QStringList;
  obj.set_activities(_QStringList);
  in >> _QString;
  obj.set_activity_rate(_QString);
  in >> _int;
  obj.set_age(_int);
  in >> _QString;
  obj.set_author_status(_QString);
  in >> _QString;
  obj.set_autonomy(_QString);
  in >> _QString;
  obj.set_avalanche_level(_QString);
  in >> _QString;
  obj.set_avalanche_slope(_QString);
  in >> _QDate;
  obj.set_date(_QDate);
  in >> _bool;
  obj.set_disable_comments(_bool);
  in >> _int;
  obj.set_elevation(_int);
  in >> _QStringList;
  obj.set_event_type(_QStringList);
  in >> _QString;
  obj.set_gender(_QString);
  in >> _int;
  obj.set_nb_impacted(_int);
  in >> _QString;
  obj.set_nb_outings(_QString);
  in >> _int;
  obj.set_nb_participants(_int);
  in >> _QString;
  obj.set_previous_injuries(_QString);
  in >> _bool;
  obj.set_rescue(_bool);
  in >> _QString;
  obj.set_severity(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cXreports & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cXreports(");
  debug << obj.document_id();
  debug << QStringLiteral(", ");
  debug << obj.activities();
  debug << QStringLiteral(", ");
  debug << obj.activity_rate();
  debug << QStringLiteral(", ");
  debug << obj.age();
  debug << QStringLiteral(", ");
  debug << obj.author_status();
  debug << QStringLiteral(", ");
  debug << obj.autonomy();
  debug << QStringLiteral(", ");
  debug << obj.avalanche_level();
  debug << QStringLiteral(", ");
  debug << obj.avalanche_slope();
  debug << QStringLiteral(", ");
  debug << obj.date();
  debug << QStringLiteral(", ");
  debug << obj.disable_comments();
  debug << QStringLiteral(", ");
  debug << obj.elevation();
  debug << QStringLiteral(", ");
  debug << obj.event_type();
  debug << QStringLiteral(", ");
  debug << obj.gender();
  debug << QStringLiteral(", ");
  debug << obj.nb_impacted();
  debug << QStringLiteral(", ");
  debug << obj.nb_outings();
  debug << QStringLiteral(", ");
  debug << obj.nb_participants();
  debug << QStringLiteral(", ");
  debug << obj.previous_injuries();
  debug << QStringLiteral(", ");
  debug << obj.rescue();
  debug << QStringLiteral(", ");
  debug << obj.severity();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cXreportsPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cXreportsPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cXreportsCache::C2cXreportsCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cXreportsCache::~C2cXreportsCache()
{}

void
C2cXreportsCache::add(C2cXreportsPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cXreports::changed,
                   this, &C2cXreportsCache::on_changed);
}

void
C2cXreportsCache::remove(C2cXreportsPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cXreportsCache::on_changed()
{
  C2cXreports * row = qobject_cast<C2cXreports *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cXreportsPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cXreportsModel::C2cXreportsModel()
  : QAbstractListModel(),
    m_items()
{}

C2cXreportsModel::C2cXreportsModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cXreportsModel::~C2cXreportsModel()
{}

int
C2cXreportsModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cXreportsModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cXreportsModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case DOCUMENT_ID:
    return item->document_id();
  case ACTIVITIES:
    return item->activities();
  case ACTIVITY_RATE:
    return item->activity_rate();
  case AGE:
    return item->age();
  case AUTHOR_STATUS:
    return item->author_status();
  case AUTONOMY:
    return item->autonomy();
  case AVALANCHE_LEVEL:
    return item->avalanche_level();
  case AVALANCHE_SLOPE:
    return item->avalanche_slope();
  case DATE:
    return item->date();
  case DISABLE_COMMENTS:
    return item->disable_comments();
  case ELEVATION:
    return item->elevation();
  case EVENT_TYPE:
    return item->event_type();
  case GENDER:
    return item->gender();
  case NB_IMPACTED:
    return item->nb_impacted();
  case NB_OUTINGS:
    return item->nb_outings();
  case NB_PARTICIPANTS:
    return item->nb_participants();
  case PREVIOUS_INJURIES:
    return item->previous_injuries();
  case RESCUE:
    return item->rescue();
  case SEVERITY:
    return item->severity();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cXreportsModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[DOCUMENT_ID] = QStringLiteral("document_id").latin1();
  role_names[ACTIVITIES] = QStringLiteral("activities").latin1();
  role_names[ACTIVITY_RATE] = QStringLiteral("activity_rate").latin1();
  role_names[AGE] = QStringLiteral("age").latin1();
  role_names[AUTHOR_STATUS] = QStringLiteral("author_status").latin1();
  role_names[AUTONOMY] = QStringLiteral("autonomy").latin1();
  role_names[AVALANCHE_LEVEL] = QStringLiteral("avalanche_level").latin1();
  role_names[AVALANCHE_SLOPE] = QStringLiteral("avalanche_slope").latin1();
  role_names[DATE] = QStringLiteral("date").latin1();
  role_names[DISABLE_COMMENTS] = QStringLiteral("disable_comments").latin1();
  role_names[ELEVATION] = QStringLiteral("elevation").latin1();
  role_names[EVENT_TYPE] = QStringLiteral("event_type").latin1();
  role_names[GENDER] = QStringLiteral("gender").latin1();
  role_names[NB_IMPACTED] = QStringLiteral("nb_impacted").latin1();
  role_names[NB_OUTINGS] = QStringLiteral("nb_outings").latin1();
  role_names[NB_PARTICIPANTS] = QStringLiteral("nb_participants").latin1();
  role_names[PREVIOUS_INJURIES] = QStringLiteral("previous_injuries").latin1();
  role_names[RESCUE] = QStringLiteral("rescue").latin1();
  role_names[SEVERITY] = QStringLiteral("severity").latin1();

  return role_names;
}

void
C2cXreportsModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cXreportsModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}

C2cXreportsLocalesSchema::C2cXreportsLocalesSchema()
: QoSchema(QLatin1String("C2cXreportsLocales"), QLatin1String("c2c_xreports_locales"))
{
  {
    QoSchemaPrimaryKey field(
      QLatin1String("id"),
      QLatin1String("int"),
      QLatin1String("integer"),
      QLatin1String("id"),
      QLatin1String("id"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    field.set_nullable(false);
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("conditions"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("conditions"),
      QLatin1String("conditions"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("group_management"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("group_management"),
      QLatin1String("group_management"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("increase_impact"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("increase_impact"),
      QLatin1String("increase_impact"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("modifications"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("modifications"),
      QLatin1String("modifications"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("motivations"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("motivations"),
      QLatin1String("motivations"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("other_comments"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("other_comments"),
      QLatin1String("other_comments"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("place"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("place"),
      QLatin1String("place"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("reduce_impact"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("reduce_impact"),
      QLatin1String("reduce_impact"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("risk"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("risk"),
      QLatin1String("risk"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("route_study"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("route_study"),
      QLatin1String("route_study"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("safety"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("safety"),
      QLatin1String("safety"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("time_management"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("time_management"),
      QLatin1String("time_management"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
  {
    QoSchemaField field(
      QLatin1String("training"),
      QLatin1String("QString"),
      QLatin1String("text"),
      QLatin1String("training"),
      QLatin1String("training"),
      QLatin1String(""),
      QLatin1String(""));
    // Optional parameters
    add_field(field);
  }
}

C2cXreportsLocalesSchema::~C2cXreportsLocalesSchema()
{}

/**************************************************************************************************/

C2cXreportsLocales::C2cXreportsLocales()
  : QObject(),
    QoRow<C2cXreportsLocalesSchema>(),
    m_id(),
    m_conditions(),
    m_group_management(),
    m_increase_impact(),
    m_modifications(),
    m_motivations(),
    m_other_comments(),
    m_place(),
    m_reduce_impact(),
    m_risk(),
    m_route_study(),
    m_safety(),
    m_time_management(),
    m_training()
{
}

C2cXreportsLocales::C2cXreportsLocales(const C2cXreportsLocales & other)
  : QObject(),
    QoRow<C2cXreportsLocalesSchema>(other),
    m_id(other.m_id),
    m_conditions(other.m_conditions),
    m_group_management(other.m_group_management),
    m_increase_impact(other.m_increase_impact),
    m_modifications(other.m_modifications),
    m_motivations(other.m_motivations),
    m_other_comments(other.m_other_comments),
    m_place(other.m_place),
    m_reduce_impact(other.m_reduce_impact),
    m_risk(other.m_risk),
    m_route_study(other.m_route_study),
    m_safety(other.m_safety),
    m_time_management(other.m_time_management),
    m_training(other.m_training)
{
}

C2cXreportsLocales::C2cXreportsLocales(const QJsonObject & json_object)
 : C2cXreportsLocales()
{
  m_id = json_object[QLatin1String("id")].toInt();
  m_conditions = json_object[QLatin1String("conditions")].toString();
  m_group_management = json_object[QLatin1String("group_management")].toString();
  m_increase_impact = json_object[QLatin1String("increase_impact")].toString();
  m_modifications = json_object[QLatin1String("modifications")].toString();
  m_motivations = json_object[QLatin1String("motivations")].toString();
  m_other_comments = json_object[QLatin1String("other_comments")].toString();
  m_place = json_object[QLatin1String("place")].toString();
  m_reduce_impact = json_object[QLatin1String("reduce_impact")].toString();
  m_risk = json_object[QLatin1String("risk")].toString();
  m_route_study = json_object[QLatin1String("route_study")].toString();
  m_safety = json_object[QLatin1String("safety")].toString();
  m_time_management = json_object[QLatin1String("time_management")].toString();
  m_training = json_object[QLatin1String("training")].toString();
}

C2cXreportsLocales::C2cXreportsLocales(const QVariantHash & variant_hash)
 : C2cXreportsLocales()
{
  m_id = variant_hash[QLatin1String("id")].toInt();
  m_conditions = variant_hash[QLatin1String("conditions")].toString();
  m_group_management = variant_hash[QLatin1String("group_management")].toString();
  m_increase_impact = variant_hash[QLatin1String("increase_impact")].toString();
  m_modifications = variant_hash[QLatin1String("modifications")].toString();
  m_motivations = variant_hash[QLatin1String("motivations")].toString();
  m_other_comments = variant_hash[QLatin1String("other_comments")].toString();
  m_place = variant_hash[QLatin1String("place")].toString();
  m_reduce_impact = variant_hash[QLatin1String("reduce_impact")].toString();
  m_risk = variant_hash[QLatin1String("risk")].toString();
  m_route_study = variant_hash[QLatin1String("route_study")].toString();
  m_safety = variant_hash[QLatin1String("safety")].toString();
  m_time_management = variant_hash[QLatin1String("time_management")].toString();
  m_training = variant_hash[QLatin1String("training")].toString();
}

C2cXreportsLocales::C2cXreportsLocales(const QVariantList & variants)
 : C2cXreportsLocales()
{
  m_id = variants[0].toInt();
  m_conditions = variants[1].toString();
  m_group_management = variants[2].toString();
  m_increase_impact = variants[3].toString();
  m_modifications = variants[4].toString();
  m_motivations = variants[5].toString();
  m_other_comments = variants[6].toString();
  m_place = variants[7].toString();
  m_reduce_impact = variants[8].toString();
  m_risk = variants[9].toString();
  m_route_study = variants[10].toString();
  m_safety = variants[11].toString();
  m_time_management = variants[12].toString();
  m_training = variants[13].toString();
}

C2cXreportsLocales::C2cXreportsLocales(const QSqlRecord & record)
 : QoRow<C2cXreportsLocalesSchema>(record)
{
  m_id = record.value(0).toInt();
  m_conditions = record.value(1).toString();
  m_group_management = record.value(2).toString();
  m_increase_impact = record.value(3).toString();
  m_modifications = record.value(4).toString();
  m_motivations = record.value(5).toString();
  m_other_comments = record.value(6).toString();
  m_place = record.value(7).toString();
  m_reduce_impact = record.value(8).toString();
  m_risk = record.value(9).toString();
  m_route_study = record.value(10).toString();
  m_safety = record.value(11).toString();
  m_time_management = record.value(12).toString();
  m_training = record.value(13).toString();
}

C2cXreportsLocales::C2cXreportsLocales(const QSqlQuery & query, int offset)
 : QoRow<C2cXreportsLocalesSchema>(query)
{
  m_id = query.value(offset++).toInt();
  m_conditions = query.value(offset++).toString();
  m_group_management = query.value(offset++).toString();
  m_increase_impact = query.value(offset++).toString();
  m_modifications = query.value(offset++).toString();
  m_motivations = query.value(offset++).toString();
  m_other_comments = query.value(offset++).toString();
  m_place = query.value(offset++).toString();
  m_reduce_impact = query.value(offset++).toString();
  m_risk = query.value(offset++).toString();
  m_route_study = query.value(offset++).toString();
  m_safety = query.value(offset++).toString();
  m_time_management = query.value(offset++).toString();
  m_training = query.value(offset).toString();
}

C2cXreportsLocales::~C2cXreportsLocales()
{
// qATInfo() << "--- Delete" << "C2cXreportsLocales" << *this;
}

// bit array ?
C2cXreportsLocales &
C2cXreportsLocales::operator=(const C2cXreportsLocales & other)
{
  if (this != &other) {
    QoRow<C2cXreportsLocalesSchema>::operator=(other);
    m_id = other.m_id;
    m_conditions = other.m_conditions;
    m_group_management = other.m_group_management;
    m_increase_impact = other.m_increase_impact;
    m_modifications = other.m_modifications;
    m_motivations = other.m_motivations;
    m_other_comments = other.m_other_comments;
    m_place = other.m_place;
    m_reduce_impact = other.m_reduce_impact;
    m_risk = other.m_risk;
    m_route_study = other.m_route_study;
    m_safety = other.m_safety;
    m_time_management = other.m_time_management;
    m_training = other.m_training;
  }

  return *this;
}

// bit array ?
bool
C2cXreportsLocales::operator==(const C2cXreportsLocales & other) const
{
  if (not QoRow<C2cXreportsLocalesSchema>::operator==(other))
    return false;
  if (m_id != other.m_id)
    return false;
  if (m_conditions != other.m_conditions)
    return false;
  if (m_group_management != other.m_group_management)
    return false;
  if (m_increase_impact != other.m_increase_impact)
    return false;
  if (m_modifications != other.m_modifications)
    return false;
  if (m_motivations != other.m_motivations)
    return false;
  if (m_other_comments != other.m_other_comments)
    return false;
  if (m_place != other.m_place)
    return false;
  if (m_reduce_impact != other.m_reduce_impact)
    return false;
  if (m_risk != other.m_risk)
    return false;
  if (m_route_study != other.m_route_study)
    return false;
  if (m_safety != other.m_safety)
    return false;
  if (m_time_management != other.m_time_management)
    return false;
  if (m_training != other.m_training)
    return false;

  return true;
}

void
C2cXreportsLocales::set_id(int value)
{
  if (m_id != value) {
    m_id = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ID);

    emit idChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_conditions(const QString & value)
{
  if (m_conditions != value) {
    m_conditions = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::CONDITIONS);

    emit conditionsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_group_management(const QString & value)
{
  if (m_group_management != value) {
    m_group_management = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::GROUP_MANAGEMENT);

    emit group_managementChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_increase_impact(const QString & value)
{
  if (m_increase_impact != value) {
    m_increase_impact = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::INCREASE_IMPACT);

    emit increase_impactChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_modifications(const QString & value)
{
  if (m_modifications != value) {
    m_modifications = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MODIFICATIONS);

    emit modificationsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_motivations(const QString & value)
{
  if (m_motivations != value) {
    m_motivations = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::MOTIVATIONS);

    emit motivationsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_other_comments(const QString & value)
{
  if (m_other_comments != value) {
    m_other_comments = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::OTHER_COMMENTS);

    emit other_commentsChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_place(const QString & value)
{
  if (m_place != value) {
    m_place = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::PLACE);

    emit placeChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_reduce_impact(const QString & value)
{
  if (m_reduce_impact != value) {
    m_reduce_impact = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::REDUCE_IMPACT);

    emit reduce_impactChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_risk(const QString & value)
{
  if (m_risk != value) {
    m_risk = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::RISK);

    emit riskChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_route_study(const QString & value)
{
  if (m_route_study != value) {
    m_route_study = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::ROUTE_STUDY);

    emit route_studyChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_safety(const QString & value)
{
  if (m_safety != value) {
    m_safety = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::SAFETY);

    emit safetyChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_time_management(const QString & value)
{
  if (m_time_management != value) {
    m_time_management = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TIME_MANAGEMENT);

    emit time_managementChanged();
    if (not is_changed)
      emit changed();
  }
}

void
C2cXreportsLocales::set_training(const QString & value)
{
  if (m_training != value) {
    m_training = value;

    bool is_changed = is_modified();
    set_bit(Schema::Fields::TRAINING);

    emit trainingChanged();
    if (not is_changed)
      emit changed();
  }
}

QJsonObject
C2cXreportsLocales::to_json(bool only_changed) const
{
  QJsonObject json_object;

 if (only_changed) {
    if (is_id_modified())
      json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    if (is_conditions_modified())
      json_object.insert(QLatin1String("conditions"), QJsonValue(m_conditions));
    if (is_group_management_modified())
      json_object.insert(QLatin1String("group_management"), QJsonValue(m_group_management));
    if (is_increase_impact_modified())
      json_object.insert(QLatin1String("increase_impact"), QJsonValue(m_increase_impact));
    if (is_modifications_modified())
      json_object.insert(QLatin1String("modifications"), QJsonValue(m_modifications));
    if (is_motivations_modified())
      json_object.insert(QLatin1String("motivations"), QJsonValue(m_motivations));
    if (is_other_comments_modified())
      json_object.insert(QLatin1String("other_comments"), QJsonValue(m_other_comments));
    if (is_place_modified())
      json_object.insert(QLatin1String("place"), QJsonValue(m_place));
    if (is_reduce_impact_modified())
      json_object.insert(QLatin1String("reduce_impact"), QJsonValue(m_reduce_impact));
    if (is_risk_modified())
      json_object.insert(QLatin1String("risk"), QJsonValue(m_risk));
    if (is_route_study_modified())
      json_object.insert(QLatin1String("route_study"), QJsonValue(m_route_study));
    if (is_safety_modified())
      json_object.insert(QLatin1String("safety"), QJsonValue(m_safety));
    if (is_time_management_modified())
      json_object.insert(QLatin1String("time_management"), QJsonValue(m_time_management));
    if (is_training_modified())
      json_object.insert(QLatin1String("training"), QJsonValue(m_training));
  } else {
    json_object.insert(QLatin1String("id"), QJsonValue(m_id));
    json_object.insert(QLatin1String("conditions"), QJsonValue(m_conditions));
    json_object.insert(QLatin1String("group_management"), QJsonValue(m_group_management));
    json_object.insert(QLatin1String("increase_impact"), QJsonValue(m_increase_impact));
    json_object.insert(QLatin1String("modifications"), QJsonValue(m_modifications));
    json_object.insert(QLatin1String("motivations"), QJsonValue(m_motivations));
    json_object.insert(QLatin1String("other_comments"), QJsonValue(m_other_comments));
    json_object.insert(QLatin1String("place"), QJsonValue(m_place));
    json_object.insert(QLatin1String("reduce_impact"), QJsonValue(m_reduce_impact));
    json_object.insert(QLatin1String("risk"), QJsonValue(m_risk));
    json_object.insert(QLatin1String("route_study"), QJsonValue(m_route_study));
    json_object.insert(QLatin1String("safety"), QJsonValue(m_safety));
    json_object.insert(QLatin1String("time_management"), QJsonValue(m_time_management));
    json_object.insert(QLatin1String("training"), QJsonValue(m_training));
  }

  return json_object;
}

QVariantHash
C2cXreportsLocales::to_variant_hash(bool only_changed) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_conditions_modified())
      variant_hash[QLatin1String("conditions")] = m_conditions;
    if (is_group_management_modified())
      variant_hash[QLatin1String("group_management")] = m_group_management;
    if (is_increase_impact_modified())
      variant_hash[QLatin1String("increase_impact")] = m_increase_impact;
    if (is_modifications_modified())
      variant_hash[QLatin1String("modifications")] = m_modifications;
    if (is_motivations_modified())
      variant_hash[QLatin1String("motivations")] = m_motivations;
    if (is_other_comments_modified())
      variant_hash[QLatin1String("other_comments")] = m_other_comments;
    if (is_place_modified())
      variant_hash[QLatin1String("place")] = m_place;
    if (is_reduce_impact_modified())
      variant_hash[QLatin1String("reduce_impact")] = m_reduce_impact;
    if (is_risk_modified())
      variant_hash[QLatin1String("risk")] = m_risk;
    if (is_route_study_modified())
      variant_hash[QLatin1String("route_study")] = m_route_study;
    if (is_safety_modified())
      variant_hash[QLatin1String("safety")] = m_safety;
    if (is_time_management_modified())
      variant_hash[QLatin1String("time_management")] = m_time_management;
    if (is_training_modified())
      variant_hash[QLatin1String("training")] = m_training;
  } else {
    variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("conditions")] = m_conditions;
    variant_hash[QLatin1String("group_management")] = m_group_management;
    variant_hash[QLatin1String("increase_impact")] = m_increase_impact;
    variant_hash[QLatin1String("modifications")] = m_modifications;
    variant_hash[QLatin1String("motivations")] = m_motivations;
    variant_hash[QLatin1String("other_comments")] = m_other_comments;
    variant_hash[QLatin1String("place")] = m_place;
    variant_hash[QLatin1String("reduce_impact")] = m_reduce_impact;
    variant_hash[QLatin1String("risk")] = m_risk;
    variant_hash[QLatin1String("route_study")] = m_route_study;
    variant_hash[QLatin1String("safety")] = m_safety;
    variant_hash[QLatin1String("time_management")] = m_time_management;
    variant_hash[QLatin1String("training")] = m_training;
  }

  return variant_hash;
}

QVariantList
C2cXreportsLocales::to_variant_list() const
{
  QVariantList variants;

  variants << m_id;
  variants << m_conditions;
  variants << m_group_management;
  variants << m_increase_impact;
  variants << m_modifications;
  variants << m_motivations;
  variants << m_other_comments;
  variants << m_place;
  variants << m_reduce_impact;
  variants << m_risk;
  variants << m_route_study;
  variants << m_safety;
  variants << m_time_management;
  variants << m_training;

  return variants;
}

QVariantHash
C2cXreportsLocales::to_variant_hash_sql(bool only_changed, bool duplicate) const
{
  QVariantHash variant_hash;

  if (only_changed) {
    if (is_id_modified())
      variant_hash[QLatin1String("id")] = m_id;
    if (is_conditions_modified())
      variant_hash[QLatin1String("conditions")] = m_conditions;
    if (is_group_management_modified())
      variant_hash[QLatin1String("group_management")] = m_group_management;
    if (is_increase_impact_modified())
      variant_hash[QLatin1String("increase_impact")] = m_increase_impact;
    if (is_modifications_modified())
      variant_hash[QLatin1String("modifications")] = m_modifications;
    if (is_motivations_modified())
      variant_hash[QLatin1String("motivations")] = m_motivations;
    if (is_other_comments_modified())
      variant_hash[QLatin1String("other_comments")] = m_other_comments;
    if (is_place_modified())
      variant_hash[QLatin1String("place")] = m_place;
    if (is_reduce_impact_modified())
      variant_hash[QLatin1String("reduce_impact")] = m_reduce_impact;
    if (is_risk_modified())
      variant_hash[QLatin1String("risk")] = m_risk;
    if (is_route_study_modified())
      variant_hash[QLatin1String("route_study")] = m_route_study;
    if (is_safety_modified())
      variant_hash[QLatin1String("safety")] = m_safety;
    if (is_time_management_modified())
      variant_hash[QLatin1String("time_management")] = m_time_management;
    if (is_training_modified())
      variant_hash[QLatin1String("training")] = m_training;
  } else {
    if (duplicate)
      variant_hash[QLatin1String("id")] = m_id;
    variant_hash[QLatin1String("conditions")] = m_conditions;
    variant_hash[QLatin1String("group_management")] = m_group_management;
    variant_hash[QLatin1String("increase_impact")] = m_increase_impact;
    variant_hash[QLatin1String("modifications")] = m_modifications;
    variant_hash[QLatin1String("motivations")] = m_motivations;
    variant_hash[QLatin1String("other_comments")] = m_other_comments;
    variant_hash[QLatin1String("place")] = m_place;
    variant_hash[QLatin1String("reduce_impact")] = m_reduce_impact;
    variant_hash[QLatin1String("risk")] = m_risk;
    variant_hash[QLatin1String("route_study")] = m_route_study;
    variant_hash[QLatin1String("safety")] = m_safety;
    variant_hash[QLatin1String("time_management")] = m_time_management;
    variant_hash[QLatin1String("training")] = m_training;
  }

  return variant_hash;
}

QVariantList
C2cXreportsLocales::to_variant_list_sql(bool duplicate) const
{
  QVariantList variants;

  if (duplicate)
    variants << m_id;
  variants << m_conditions;
  variants << m_group_management;
  variants << m_increase_impact;
  variants << m_modifications;
  variants << m_motivations;
  variants << m_other_comments;
  variants << m_place;
  variants << m_reduce_impact;
  variants << m_risk;
  variants << m_route_study;
  variants << m_safety;
  variants << m_time_management;
  variants << m_training;

  return variants;
}

QVariant
C2cXreportsLocales::field(int position) const
{
  switch(position) {
   case Schema::Fields::ID:
     return m_id;
   case Schema::Fields::CONDITIONS:
     return m_conditions;
   case Schema::Fields::GROUP_MANAGEMENT:
     return m_group_management;
   case Schema::Fields::INCREASE_IMPACT:
     return m_increase_impact;
   case Schema::Fields::MODIFICATIONS:
     return m_modifications;
   case Schema::Fields::MOTIVATIONS:
     return m_motivations;
   case Schema::Fields::OTHER_COMMENTS:
     return m_other_comments;
   case Schema::Fields::PLACE:
     return m_place;
   case Schema::Fields::REDUCE_IMPACT:
     return m_reduce_impact;
   case Schema::Fields::RISK:
     return m_risk;
   case Schema::Fields::ROUTE_STUDY:
     return m_route_study;
   case Schema::Fields::SAFETY:
     return m_safety;
   case Schema::Fields::TIME_MANAGEMENT:
     return m_time_management;
   case Schema::Fields::TRAINING:
     return m_training;
   default:
     return QVariant(); // error
  }
}

void
C2cXreportsLocales::set_field(int position, const QVariant & value)
{
  switch(position) {
   case Schema::Fields::ID: {
     m_id = value.toInt();
     break;
   }
   case Schema::Fields::CONDITIONS: {
     m_conditions = value.toString();
     break;
   }
   case Schema::Fields::GROUP_MANAGEMENT: {
     m_group_management = value.toString();
     break;
   }
   case Schema::Fields::INCREASE_IMPACT: {
     m_increase_impact = value.toString();
     break;
   }
   case Schema::Fields::MODIFICATIONS: {
     m_modifications = value.toString();
     break;
   }
   case Schema::Fields::MOTIVATIONS: {
     m_motivations = value.toString();
     break;
   }
   case Schema::Fields::OTHER_COMMENTS: {
     m_other_comments = value.toString();
     break;
   }
   case Schema::Fields::PLACE: {
     m_place = value.toString();
     break;
   }
   case Schema::Fields::REDUCE_IMPACT: {
     m_reduce_impact = value.toString();
     break;
   }
   case Schema::Fields::RISK: {
     m_risk = value.toString();
     break;
   }
   case Schema::Fields::ROUTE_STUDY: {
     m_route_study = value.toString();
     break;
   }
   case Schema::Fields::SAFETY: {
     m_safety = value.toString();
     break;
   }
   case Schema::Fields::TIME_MANAGEMENT: {
     m_time_management = value.toString();
     break;
   }
   case Schema::Fields::TRAINING: {
     m_training = value.toString();
     break;
   }
  }
}

void
C2cXreportsLocales::set_insert_id(int id)
{
  set_id(id);

}

bool
C2cXreportsLocales::can_update() const
{
  return m_id > 0;
}

QVariantHash
C2cXreportsLocales::rowid_kwargs() const // To update row
{
  QVariantHash where_kwargs;
  where_kwargs[QLatin1String("id")] = m_id;
  return where_kwargs;
}

QDataStream &
operator<<(QDataStream & out, const C2cXreportsLocales & obj)
{
  out << obj.id();
  out << obj.conditions();
  out << obj.group_management();
  out << obj.increase_impact();
  out << obj.modifications();
  out << obj.motivations();
  out << obj.other_comments();
  out << obj.place();
  out << obj.reduce_impact();
  out << obj.risk();
  out << obj.route_study();
  out << obj.safety();
  out << obj.time_management();
  out << obj.training();

  return out;
}

QDataStream &
operator>>(QDataStream & in, C2cXreportsLocales & obj)
{
  QString _QString;
  int _int;
  in >> _int;
  obj.set_id(_int);
  in >> _QString;
  obj.set_conditions(_QString);
  in >> _QString;
  obj.set_group_management(_QString);
  in >> _QString;
  obj.set_increase_impact(_QString);
  in >> _QString;
  obj.set_modifications(_QString);
  in >> _QString;
  obj.set_motivations(_QString);
  in >> _QString;
  obj.set_other_comments(_QString);
  in >> _QString;
  obj.set_place(_QString);
  in >> _QString;
  obj.set_reduce_impact(_QString);
  in >> _QString;
  obj.set_risk(_QString);
  in >> _QString;
  obj.set_route_study(_QString);
  in >> _QString;
  obj.set_safety(_QString);
  in >> _QString;
  obj.set_time_management(_QString);
  in >> _QString;
  obj.set_training(_QString);

  return in;
}

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cXreportsLocales & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  // Fixme: quote string !
  debug.nospace() << QStringLiteral("C2cXreportsLocales(");
  debug << obj.id();
  debug << QStringLiteral(", ");
  debug << obj.conditions();
  debug << QStringLiteral(", ");
  debug << obj.group_management();
  debug << QStringLiteral(", ");
  debug << obj.increase_impact();
  debug << QStringLiteral(", ");
  debug << obj.modifications();
  debug << QStringLiteral(", ");
  debug << obj.motivations();
  debug << QStringLiteral(", ");
  debug << obj.other_comments();
  debug << QStringLiteral(", ");
  debug << obj.place();
  debug << QStringLiteral(", ");
  debug << obj.reduce_impact();
  debug << QStringLiteral(", ");
  debug << obj.risk();
  debug << QStringLiteral(", ");
  debug << obj.route_study();
  debug << QStringLiteral(", ");
  debug << obj.safety();
  debug << QStringLiteral(", ");
  debug << obj.time_management();
  debug << QStringLiteral(", ");
  debug << obj.training();
  debug << ')';

  return debug;
}
#endif

/**************************************************************************************************/

#ifndef QT_NO_DEBUG_STREAM
QDebug
operator<<(QDebug debug, const C2cXreportsLocalesPtr & obj)
{
  QDebugStateSaver saver(debug); // Fixme: ???

  debug.noquote() << QStringLiteral("C2cXreportsLocalesPtr ->");
  if (obj)
    debug << *obj;
   else
  debug  << QStringLiteral("NULL");

  return debug;
}
#endif

/**************************************************************************************************/

C2cXreportsLocalesCache::C2cXreportsLocalesCache()
 : m_loaded_instances(),
   m_modified_instances()
{}

C2cXreportsLocalesCache::~C2cXreportsLocalesCache()
{}

void
C2cXreportsLocalesCache::add(C2cXreportsLocalesPtr & ptr)
{
  m_loaded_instances.insert(ptr.data(), ptr);
  QObject::connect(ptr.data(), &C2cXreportsLocales::changed,
                   this, &C2cXreportsLocalesCache::on_changed);
}

void
C2cXreportsLocalesCache::remove(C2cXreportsLocalesPtr & ptr)
{
  Q_UNUSED(ptr);
}

void
C2cXreportsLocalesCache::on_changed()
{
  C2cXreportsLocales * row = qobject_cast<C2cXreportsLocales *>(QObject::sender());
  qATInfo() << "On changed" << row;
  C2cXreportsLocalesPtr row_ptr = m_loaded_instances[row];
  if (row_ptr)
    m_modified_instances.insert(row, row_ptr);
}

/**************************************************************************************************/

C2cXreportsLocalesModel::C2cXreportsLocalesModel()
  : QAbstractListModel(),
    m_items()
{}

C2cXreportsLocalesModel::C2cXreportsLocalesModel(const ItemList & items)
  : QAbstractListModel(),
    m_items(items)
{}

C2cXreportsLocalesModel::~C2cXreportsLocalesModel()
{}

int
C2cXreportsLocalesModel::rowCount(const QModelIndex & parent) const
{
  Q_UNUSED(parent);
  return m_items.size();
}

QVariant
C2cXreportsLocalesModel::data(const QModelIndex & index, int role) const
{
  if (!index.isValid() || index.row() < 0)
    return QVariant();

  if (index.row() >= m_items.count()) {
    qWarning() << "C2cXreportsLocalesModel: Index out of bound";
    return QVariant();
  }

  const Item & item = m_items[index.row()];
  switch (role) {
  case ID:
    return item->id();
  case CONDITIONS:
    return item->conditions();
  case GROUP_MANAGEMENT:
    return item->group_management();
  case INCREASE_IMPACT:
    return item->increase_impact();
  case MODIFICATIONS:
    return item->modifications();
  case MOTIVATIONS:
    return item->motivations();
  case OTHER_COMMENTS:
    return item->other_comments();
  case PLACE:
    return item->place();
  case REDUCE_IMPACT:
    return item->reduce_impact();
  case RISK:
    return item->risk();
  case ROUTE_STUDY:
    return item->route_study();
  case SAFETY:
    return item->safety();
  case TIME_MANAGEMENT:
    return item->time_management();
  case TRAINING:
    return item->training();
  default:
    break;
  }

  return QVariant();
}

QHash<int, QByteArray>
C2cXreportsLocalesModel::roleNames() const
{
  // Fixme: cache ???
  QHash<int, QByteArray> role_names;
  role_names[ID] = QStringLiteral("id").latin1();
  role_names[CONDITIONS] = QStringLiteral("conditions").latin1();
  role_names[GROUP_MANAGEMENT] = QStringLiteral("group_management").latin1();
  role_names[INCREASE_IMPACT] = QStringLiteral("increase_impact").latin1();
  role_names[MODIFICATIONS] = QStringLiteral("modifications").latin1();
  role_names[MOTIVATIONS] = QStringLiteral("motivations").latin1();
  role_names[OTHER_COMMENTS] = QStringLiteral("other_comments").latin1();
  role_names[PLACE] = QStringLiteral("place").latin1();
  role_names[REDUCE_IMPACT] = QStringLiteral("reduce_impact").latin1();
  role_names[RISK] = QStringLiteral("risk").latin1();
  role_names[ROUTE_STUDY] = QStringLiteral("route_study").latin1();
  role_names[SAFETY] = QStringLiteral("safety").latin1();
  role_names[TIME_MANAGEMENT] = QStringLiteral("time_management").latin1();
  role_names[TRAINING] = QStringLiteral("training").latin1();

  return role_names;
}

void
C2cXreportsLocalesModel::clear_items()
{
  beginResetModel();
  m_items.clear();
  endResetModel();
}

void
C2cXreportsLocalesModel::set_items(const ItemList & items)
{
  beginResetModel();
  m_items = items;
  endResetModel();
}
C2c::C2c(QoDatabase & database)
  : QoDatabaseSchema(database),
    m_c2c_area_associations(nullptr),
    m_c2c_areas(nullptr),
    m_c2c_articles(nullptr),
    m_c2c_associations(nullptr),
    m_c2c_books(nullptr),
    m_c2c_documents(nullptr),
    m_c2c_documents_geometries(nullptr),
    m_c2c_documents_locales(nullptr),
    m_c2c_documents_topics(nullptr),
    m_c2c_documents_versions(nullptr),
    m_c2c_images(nullptr),
    m_c2c_map_associations(nullptr),
    m_c2c_maps(nullptr),
    m_c2c_outings(nullptr),
    m_c2c_outings_locales(nullptr),
    m_c2c_routes(nullptr),
    m_c2c_routes_locales(nullptr),
    m_c2c_user(nullptr),
    m_c2c_user_profiles(nullptr),
    m_c2c_waypoints(nullptr),
    m_c2c_waypoints_locales(nullptr),
    m_c2c_xreports(nullptr),
    m_c2c_xreports_locales(nullptr),
    m_c2c_area_associations_cache(),
    m_c2c_areas_cache(),
    m_c2c_articles_cache(),
    m_c2c_associations_cache(),
    m_c2c_books_cache(),
    m_c2c_documents_cache(),
    m_c2c_documents_geometries_cache(),
    m_c2c_documents_locales_cache(),
    m_c2c_documents_topics_cache(),
    m_c2c_documents_versions_cache(),
    m_c2c_images_cache(),
    m_c2c_map_associations_cache(),
    m_c2c_maps_cache(),
    m_c2c_outings_cache(),
    m_c2c_outings_locales_cache(),
    m_c2c_routes_cache(),
    m_c2c_routes_locales_cache(),
    m_c2c_user_cache(),
    m_c2c_user_profiles_cache(),
    m_c2c_waypoints_cache(),
    m_c2c_waypoints_locales_cache(),
    m_c2c_xreports_cache(),
    m_c2c_xreports_locales_cache()
{
  m_c2c_area_associations = &register_table(C2cAreaAssociationsSchema::instance());
  m_c2c_areas = &register_table(C2cAreasSchema::instance());
  m_c2c_articles = &register_table(C2cArticlesSchema::instance());
  m_c2c_associations = &register_table(C2cAssociationsSchema::instance());
  m_c2c_books = &register_table(C2cBooksSchema::instance());
  m_c2c_documents = &register_table(C2cDocumentsSchema::instance());
  m_c2c_documents_geometries = &register_table(C2cDocumentsGeometriesSchema::instance());
  m_c2c_documents_locales = &register_table(C2cDocumentsLocalesSchema::instance());
  m_c2c_documents_topics = &register_table(C2cDocumentsTopicsSchema::instance());
  m_c2c_documents_versions = &register_table(C2cDocumentsVersionsSchema::instance());
  m_c2c_images = &register_table(C2cImagesSchema::instance());
  m_c2c_map_associations = &register_table(C2cMapAssociationsSchema::instance());
  m_c2c_maps = &register_table(C2cMapsSchema::instance());
  m_c2c_outings = &register_table(C2cOutingsSchema::instance());
  m_c2c_outings_locales = &register_table(C2cOutingsLocalesSchema::instance());
  m_c2c_routes = &register_table(C2cRoutesSchema::instance());
  m_c2c_routes_locales = &register_table(C2cRoutesLocalesSchema::instance());
  m_c2c_user = &register_table(C2cUserSchema::instance());
  m_c2c_user_profiles = &register_table(C2cUserProfilesSchema::instance());
  m_c2c_waypoints = &register_table(C2cWaypointsSchema::instance());
  m_c2c_waypoints_locales = &register_table(C2cWaypointsLocalesSchema::instance());
  m_c2c_xreports = &register_table(C2cXreportsSchema::instance());
  m_c2c_xreports_locales = &register_table(C2cXreportsLocalesSchema::instance());
}

C2c::~C2c()
{}

template<>
void
C2c::register_row<C2cAreaAssociations>(C2cAreaAssociationsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_area_associations_cache.add(row);
}
template<>
void
C2c::register_row<C2cAreas>(C2cAreasPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_areas_cache.add(row);
}
template<>
void
C2c::register_row<C2cArticles>(C2cArticlesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_articles_cache.add(row);
}
template<>
void
C2c::register_row<C2cAssociations>(C2cAssociationsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_associations_cache.add(row);
}
template<>
void
C2c::register_row<C2cBooks>(C2cBooksPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_books_cache.add(row);
}
template<>
void
C2c::register_row<C2cDocuments>(C2cDocumentsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_documents_cache.add(row);
}
template<>
void
C2c::register_row<C2cDocumentsGeometries>(C2cDocumentsGeometriesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_documents_geometries_cache.add(row);
}
template<>
void
C2c::register_row<C2cDocumentsLocales>(C2cDocumentsLocalesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_documents_locales_cache.add(row);
}
template<>
void
C2c::register_row<C2cDocumentsTopics>(C2cDocumentsTopicsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_documents_topics_cache.add(row);
}
template<>
void
C2c::register_row<C2cDocumentsVersions>(C2cDocumentsVersionsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_documents_versions_cache.add(row);
}
template<>
void
C2c::register_row<C2cImages>(C2cImagesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_images_cache.add(row);
}
template<>
void
C2c::register_row<C2cMapAssociations>(C2cMapAssociationsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_map_associations_cache.add(row);
}
template<>
void
C2c::register_row<C2cMaps>(C2cMapsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_maps_cache.add(row);
}
template<>
void
C2c::register_row<C2cOutings>(C2cOutingsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_outings_cache.add(row);
}
template<>
void
C2c::register_row<C2cOutingsLocales>(C2cOutingsLocalesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_outings_locales_cache.add(row);
}
template<>
void
C2c::register_row<C2cRoutes>(C2cRoutesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_routes_cache.add(row);
}
template<>
void
C2c::register_row<C2cRoutesLocales>(C2cRoutesLocalesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_routes_locales_cache.add(row);
}
template<>
void
C2c::register_row<C2cUser>(C2cUserPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_user_cache.add(row);
}
template<>
void
C2c::register_row<C2cUserProfiles>(C2cUserProfilesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_user_profiles_cache.add(row);
}
template<>
void
C2c::register_row<C2cWaypoints>(C2cWaypointsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_waypoints_cache.add(row);
}
template<>
void
C2c::register_row<C2cWaypointsLocales>(C2cWaypointsLocalesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_waypoints_locales_cache.add(row);
}
template<>
void
C2c::register_row<C2cXreports>(C2cXreportsPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_xreports_cache.add(row);
}
template<>
void
C2c::register_row<C2cXreportsLocales>(C2cXreportsLocalesPtr & row)
{
  qATInfo() << "Register in cache" << row;
  m_c2c_xreports_locales_cache.add(row);
}

/**************************************************************************************************/
// QC_END_NAMESPACE