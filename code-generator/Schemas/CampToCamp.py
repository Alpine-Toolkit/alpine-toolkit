#! /usr/bin/env python3
# -*- Python -*-

# This files was generated by generate-camptocamp-orm
#   api version: c8b0713724b3a5a1366db3ab5e9e8026476d6597
#   common version: 3f8b149cea1a01e450f3cdce8c1e105a4f6df736

####################################################################################################
#
# This file is part of the Alpine Toolkit software.
# Copyright (C) 2017 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
# SPDX-License-Identifier: GPL-3.0-only
#
####################################################################################################

####################################################################################################

output = ('src', 'data_sources', 'camptocamp', 'camptocamp_schema')

####################################################################################################

# from CodeGenerator.CppType import TypeConversion

from CodeGenerator.Orm import SchemaRepository, Schema, Field, ComputedField
from CodeGenerator.Orm.CustomType import JsonGeoCoordinate
from CodeGenerator.Orm.StandardType import Boolean, Integer, Char, Date, DateTime, Real, String, StringList
from CodeGenerator.Template import CustomCode

####################################################################################################

class C2cAreaAssociations(Schema):

    __table_name__ = 'c2c_area_associations'

    __order__ = (
        'area_id',
        'document_id',
    )

    area_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.areas.document_id']

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']


####################################################################################################

class C2cAreas(Schema):

    __table_name__ = 'c2c_areas'

    __order__ = (
        'document_id',
        'area_type',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    area_type = Field(String)
    # Enum -> VARCHAR(12)
    # ['range', 'admin_limits', 'country']


####################################################################################################

class C2cArticles(Schema):

    __table_name__ = 'c2c_articles'

    __order__ = (
        'document_id',
        'activities',
        'article_type',
        'categories',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    activities = Field(StringList)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    article_type = Field(String)
    # Enum -> VARCHAR(8)
    # ['collab', 'personal']

    categories = Field(StringList)
    # ArrayOfEnum -> None
    # ['mountain_environment', 'gear', 'technical', 'topoguide_supplements', 'soft_mobility', 'expeditions', 'stories', 'c2c_meetings', 'tags', 'site_info', 'association']


####################################################################################################

class C2cAssociations(Schema):

    __table_name__ = 'c2c_associations'

    __order__ = (
        'child_document_id',
        'parent_document_id',
        'child_document_type',
        'parent_document_type',
    )

    child_document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    parent_document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    child_document_type = Field(Char, nullable=False)
    # String -> VARCHAR(1)

    parent_document_type = Field(Char, nullable=False)
    # String -> VARCHAR(1)


####################################################################################################

class C2cBooks(Schema):

    __table_name__ = 'c2c_books'

    __order__ = (
        'document_id',
        'activities',
        'author',
        'book_types',
        'editor',
        'isbn',
        'langs',
        'nb_pages',
        'publication_date',
        'url',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    activities = Field(StringList)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    author = Field(String)
    # String -> VARCHAR(100)

    book_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['topo', 'environment', 'historical', 'biography', 'photos-art', 'novel', 'technics', 'tourism', 'magazine']

    editor = Field(String)
    # String -> VARCHAR(100)

    isbn = Field(String)
    # String -> VARCHAR(17)

    langs = Field(StringList)
    # ARRAY -> VARCHAR(2)[]

    nb_pages = Field(Integer)
    # SmallInteger -> SMALLINT

    publication_date = Field(String)
    # String -> VARCHAR(100)

    url = Field(String)
    # String -> VARCHAR(255)


####################################################################################################

class C2cDocuments(Schema):

    __table_name__ = 'c2c_documents'

    __order__ = (
        'document_id',
        'protected_flag',
        'quality',
        'redirects_to',
        'type',
        'version',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER

    protected_flag = Field(Boolean, nullable=False, json_name='protected', sql_name='protected')
    # Boolean -> BOOLEAN

    quality = Field(String, nullable=False)
    # Enum -> VARCHAR(6)
    # ['empty', 'draft', 'medium', 'fine', 'great']

    redirects_to = Field(Integer)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    type = Field(Char)
    # String -> VARCHAR(1)

    version = Field(Integer, nullable=False)
    # Integer -> INTEGER


####################################################################################################

class C2cDocumentsGeometries(Schema):

    __table_name__ = 'c2c_documents_geometries'

    __order__ = (
        'document_id',
        'geom',
        'geom_detail',
        'version',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    geom = Field(String)
    # Geometry -> geometry(POINT,3857)

    geom_detail = Field(String)
    # Geometry -> geometry(GEOMETRY,3857)

    version = Field(Integer, nullable=False)
    # Integer -> INTEGER


####################################################################################################

class C2cDocumentsLocales(Schema):

    __table_name__ = 'c2c_documents_locales'

    __order__ = (
        'id',
        'description',
        'document_id',
        'lang',
        'summary',
        'title',
        'type',
        'version',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER

    description = Field(String)
    # String -> VARCHAR

    document_id = Field(Integer, nullable=False)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    lang = Field(String, nullable=False)
    # String -> VARCHAR(2)
    # Foreign Keys: ['guidebook.langs.lang']

    summary = Field(String)
    # String -> VARCHAR

    title = Field(String, nullable=False)
    # String -> VARCHAR(150)

    type = Field(Char)
    # String -> VARCHAR(1)

    version = Field(Integer, nullable=False)
    # Integer -> INTEGER


####################################################################################################

class C2cDocumentsTopics(Schema):

    __table_name__ = 'c2c_documents_topics'

    __order__ = (
        'document_locale_id',
        'topic_id',
    )

    document_locale_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_locales.id']

    topic_id = Field(Integer, nullable=False)
    # Integer -> INTEGER


####################################################################################################

class C2cDocumentsVersions(Schema):

    __table_name__ = 'c2c_documents_versions'

    __order__ = (
        'id',
        'document_archive_id',
        'document_geometry_archive_id',
        'document_id',
        'document_locales_archive_id',
        'history_metadata_id',
        'lang',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER

    document_archive_id = Field(Integer, nullable=False)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_archives.id']

    document_geometry_archive_id = Field(Integer)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_geometries_archives.id']

    document_id = Field(Integer, nullable=False)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    document_locales_archive_id = Field(Integer, nullable=False)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_locales_archives.id']

    history_metadata_id = Field(Integer, nullable=False)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.history_metadata.id']

    lang = Field(String, nullable=False)
    # String -> VARCHAR(2)
    # Foreign Keys: ['guidebook.langs.lang']


####################################################################################################

class C2cImages(Schema):

    __table_name__ = 'c2c_images'

    __order__ = (
        'document_id',
        'activities',
        'author',
        'camera_name',
        'categories',
        'date_time',
        'elevation',
        'exposure_time',
        'file_size',
        'filename',
        'fnumber',
        'focal_length',
        'height',
        'image_type',
        'iso_speed',
        'width',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    activities = Field(StringList)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    author = Field(String)
    # String -> VARCHAR(100)

    camera_name = Field(String)
    # String -> VARCHAR(100)

    categories = Field(StringList)
    # ArrayOfEnum -> None
    # ['landscapes', 'detail', 'action', 'track', 'rise', 'descent', 'topo', 'people', 'fauna', 'flora', 'nivology', 'geology', 'hut', 'equipment', 'book', 'help', 'misc']

    date_time = Field(DateTime)
    # DateTime -> DATETIME

    elevation = Field(Integer)
    # SmallInteger -> SMALLINT

    exposure_time = Field(Real)
    # Float -> FLOAT

    file_size = Field(Integer)
    # Integer -> INTEGER

    filename = Field(String, nullable=False)
    # String -> VARCHAR(30)

    fnumber = Field(Real)
    # Float -> FLOAT

    focal_length = Field(Real)
    # Float -> FLOAT

    height = Field(Integer)
    # SmallInteger -> SMALLINT

    image_type = Field(String)
    # Enum -> VARCHAR(13)
    # ['collaborative', 'personal', 'copyright']

    iso_speed = Field(Integer)
    # SmallInteger -> SMALLINT

    width = Field(Integer)
    # SmallInteger -> SMALLINT


####################################################################################################

class C2cMapAssociations(Schema):

    __table_name__ = 'c2c_map_associations'

    __order__ = (
        'document_id',
        'topo_map_id',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    topo_map_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.maps.document_id']


####################################################################################################

class C2cMaps(Schema):

    __table_name__ = 'c2c_maps'

    __order__ = (
        'document_id',
        'code',
        'editor',
        'scale',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    code = Field(String)
    # String -> VARCHAR

    editor = Field(String)
    # Enum -> VARCHAR(13)
    # ['IGN', 'Swisstopo', 'Escursionista']

    scale = Field(String)
    # Enum -> VARCHAR(6)
    # ['25000', '50000', '100000']


####################################################################################################

class C2cOutings(Schema):

    __table_name__ = 'c2c_outings'

    __order__ = (
        'document_id',
        'access_condition',
        'activities',
        'avalanche_signs',
        'condition_rating',
        'date_end',
        'date_start',
        'disable_comments',
        'elevation_access',
        'elevation_down_snow',
        'elevation_max',
        'elevation_min',
        'elevation_up_snow',
        'frequentation',
        'glacier_rating',
        'height_diff_down',
        'height_diff_up',
        'hut_status',
        'length_total',
        'lift_status',
        'partial_trip',
        'participant_count',
        'public_transport',
        'snow_quality',
        'snow_quantity',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    access_condition = Field(String)
    # Enum -> VARCHAR(14)
    # ['cleared', 'snowy', 'closed_snow', 'closed_cleared']

    activities = Field(StringList, nullable=False)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    avalanche_signs = Field(StringList)
    # ArrayOfEnum -> None
    # ['no', 'danger_sign', 'recent_avalanche', 'natural_avalanche', 'accidental_avalanche']

    condition_rating = Field(String)
    # Enum -> VARCHAR(9)
    # ['excellent', 'good', 'average', 'poor', 'awful']

    date_end = Field(Date, nullable=False)
    # Date -> DATE

    date_start = Field(Date, nullable=False)
    # Date -> DATE

    disable_comments = Field(Boolean)
    # Boolean -> BOOLEAN

    elevation_access = Field(Integer)
    # SmallInteger -> SMALLINT

    elevation_down_snow = Field(Integer)
    # SmallInteger -> SMALLINT

    elevation_max = Field(Integer)
    # SmallInteger -> SMALLINT

    elevation_min = Field(Integer)
    # SmallInteger -> SMALLINT

    elevation_up_snow = Field(Integer)
    # SmallInteger -> SMALLINT

    frequentation = Field(String)
    # Enum -> VARCHAR(11)
    # ['quiet', 'some', 'crowded', 'overcrowded']

    glacier_rating = Field(String)
    # Enum -> VARCHAR(10)
    # ['easy', 'possible', 'difficult', 'impossible']

    height_diff_down = Field(Integer)
    # SmallInteger -> SMALLINT

    height_diff_up = Field(Integer)
    # SmallInteger -> SMALLINT

    hut_status = Field(String)
    # Enum -> VARCHAR(16)
    # ['open_guarded', 'open_non_guarded', 'closed_hut']

    length_total = Field(Integer)
    # Integer -> INTEGER

    lift_status = Field(String)
    # Enum -> VARCHAR(6)
    # ['open', 'closed']

    partial_trip = Field(Boolean)
    # Boolean -> BOOLEAN

    participant_count = Field(Integer)
    # SmallInteger -> SMALLINT

    public_transport = Field(Boolean)
    # Boolean -> BOOLEAN

    snow_quality = Field(String)
    # Enum -> VARCHAR(9)
    # ['excellent', 'good', 'average', 'poor', 'awful']

    snow_quantity = Field(String)
    # Enum -> VARCHAR(9)
    # ['excellent', 'good', 'average', 'poor', 'awful']


####################################################################################################

class C2cOutingsLocales(Schema):

    __table_name__ = 'c2c_outings_locales'

    __order__ = (
        'id',
        'access_comment',
        'avalanches',
        'conditions',
        'conditions_levels',
        'hut_comment',
        'participants',
        'route_description',
        'timing',
        'weather',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_locales.id']

    access_comment = Field(String)
    # String -> VARCHAR

    avalanches = Field(String)
    # String -> VARCHAR

    conditions = Field(String)
    # String -> VARCHAR

    conditions_levels = Field(String)
    # String -> VARCHAR

    hut_comment = Field(String)
    # String -> VARCHAR

    participants = Field(String)
    # String -> VARCHAR

    route_description = Field(String)
    # String -> VARCHAR

    timing = Field(String)
    # String -> VARCHAR

    weather = Field(String)
    # String -> VARCHAR


####################################################################################################

class C2cRoutes(Schema):

    __table_name__ = 'c2c_routes'

    __order__ = (
        'document_id',
        'activities',
        'aid_rating',
        'climbing_outdoor_type',
        'configuration',
        'difficulties_height',
        'durations',
        'elevation_max',
        'elevation_min',
        'engagement_rating',
        'equipment_rating',
        'exposition_rock_rating',
        'glacier_gear',
        'global_rating',
        'height_diff_access',
        'height_diff_difficulties',
        'height_diff_down',
        'height_diff_up',
        'hiking_mtb_exposition',
        'hiking_rating',
        'ice_rating',
        'labande_global_rating',
        'labande_ski_rating',
        'lift_access',
        'main_waypoint_id',
        'mixed_rating',
        'mtb_down_rating',
        'mtb_height_diff_portages',
        'mtb_length_asphalt',
        'mtb_length_trail',
        'mtb_up_rating',
        'orientations',
        'risk_rating',
        'rock_free_rating',
        'rock_required_rating',
        'rock_types',
        'route_length',
        'route_types',
        'ski_exposition',
        'ski_rating',
        'slackline_height',
        'slackline_type',
        'snowshoe_rating',
        'via_ferrata_rating',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    activities = Field(StringList, nullable=False)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    aid_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['A0', 'A0+', 'A1', 'A1+', 'A2', 'A2+', 'A3', 'A3+', 'A4', 'A4+', 'A5', 'A5+']

    climbing_outdoor_type = Field(String)
    # Enum -> VARCHAR(9)
    # ['single', 'multi', 'bloc', 'psicobloc']

    configuration = Field(StringList)
    # ArrayOfEnum -> None
    # ['edge', 'pillar', 'face', 'corridor', 'goulotte', 'glacier']

    difficulties_height = Field(Integer)
    # SmallInteger -> SMALLINT

    durations = Field(StringList)
    # ArrayOfEnum -> None
    # ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '10+']

    elevation_max = Field(Integer)
    # SmallInteger -> SMALLINT

    elevation_min = Field(Integer)
    # SmallInteger -> SMALLINT

    engagement_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['I', 'II', 'III', 'IV', 'V', 'VI']

    equipment_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['P1', 'P1+', 'P2', 'P2+', 'P3', 'P3+', 'P4', 'P4+']

    exposition_rock_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['E1', 'E2', 'E3', 'E4', 'E5', 'E6']

    glacier_gear = Field(String, nullable=False)
    # Enum -> VARCHAR(19)
    # ['no', 'glacier_safety_gear', 'crampons_spring', 'crampons_req', 'glacier_crampons']

    global_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['F', 'F+', 'PD-', 'PD', 'PD+', 'AD-', 'AD', 'AD+', 'D-', 'D', 'D+', 'TD-', 'TD', 'TD+', 'ED-', 'ED', 'ED+', 'ED4', 'ED5', 'ED6', 'ED7']

    height_diff_access = Field(Integer)
    # SmallInteger -> SMALLINT

    height_diff_difficulties = Field(Integer)
    # SmallInteger -> SMALLINT

    height_diff_down = Field(Integer)
    # SmallInteger -> SMALLINT

    height_diff_up = Field(Integer)
    # SmallInteger -> SMALLINT

    hiking_mtb_exposition = Field(String)
    # Enum -> VARCHAR(2)
    # ['E1', 'E2', 'E3', 'E4']

    hiking_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['T1', 'T2', 'T3', 'T4', 'T5']

    ice_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['1', '2', '3', '3+', '4', '4+', '5', '5+', '6', '6+', '7', '7+']

    labande_global_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['F', 'F+', 'PD-', 'PD', 'PD+', 'AD-', 'AD', 'AD+', 'D-', 'D', 'D+', 'TD-', 'TD', 'TD+', 'ED-', 'ED', 'ED+', 'ED4', 'ED5', 'ED6', 'ED7']

    labande_ski_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['S1', 'S2', 'S3', 'S4', 'S5', 'S6', 'S7']

    lift_access = Field(Boolean)
    # Boolean -> BOOLEAN

    main_waypoint_id = Field(Integer)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    mixed_rating = Field(String)
    # Enum -> VARCHAR(4)
    # ['M1', 'M2', 'M3', 'M3+', 'M4', 'M4+', 'M5', 'M5+', 'M6', 'M6+', 'M7', 'M7+', 'M8', 'M8+', 'M9', 'M9+', 'M10', 'M10+', 'M11', 'M11+', 'M12', 'M12+']

    mtb_down_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['V1', 'V2', 'V3', 'V4', 'V5']

    mtb_height_diff_portages = Field(Integer)
    # Integer -> INTEGER

    mtb_length_asphalt = Field(Integer)
    # Integer -> INTEGER

    mtb_length_trail = Field(Integer)
    # Integer -> INTEGER

    mtb_up_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['M1', 'M2', 'M3', 'M4', 'M5']

    orientations = Field(StringList)
    # ArrayOfEnum -> None
    # ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']

    risk_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['X1', 'X2', 'X3', 'X4', 'X5']

    rock_free_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['2', '3a', '3b', '3c', '4a', '4b', '4c', '5a', '5a+', '5b', '5b+', '5c', '5c+', '6a', '6a+', '6b', '6b+', '6c', '6c+', '7a', '7a+', '7b', '7b+', '7c', '7c+', '8a', '8a+', '8b', '8b+', '8c', '8c+', '9a', '9a+', '9b', '9b+', '9c', '9c+']

    rock_required_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['2', '3a', '3b', '3c', '4a', '4b', '4c', '5a', '5a+', '5b', '5b+', '5c', '5c+', '6a', '6a+', '6b', '6b+', '6c', '6c+', '7a', '7a+', '7b', '7b+', '7c', '7c+', '8a', '8a+', '8b', '8b+', '8c', '8c+', '9a', '9a+', '9b', '9b+', '9c', '9c+']

    rock_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['basalte', 'calcaire', 'conglomerat', 'craie', 'gneiss', 'gres', 'granit', 'migmatite', 'mollasse_calcaire', 'pouding', 'quartzite', 'rhyolite', 'schiste', 'trachyte', 'artificial']

    route_length = Field(Integer)
    # Integer -> INTEGER

    route_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['return_same_way', 'loop', 'loop_hut', 'traverse', 'raid', 'expedition']

    ski_exposition = Field(String)
    # Enum -> VARCHAR(2)
    # ['E1', 'E2', 'E3', 'E4']

    ski_rating = Field(String)
    # Enum -> VARCHAR(3)
    # ['1.1', '1.2', '1.3', '2.1', '2.2', '2.3', '3.1', '3.2', '3.3', '4.1', '4.2', '4.3', '5.1', '5.2', '5.3', '5.4', '5.5', '5.6']

    slackline_height = Field(Integer)
    # SmallInteger -> SMALLINT

    slackline_type = Field(String)
    # Enum -> VARCHAR(9)
    # ['slackline', 'highline', 'waterline']

    snowshoe_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['R1', 'R2', 'R3', 'R4', 'R5']

    via_ferrata_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['K1', 'K2', 'K3', 'K4', 'K5', 'K6']


####################################################################################################

class C2cRoutesLocales(Schema):

    __table_name__ = 'c2c_routes_locales'

    __order__ = (
        'id',
        'external_resources',
        'gear',
        'remarks',
        'route_history',
        'slackline_anchor1',
        'slackline_anchor2',
        'slope',
        'title_prefix',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_locales.id']

    external_resources = Field(String)
    # String -> VARCHAR

    gear = Field(String)
    # String -> VARCHAR

    remarks = Field(String)
    # String -> VARCHAR

    route_history = Field(String)
    # String -> VARCHAR

    slackline_anchor1 = Field(String)
    # String -> VARCHAR

    slackline_anchor2 = Field(String)
    # String -> VARCHAR

    slope = Field(String)
    # String -> VARCHAR

    title_prefix = Field(String)
    # String -> VARCHAR


####################################################################################################

class C2cUser(Schema):

    __table_name__ = 'c2c_user'

    __order__ = (
        'id',
        'blocked',
        'email',
        'email_to_validate',
        'email_validated',
        'feed_filter_activities',
        'feed_followed_only',
        'forum_username',
        'is_profile_public',
        'lang',
        'last_modified',
        'moderator',
        'name',
        'password',
        'username',
        'validation_nonce',
        'validation_nonce_expire',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.user_profiles.document_id']

    blocked = Field(Boolean, nullable=False)
    # Boolean -> BOOLEAN

    email = Field(String, nullable=False)
    # String -> VARCHAR(200)

    email_to_validate = Field(String)
    # String -> VARCHAR(200)

    email_validated = Field(Boolean, nullable=False)
    # Boolean -> BOOLEAN

    feed_filter_activities = Field(StringList, nullable=False)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    feed_followed_only = Field(Boolean, nullable=False)
    # Boolean -> BOOLEAN

    forum_username = Field(String, nullable=False)
    # String -> VARCHAR(25)

    is_profile_public = Field(Boolean, nullable=False)
    # Boolean -> BOOLEAN

    lang = Field(String, nullable=False)
    # String -> VARCHAR(2)
    # Foreign Keys: ['guidebook.langs.lang']

    last_modified = Field(DateTime, nullable=False)
    # DateTime -> DATETIME

    moderator = Field(Boolean, nullable=False)
    # Boolean -> BOOLEAN

    name = Field(String, nullable=False)
    # String -> VARCHAR(200)

    password = Field(String, nullable=False)
    # String -> VARCHAR(255)

    username = Field(String, nullable=False)
    # String -> VARCHAR(200)

    validation_nonce = Field(String)
    # String -> VARCHAR(200)

    validation_nonce_expire = Field(DateTime)
    # DateTime -> DATETIME


####################################################################################################

class C2cUserProfiles(Schema):

    __table_name__ = 'c2c_user_profiles'

    __order__ = (
        'document_id',
        'activities',
        'categories',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    activities = Field(StringList)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    categories = Field(StringList)
    # ArrayOfEnum -> None
    # ['amateur', 'mountain_guide', 'mountain_leader', 'ski_instructor', 'climbing_instructor', 'mountainbike_instructor', 'paragliding_instructor', 'hut_warden', 'ski_patroller', 'avalanche_forecaster', 'club', 'institution']


####################################################################################################

class C2cWaypoints(Schema):

    __table_name__ = 'c2c_waypoints'

    __order__ = (
        'document_id',
        'access_time',
        'best_periods',
        'blanket_unstaffed',
        'capacity',
        'capacity_staffed',
        'children_proof',
        'climbing_indoor_types',
        'climbing_outdoor_types',
        'climbing_rating_max',
        'climbing_rating_median',
        'climbing_rating_min',
        'climbing_styles',
        'custodianship',
        'elevation',
        'elevation_min',
        'equipment_ratings',
        'exposition_rating',
        'gas_unstaffed',
        'ground_types',
        'heating_unstaffed',
        'height_max',
        'height_median',
        'height_min',
        'length',
        'lift_access',
        'maps_info',
        'matress_unstaffed',
        'orientations',
        'paragliding_rating',
        'parking_fee',
        'phone',
        'phone_custodian',
        'product_types',
        'prominence',
        'public_transportation_rating',
        'public_transportation_types',
        'rain_proof',
        'rock_types',
        'routes_quantity',
        'slackline_length_max',
        'slackline_length_min',
        'slackline_types',
        'slope',
        'snow_clearance_rating',
        'url',
        'waypoint_type',
        'weather_station_types',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    access_time = Field(String)
    # Enum -> VARCHAR(5)
    # ['1min', '5min', '10min', '15min', '20min', '30min', '45min', '1h', '1h30', '2h', '2h30', '3h', '3h+']

    best_periods = Field(StringList)
    # ArrayOfEnum -> None
    # ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec']

    blanket_unstaffed = Field(Boolean)
    # Boolean -> BOOLEAN

    capacity = Field(Integer)
    # SmallInteger -> SMALLINT

    capacity_staffed = Field(Integer)
    # SmallInteger -> SMALLINT

    children_proof = Field(String)
    # Enum -> VARCHAR(14)
    # ['very_safe', 'safe', 'dangerous', 'very_dangerous']

    climbing_indoor_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['pitch', 'bloc']

    climbing_outdoor_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['single', 'multi', 'bloc', 'psicobloc']

    climbing_rating_max = Field(String)
    # Enum -> VARCHAR(3)
    # ['2', '3a', '3b', '3c', '4a', '4b', '4c', '5a', '5a+', '5b', '5b+', '5c', '5c+', '6a', '6a+', '6b', '6b+', '6c', '6c+', '7a', '7a+', '7b', '7b+', '7c', '7c+', '8a', '8a+', '8b', '8b+', '8c', '8c+', '9a', '9a+', '9b', '9b+', '9c', '9c+']

    climbing_rating_median = Field(String)
    # Enum -> VARCHAR(3)
    # ['2', '3a', '3b', '3c', '4a', '4b', '4c', '5a', '5a+', '5b', '5b+', '5c', '5c+', '6a', '6a+', '6b', '6b+', '6c', '6c+', '7a', '7a+', '7b', '7b+', '7c', '7c+', '8a', '8a+', '8b', '8b+', '8c', '8c+', '9a', '9a+', '9b', '9b+', '9c', '9c+']

    climbing_rating_min = Field(String)
    # Enum -> VARCHAR(3)
    # ['2', '3a', '3b', '3c', '4a', '4b', '4c', '5a', '5a+', '5b', '5b+', '5c', '5c+', '6a', '6a+', '6b', '6b+', '6c', '6c+', '7a', '7a+', '7b', '7b+', '7c', '7c+', '8a', '8a+', '8b', '8b+', '8c', '8c+', '9a', '9a+', '9b', '9b+', '9c', '9c+']

    climbing_styles = Field(StringList)
    # ArrayOfEnum -> None
    # ['slab', 'vertical', 'overhang', 'roof', 'small_pillar', 'crack_dihedral']

    custodianship = Field(String)
    # Enum -> VARCHAR(24)
    # ['accessible_when_wardened', 'always_accessible', 'key_needed', 'no_warden']

    elevation = Field(Integer)
    # SmallInteger -> SMALLINT

    elevation_min = Field(Integer)
    # SmallInteger -> SMALLINT

    equipment_ratings = Field(StringList)
    # ArrayOfEnum -> None
    # ['P1', 'P1+', 'P2', 'P2+', 'P3', 'P3+', 'P4', 'P4+']

    exposition_rating = Field(String)
    # Enum -> VARCHAR(2)
    # ['E1', 'E2', 'E3', 'E4']

    gas_unstaffed = Field(Boolean)
    # Boolean -> BOOLEAN

    ground_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['prairie', 'scree', 'snow']

    heating_unstaffed = Field(Boolean)
    # Boolean -> BOOLEAN

    height_max = Field(Integer)
    # SmallInteger -> SMALLINT

    height_median = Field(Integer)
    # SmallInteger -> SMALLINT

    height_min = Field(Integer)
    # SmallInteger -> SMALLINT

    length = Field(Integer)
    # SmallInteger -> SMALLINT

    lift_access = Field(Boolean)
    # Boolean -> BOOLEAN

    maps_info = Field(String)
    # String -> VARCHAR(300)

    matress_unstaffed = Field(Boolean)
    # Boolean -> BOOLEAN

    orientations = Field(StringList)
    # ArrayOfEnum -> None
    # ['N', 'NE', 'E', 'SE', 'S', 'SW', 'W', 'NW']

    paragliding_rating = Field(Char)
    # Enum -> VARCHAR(1)
    # ['1', '2', '3', '4', '5']

    parking_fee = Field(String)
    # Enum -> VARCHAR(8)
    # ['yes', 'seasonal', 'no']

    phone = Field(String)
    # String -> VARCHAR(50)

    phone_custodian = Field(String)
    # String -> VARCHAR(50)

    product_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['farm_sale', 'restaurant', 'grocery', 'bar', 'sport_shop']

    prominence = Field(Integer)
    # SmallInteger -> SMALLINT

    public_transportation_rating = Field(String)
    # Enum -> VARCHAR(16)
    # ['good service', 'seasonal service', 'poor service', 'nearby service', 'no service']

    public_transportation_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['train', 'bus', 'service_on_demand', 'boat', 'cable_car']

    rain_proof = Field(String)
    # Enum -> VARCHAR(16)
    # ['exposed', 'partly_protected', 'protected', 'inside']

    rock_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['basalte', 'calcaire', 'conglomerat', 'craie', 'gneiss', 'gres', 'granit', 'migmatite', 'mollasse_calcaire', 'pouding', 'quartzite', 'rhyolite', 'schiste', 'trachyte', 'artificial']

    routes_quantity = Field(Integer)
    # SmallInteger -> SMALLINT

    slackline_length_max = Field(Integer)
    # SmallInteger -> SMALLINT

    slackline_length_min = Field(Integer)
    # SmallInteger -> SMALLINT

    slackline_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['slackline', 'highline', 'waterline']

    slope = Field(Integer)
    # SmallInteger -> SMALLINT

    snow_clearance_rating = Field(String)
    # Enum -> VARCHAR(16)
    # ['often', 'sometimes', 'progressive', 'naturally', 'closed_in_winter', 'non_applicable']

    url = Field(String)
    # String -> VARCHAR(255)

    waypoint_type = Field(String, nullable=False)
    # Enum -> VARCHAR(19)
    # ['summit', 'pass', 'lake', 'waterfall', 'locality', 'bisse', 'canyon', 'access', 'climbing_outdoor', 'climbing_indoor', 'hut', 'gite', 'shelter', 'bivouac', 'camp_site', 'base_camp', 'local_product', 'paragliding_takeoff', 'paragliding_landing', 'cave', 'waterpoint', 'weather_station', 'webcam', 'virtual', 'slackline_spot', 'misc']

    weather_station_types = Field(StringList)
    # ArrayOfEnum -> None
    # ['temperature', 'wind_speed', 'wind_direction', 'humidity', 'pressure', 'precipitation', 'precipitation_heater', 'snow_height', 'insolation']


####################################################################################################

class C2cWaypointsLocales(Schema):

    __table_name__ = 'c2c_waypoints_locales'

    __order__ = (
        'id',
        'access',
        'access_period',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_locales.id']

    access = Field(String)
    # String -> VARCHAR

    access_period = Field(String)
    # String -> VARCHAR


####################################################################################################

class C2cXreports(Schema):

    __table_name__ = 'c2c_xreports'

    __order__ = (
        'document_id',
        'activities',
        'activity_rate',
        'age',
        'author_status',
        'autonomy',
        'avalanche_level',
        'avalanche_slope',
        'date',
        'disable_comments',
        'elevation',
        'event_type',
        'gender',
        'nb_impacted',
        'nb_outings',
        'nb_participants',
        'previous_injuries',
        'rescue',
        'severity',
    )

    document_id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents.document_id']

    activities = Field(StringList, nullable=False)
    # ArrayOfEnum -> None
    # ['skitouring', 'snow_ice_mixed', 'mountain_climbing', 'rock_climbing', 'ice_climbing', 'hiking', 'snowshoeing', 'paragliding', 'mountain_biking', 'via_ferrata', 'slacklining']

    activity_rate = Field(String)
    # Enum -> VARCHAR(17)
    # ['activity_rate_150', 'activity_rate_50', 'activity_rate_30', 'activity_rate_20', 'activity_rate_10', 'activity_rate_5', 'activity_rate_1']

    age = Field(Integer)
    # SmallInteger -> SMALLINT

    author_status = Field(String)
    # Enum -> VARCHAR(18)
    # ['primary_impacted', 'secondary_impacted', 'internal_witness', 'external_witness']

    autonomy = Field(String)
    # Enum -> VARCHAR(14)
    # ['non_autonomous', 'autonomous', 'initiator', 'expert']

    avalanche_level = Field(String)
    # Enum -> VARCHAR(8)
    # ['level_1', 'level_2', 'level_3', 'level_4', 'level_5', 'level_na']

    avalanche_slope = Field(String)
    # Enum -> VARCHAR(11)
    # ['slope_lt_30', 'slope_30_35', 'slope_35_40', 'slope_40_45', 'slope_gt_45']

    date = Field(Date)
    # Date -> DATE

    disable_comments = Field(Boolean)
    # Boolean -> BOOLEAN

    elevation = Field(Integer)
    # SmallInteger -> SMALLINT

    event_type = Field(StringList)
    # ArrayOfEnum -> None
    # ['avalanche', 'stone_fall', 'falling_ice', 'person_fall', 'crevasse_fall', 'roped_fall', 'physical_failure', 'lightning', 'other']

    gender = Field(String)
    # Enum -> VARCHAR(6)
    # ['male', 'female']

    nb_impacted = Field(Integer)
    # SmallInteger -> SMALLINT

    nb_outings = Field(String)
    # Enum -> VARCHAR(13)
    # ['nb_outings_4', 'nb_outings_9', 'nb_outings_14', 'nb_outings_15']

    nb_participants = Field(Integer)
    # SmallInteger -> SMALLINT

    previous_injuries = Field(String)
    # Enum -> VARCHAR(19)
    # ['no', 'previous_injuries_2', 'previous_injuries_3']

    rescue = Field(Boolean)
    # Boolean -> BOOLEAN

    severity = Field(String)
    # Enum -> VARCHAR(12)
    # ['severity_no', '1d_to_3d', '4d_to_1m', '1m_to_3m', 'more_than_3m']


####################################################################################################

class C2cXreportsLocales(Schema):

    __table_name__ = 'c2c_xreports_locales'

    __order__ = (
        'id',
        'conditions',
        'group_management',
        'increase_impact',
        'modifications',
        'motivations',
        'other_comments',
        'place',
        'reduce_impact',
        'risk',
        'route_study',
        'safety',
        'time_management',
        'training',
    )

    id = Field(Integer, nullable=False, primary_key=True)
    # Integer -> INTEGER
    # Foreign Keys: ['guidebook.documents_locales.id']

    conditions = Field(String)
    # String -> VARCHAR

    group_management = Field(String)
    # String -> VARCHAR

    increase_impact = Field(String)
    # String -> VARCHAR

    modifications = Field(String)
    # String -> VARCHAR

    motivations = Field(String)
    # String -> VARCHAR

    other_comments = Field(String)
    # String -> VARCHAR

    place = Field(String)
    # String -> VARCHAR

    reduce_impact = Field(String)
    # String -> VARCHAR

    risk = Field(String)
    # String -> VARCHAR

    route_study = Field(String)
    # String -> VARCHAR

    safety = Field(String)
    # String -> VARCHAR

    time_management = Field(String)
    # String -> VARCHAR

    training = Field(String)
    # String -> VARCHAR


####################################################################################################

class C2c(SchemaRepository):

    __schemas__ = (
       C2cAreaAssociations,
       C2cAreas,
       C2cArticles,
       C2cAssociations,
       C2cBooks,
       C2cDocuments,
       C2cDocumentsGeometries,
       C2cDocumentsLocales,
       C2cDocumentsTopics,
       C2cDocumentsVersions,
       C2cImages,
       C2cMapAssociations,
       C2cMaps,
       C2cOutings,
       C2cOutingsLocales,
       C2cRoutes,
       C2cRoutesLocales,
       C2cUser,
       C2cUserProfiles,
       C2cWaypoints,
       C2cWaypointsLocales,
       C2cXreports,
       C2cXreportsLocales,
    )
