#! /usr/bin/env python3
# -*- Python -*-

####################################################################################################
#
# This file is part of the Alpine Toolkit software.
# Copyright (C) 2017 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
# SPDX-License-Identifier: GPL-3.0-only
#
####################################################################################################

####################################################################################################

import argparse
import importlib
import inspect
import logging
import os
import sys

####################################################################################################

code_generator_path = os.path.dirname(os.path.abspath(__file__))
source_path = os.path.dirname(code_generator_path)

sys.path.insert(0, code_generator_path)

####################################################################################################

from CodeGenerator.Logging import BasicLogging

from CodeGenerator.Orm import SchemaRepository
from CodeGenerator.Template import TemplateEnvironment

####################################################################################################

argument_parser = argparse.ArgumentParser(description='Generate schema.')
argument_parser.add_argument('module', metavar='MODULE',
                    help='Schema Module')

args = argument_parser.parse_args()

####################################################################################################

schema_module = importlib.import_module(args.module)

if not hasattr(schema_module, 'output'):
    raise NameError("Missing output tuple in Schema Module")
path = os.path.join(source_path, *schema_module.output)

schema_repository_cls = None
for obj in schema_module.__dict__.values():
    if inspect.isclass(obj) and issubclass(obj, SchemaRepository) and obj != SchemaRepository:
        schema_repository_cls = obj

if schema_repository_cls is not None:
    logging.info(f"Found SchemaRepository {schema_repository_cls}")
    logging.info(f"Ouput\n  {path}.h\n  {path}.cpp")
    schema_repository = schema_repository_cls()
    template_path = os.path.join(code_generator_path, 'code-generator-templates')
    template_environment = TemplateEnvironment(template_path)
    schema_repository.write_source(path, template_environment)
