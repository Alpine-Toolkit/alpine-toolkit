{# -*- mode: fundamental -*- #}

{#  ################################################################################################
 #
 # This file is part of the Alpine Toolkit software.
 # Copyright (C) 2017 Fabrice Salvaire
 # Contact: http://www.fabrice-salvaire.fr
 # SPDX-License-Identifier: GPL-3.0-only
 #
 ###############################################################################################  #}

{% macro ctor_arguments(members) %}
{% for member in members %}
{{ member.setter_type }} {{ member.name }}{% if not loop.last %}, {% endif %}
{% endfor %}
{% endmacro %}

{% macro ctor_decl(class_name, ctor_members) -%}
{{class_name}}({{ ctor_arguments(ctor_members) }});
{%- endmacro %}

{% macro copy_ctor_decl(class_name) -%}
{{class_name}}(const {{class_name}} & other);
{%- endmacro %}

{% macro dtor_decl(class_name) -%}
~{{class_name}}();
{%- endmacro %}

{% macro copy_operator_decl(class_name) -%}
{{class_name}} & operator=(const {{class_name}} & other);
{%- endmacro %}

{# ###############################################################################################
 #
 # Implementations
 #
 #}

{# WE can set in macro, but how to build pairs ? #}
{% macro ctor_initialisation(pairs) %}
{% for id, value in pair %}
{% if loop.first %}  : {% else %}    {% endif %}{{id}}({{value}}){% if not loop.last or members %},{% endif %} 
{% endfor %}{# space #}
{% endmacro %}

{% macro ctor_impl(class_name, members, base_classes, post_init) -%}
{{class_name}}::{{class_name}}()
{% for base_class in base_classes %}
{% if loop.first %}  : {% else %}    {% endif %}{{ base_class }}(){% if not loop.last or members %},{% endif %} 
{% endfor %}{# space #}
{% for member in members %}
{% if loop.first and not base_classes %}  : {% else %}    {% endif %}{{member.m_name}}({% if member.value %}{{member.value}}{% endif %}){% if not loop.last %},{% endif %} 
{% endfor %}{# space #}
{
{% if post_init %}
  {{post_init}}();
{% endif %}
}
{%- endmacro %}

{% macro ctor_impl_with_args(class_name, members, base_classes, post_init) -%}
{{class_name}}::{{class_name}}({{ ctor_arguments(members) }})
{% for base_class in base_classes %}
{% if loop.first %}  : {% else %}    {% endif %}{{ base_class }}(){% if not loop.last or members %},{% endif %} 
{% endfor %}{# space #}
{% for member in members %}
{% if loop.first and not base_classes %}  : {% else %}    {% endif %}{{member.m_name}}({{member.name}}){% if not loop.last %},{% endif %} 
{% endfor %}{# space #}
{
{% if post_init %}
  {{post_init}}();
{% endif %}
}
{%- endmacro %}

{% macro copy_ctor_impl(class_name, members, base_classes, post_init) -%}
{{class_name}}::{{class_name}}(const {{class_name}} & other)
{% for base_class in base_classes %}
{% if loop.first %}  : {% else %}    {% endif %}{{ base_class }}({% if base_class != 'QObject'%}other{% endif %}){% if not loop.last or members %},{% endif %} 
{% endfor %}{# space #}
{% for member in members %}
{% if loop.first and not base_classes %}  : {% else %}    {% endif %}{{member.m_name}}(other.{{member.m_name}}){% if not loop.last %},{% endif %} 
{% endfor %}{# space #}
{
{% if post_init %}
  {{post_init}}();
{% endif %}
}
{%- endmacro %}

{% macro copy_operator_impl(class_name, members, base_classes, post_init) -%}
{{class_name}} &
{{class_name}}::operator=(const {{class_name}} & other)
{
  if (this != &other) {
{% for base_class in base_classes %}
    {{base_class}}::operator=(other);
{% endfor %}
{% for member in members %}
    m_{{member.name}} = other.m_{{member.name}};
{% endfor %}
{% if post_init %}

    {{post_init}}();
{% endif %}
  }

  return *this;
}
{%- endmacro %}

{% macro dtor_impl(class_name, members) -%}{# custom_code #}
{{class_name}}::~{{class_name}}()
{}
{%- endmacro %}
