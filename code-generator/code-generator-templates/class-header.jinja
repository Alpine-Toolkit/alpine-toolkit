{# -*- mode: fundamental -*- -#}

{#  ################################################################################################
 #
 # $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
 #
 # Copyright (C) 2017 Fabrice Salvaire
 # Contact: http://www.fabrice-salvaire.fr
 #
 # This file is part of the Alpine Toolkit software.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #
 # $ALPINE_TOOLKIT_END_LICENSE$
 #
 ###############################################################################################  -#}

{% extends "includes/header-template.jinja" %}

{% from "includes/accessor.jinja" import getter_decl, setter_decl, inline_getter, inline_setter %}
{% from "includes/cdtor.jinja" import ctor_decl, copy_ctor_decl, copy_operator_decl, dtor_decl %}
{% from "includes/debug.jinja" import debug_streamer_decl %}
{% from "includes/operator.jinja" import equal_operator_decl %}
{% from "includes/property.jinja" import property, property_signal %}

{% macro class_inheritance(base_classes) %}
{% if base_classes %} : {% for base_class in base_classes %}public {{base_class}}{% if not loop.last %}, {% endif %}{% endfor %}{% endif %}
{% endmacro %}

{% macro q_object(base_class) %}
{% if 'QObject' in base_classes %}
  Q_OBJECT
{% endif %}
{% endmacro %}

{% macro properties(members) %}
{% for member in members %}
  {{ property(member.name, member.type) }}
{% endfor %}
{% endmacro %}

{% macro signal_properties(members) %}
signals:
{% for member in members %}
  {{ property_signal(member.name) }}
{% endfor %}
{% endmacro %}

{% macro m_member(name, type) -%}
{{type}} m_{{name}}
{%- endmacro %}

{% macro m_members(members) %}
{% for member in members %}
  {{ m_member(member.name, member.type) }};
{% endfor %}
{% endmacro %}

{% block content %}
class {{class_name}}{{ class_inheritance(base_classes) }}
{
{{ q_object(base_classes) }}
{% if has_property %}{{ properties(members) }}{% endif %}
public:
  {{ ctor_decl(class_name) }}
  {{ ctor_decl(class_name, ctor_members) }}
  {{ copy_ctor_decl(class_name) }}
  {{ dtor_decl(class_name) }}

  {{ copy_operator_decl(class_name) }}

  {{ equal_operator_decl(class_name) }}

  // Getter/Setter
{% for member in members %}
  {%+ if has_inline_getter %}{{ inline_getter(member) }}{% else %}{{ getter_decl(member) }}{% endif %}
  {%+ if has_inline_setter %}{{ inline_setter(member) }}{% else %}{{ setter_decl(member) }}{% endif %}
{% endfor %}

{% if has_property %}
{{ signal_properties(members) }}
{% endif %}

private:
{{ m_members(members) }}
};

{{ debug_streamer_decl(class_name) }}
{% endblock %}
