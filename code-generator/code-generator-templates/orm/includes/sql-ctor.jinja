{# -*- mode: fundamental -*- #}

{#  ################################################################################################
 #
 # $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
 #
 # Copyright (C) 2017 Fabrice Salvaire
 # Contact: http://www.fabrice-salvaire.fr
 #
 # This file is part of the Alpine Toolkit software.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #
 # $ALPINE_TOOLKIT_END_LICENSE$
 #
 ###############################################################################################  #}

{% macro variant_from_record(i) -%}
record.value({{i}})
{%- endmacro %}

{% macro variant_from_query(i) -%}
query.value({{i}})
{%- endmacro %}

{% macro from_variant(field, variant) -%}
{{variant}}{% if field.variable.from_variant %}.{{field.variable.from_variant}}(){% endif %}
{%- endmacro %}

{% macro cast_from_variant(value, cast) -%}
{% if cast %}{{cast}}({{value}}){% else %}{{value}}{% endif %}
{%- endmacro %}

{% macro get_field_value(field, variant) -%}
{% if field.type_conversion.cast_from_sql -%}
{{field.type_conversion.cast_from_sql}}({{variant}})
{%- else -%}
{{ cast_from_variant(from_variant(field, variant), field.variable.cast_from_variant) }}
{%- endif %}
{%- endmacro %}

{% macro set_member(field, value) -%}
m_{{field.name}} = {{ get_field_value(field, value) }};
{%- endmacro %}

{# ############################################################################################## #}

{% macro sql_ctor(class_name, base_class, fields, post_init) -%}
{{class_name}}::{{class_name}}(const QSqlRecord & record)
 : {{base_class}}(record)
{
{% for field in fields %}
  {{ set_member(field, variant_from_record(loop.index0)) }}
{% endfor %}
{% if post_init %}

  {{post_init}}();
{% endif %}
}

{{class_name}}::{{class_name}}(const QSqlQuery & query, int offset)
 : {{base_class}}(query)
{
{% for field in fields %}
{% if loop.last %}
  {{ set_member(field, variant_from_query('offset')) }}
{% else %}
  {{ set_member(field, variant_from_query('offset++')) }}
{% endif %}
{% endfor %}
{% if post_init %}

  {{post_init}}();
{% endif %}
}
{%- endmacro %}
