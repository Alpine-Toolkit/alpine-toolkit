{# -*- mode: fundamental -*- -#}

{#  ################################################################################################
 #
 # $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
 #
 # Copyright (C) 2017 Fabrice Salvaire
 # Contact: http://www.fabrice-salvaire.fr
 #
 # This file is part of the Alpine Toolkit software.
 #
 # This program is free software: you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation, either version 3 of the License, or
 # (at your option) any later version.
 #
 # This program is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with this program.  If not, see <http://www.gnu.org/licenses/>.
 #
 # $ALPINE_TOOLKIT_END_LICENSE$
 #
 ###############################################################################################  #}

{% macro field_enum(field) -%}
Schema::Fields::{{field.name|upper}}
{%- endmacro %}

{% macro cast_to_variant(field) -%}
{% if field.variable.cast_variant %}QVariant::fromValue(m_{{field.name}}){% else %}m_{{field.name}}{% endif %}
{% endmacro %}

{%  macro from_variant(field, value) -%}
value{% if field.variable.from_variant %}.{{field.variable.from_variant}}(){% endif %}
{%- endmacro %}

{%  macro set_member(name, value, cast) -%}
m_{{name}} = {% if cast %}{{cast}}({{ value }}){% else %}{{ value }}{% endif %}
{%- endmacro %}

{# ############################################################################################## #}

{%  macro get_field(class_name, fields) -%}
QVariant
{{class_name}}::field(int position) const
{
  switch(position) {
{% for field in fields %}
   case {{ field_enum(field) }}:
     return {{ cast_to_variant(field) }};
{% endfor %}
   default:
     return QVariant(); // error
  }
}
{%- endmacro %}

{%  macro set_field(class_name, fields) -%}
void
{{class_name}}::set_field(int position, const QVariant & value)
{
  switch(position) {
{% for field in fields %}
   case {{ field_enum(field) }}: {
     {{ set_member(field.name, from_variant(field, value), field.variable.cast_from_variant) }};
     break;
   }
{% endfor %}
  }
}
{%- endmacro %}
