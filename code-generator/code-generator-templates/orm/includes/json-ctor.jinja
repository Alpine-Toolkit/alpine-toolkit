{# -*- mode: fundamental -*- #}

{#  ################################################################################################
 #
 # This file is part of the Alpine Toolkit software.
 # Copyright (C) 2017 Fabrice Salvaire
 # Contact: http://www.fabrice-salvaire.fr
 # SPDX-License-Identifier: GPL-3.0-only
 #
 ###############################################################################################  #}

{%  macro set_member(name, value, cast) -%}
m_{{name}} = {% if cast %}{{cast}}({{ value }}){% else %}{{ value }}{% endif %};
{%- endmacro %}

{% macro from_json(json_name, from_json) -%}
json_object[QLatin1String("{{json_name}}")]{% if from_json %}.{{from_json}}(){% endif %}
{%- endmacro %}

{% macro from_variant_hash(field) -%}
variant_hash[QLatin1String("{{field.name}}")]{% if field.variable.from_variant %}.{{field.variable.from_variant}}(){% endif %}
{%- endmacro %}

{% macro from_record(i, field) -%}
record.value({{i}}){% if field.variable.from_variant %}.{{field.variable.from_variant}}(){% endif %}
{%- endmacro %}

{% macro from_query(i, field) -%}
query.value({{i}}){% if field.variable.from_variant %}.{{field.variable.from_variant}}(){% endif %}
{%- endmacro %}

{# ############################################################################################## #}

{% macro json_ctor(class_name, fields, post_init) -%}
{{class_name}}::{{class_name}}(const QJsonObject & json_object)
 : {{class_name}}()
{
{% for field in fields %}
  {{ set_member(field.name,
                from_json(field.name, field.variable.from_json),
                field.variable.cast_from_json)
  }}
{% endfor %}
{% if post_init %}

  {{post_init}}();
{% endif %}
}
{%- endmacro %}

{% macro variant_hash_ctor(class_name, fields, post_init) -%}
{{class_name}}::{{class_name}}(const QVariantHash & variant_hash)
 : {{class_name}}()
{
{% for field in fields %}
  {{ set_member(field.name, from_variant_hash(field), field.variable.cast_from_variant) }}
{% endfor %}
{% if post_init %}

  {{post_init}}();
{% endif %}
}
{%- endmacro %}

{% macro variant_list_ctor(class_name, fields, post_init) -%}
{{class_name}}::{{class_name}}(const QVariantList & variants)
 : {{class_name}}()
{
{% macro from_variant_list(i, field) -%}
variants[{{i}}]{% if field.variable.from_variant %}.{{field.variable.from_variant}}(){% endif %}
{%- endmacro %}
{% for field in fields %}
  {{ set_member(field.name, from_variant_list(loop.index0, field), field.variable.cast_from_variant) }}
{% endfor %}
{% if post_init %}

  {{post_init}}();
{% endif %}
}
{%- endmacro %}
