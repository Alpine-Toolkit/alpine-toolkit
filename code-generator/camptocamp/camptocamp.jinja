#! /usr/bin/env python3
# -*- Python -*-

# This files was generated by generate-camptocamp-orm
#   api version: {{ version['v6_api'] }}
#   common version: {{ version['v6_common'] }}

####################################################################################################
#
# $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
#
# Copyright (C) 2017 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
#
# This file is part of the Alpine Toolkit software.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $ALPINE_TOOLKIT_END_LICENSE$
#
####################################################################################################

####################################################################################################

output = ('src', 'camptocamp', 'camptocamp_schema')

####################################################################################################

# from CodeGenerator.CppType import TypeConversion

from CodeGenerator.Orm import SchemaRepository, Schema, Field, ComputedField
from CodeGenerator.Orm.CustomType import JsonGeoCoordinate
from CodeGenerator.Orm.StandardType import Boolean, Integer, Char, Date, DateTime, Real, String, StringList
from CodeGenerator.Template import CustomCode

{% for class_name in tables|sort %}
{% set table_definition = tables[class_name] %}
{% set fields = table_definition['fields'] %}
{% set field_names = table_definition['field_names'] %}
####################################################################################################

class C2c{{class_name}}(Schema):

    __table_name__ = 'c2c_{{ table_definition['table_name'] }}'

    __order__ = (
{% for field_name in field_names %}
        '{{ field_name }}',
{% endfor %}
    )

{% for field_name in field_names %}
{% set field_definition = fields[field_name] %}
    {{ field_name }} = Field({{ field_definition['type'] }}{% if not field_definition['nullable'] %}, nullable=False{% endif %}{% if field_definition['primary_key'] %}, primary_key=True{% endif %}{% if field_definition['json_name'] != field_name %}, json_name='{{ field_definition['json_name'] }}'{% endif %}{% if field_definition['sql_name'] != field_name %}, sql_name='{{ field_definition['sql_name'] }}'{% endif %})
    # {{ field_definition['sqlalchemy_type'] }} -> {{ field_definition['sql_type'] }}
{% if field_definition['foreign_keys'] %}
    # Foreign Keys: {{ field_definition['foreign_keys'] }}
{% endif %}
{% if field_definition['enums'] %}
    # {{ field_definition['enums'] }}
{% endif %}

{% endfor %}

{% endfor %}
####################################################################################################

class C2c(SchemaRepository):

    __schemas__ = (
{% for class_name in tables|sort %}
       C2c{{class_name}},
{% endfor %}
    )
