#! /usr/bin/env python3
# -*- mode: python -*-

####################################################################################################
#
# This file is part of the Alpine Toolkit software.
# Copyright (C) 2017 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
# SPDX-License-Identifier: GPL-3.0-only
#
####################################################################################################

####################################################################################################

import json
import os
import sys

from CodeGenerator.Template import TemplateEnvironment

####################################################################################################

generator_path = os.path.dirname(os.path.abspath(__file__))

sys.path.insert(0, generator_path)

####################################################################################################

with open('camptocamp-orm-compact.json', 'r') as fd:
    json_root = json.load(fd)

####################################################################################################

template_environment = TemplateEnvironment(generator_path)

table_names = sorted([x for x in json_root.keys() if not x.startswith('_')])

sqlalchemy_type_map = {
    'ARRAY': 'StringList',
    'ArrayOfEnum': 'StringList',
    'Boolean': 'Boolean',
    'Date': 'Date',
    'DateTime': 'DateTime',
    'Enum': 'String',
    'Float': 'Real',
    'Geometry': None, # Fixme:
    'Integer': 'Integer',
    'SmallInteger': 'Integer',
    'String': 'String',
}

table_definition = {}
for table_name in table_names:
    # print('\nTable name', table_name)
    table_json = json_root[table_name]
    class_name = ''.join([x.title() for x in table_name.split('_')])
    fields = {}
    for field_name, field_json in table_json.items():
        sqlalchemy_type = field_json['type']
        sql_type = field_json.get('sql', None)
        # print('  field name', field_name, sqlalchemy_type, sql_type)
        field_type = sqlalchemy_type_map[sqlalchemy_type]
        # if field_type is None:
        #     if sql_type is not None and sql_type.startswith('VARCHAR'):
        #         field_type = 'String'
        if sql_type is not None and sql_type == 'VARCHAR(1)':
            field_type = 'Char'
        if sqlalchemy_type == 'Geometry':
            if 'POINT' in sql_type:
                field_type = 'String' # Fixme: GeoCoordinate
            elif 'GEOMETRY' in sql_type:
                field_type = 'String' # Fixme:
        if field_type is None:
            print(' !!!', table_name, field_name, sqlalchemy_type, sql_type)
        json_name = field_name
        sql_name = field_name
        if field_name == 'protected':
            field_name = 'protected_flag' # c++ keyword
        fields[field_name] = {
            'json_name': json_name,
            'sql_name': sql_name,
            'type': field_type,
            'sqlalchemy_type': sqlalchemy_type,
            'sql_type': sql_type,
            'nullable': field_json.get('nullable', False),
            'primary_key': field_json.get('primary_key', False),
            'enums': str(field_json.get('enums', '')),
            'foreign_keys': str(field_json.get('foreign_keys', '')),
        }
    primary_keys = sorted([x for x in fields if fields[x]['primary_key']])
    normal_fields = sorted([x for x in fields if not fields[x]['primary_key']])
    d = {
        'table_name': table_name,
        'fields': fields,
        'field_names': primary_keys + normal_fields,
        }
    table_definition[class_name] = d

ouput_path = os.path.join(os.path.dirname(generator_path), 'Schemas', 'CampToCamp.py')
with open(ouput_path, 'w') as fd:
    fd.write(template_environment.render('camptocamp.jinja',
                                         tables=table_definition,
                                         version=json_root['__v6_version__']))
