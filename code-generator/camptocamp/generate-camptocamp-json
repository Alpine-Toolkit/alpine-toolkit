#! /usr/bin/env python3
# -*- mode: python -*-

####################################################################################################
#
# $ALPINE_TOOLKIT_BEGIN_LICENSE:GPL3$
#
# Copyright (C) 2017 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
#
# This file is part of the Alpine Toolkit software.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $ALPINE_TOOLKIT_END_LICENSE$
#
####################################################################################################

####################################################################################################

import importlib
import json
import os
import sys

####################################################################################################

generator_path = os.path.dirname(os.path.abspath(__file__))
# source_path = os.path.dirname(code_generator_path)

sys.path.insert(0, generator_path)

####################################################################################################

import InspectorTools as IT

####################################################################################################

def iterator_with_last(iterable):

    i_max = len(iterable) - 1
    for i, item in enumerate(iterable):
        yield item, i == i_max

####################################################################################################

json_root = {}

json_root['__v6_version__'] = {
    directory: IT.git_head_hex(os.path.join(generator_path, directory))
    for directory in ('v6_common', 'v6_api')}

####################################################################################################
#
# Definitions
#

# associations
import c2corg_common.associations
associations = {}
for parent, child in c2corg_common.associations.valid_associations:
    if parent not in associations:
        associations[parent] = []
    associations[parent].append(child)
json_root['associations'] = associations

# attributes
import c2corg_common.attributes
json_root['attributes'] = {
    obj_name:obj
    for obj_name, obj in IT.yield_list_in_module(c2corg_common.attributes)}

# document_types
import c2corg_common.document_types
json_root['document_types'] = {}
for obj_name, obj in IT.yield_string_in_module(c2corg_common.document_types):
    if obj_name.endswith('_TYPE') and obj_name != 'DOCUMENT_TYPE':
        obj_name = obj_name.lower().replace('_type', '')
        if obj_name == 'userprofile':
            obj_name = 'user_profile'
        json_root['document_types'][obj_name] = obj
# print(sorted(json_root['document_types'].keys()))

json_root['document_fields'] = {}
for document_type in (
        'area',
        'article',
        'book',
        'image',
        'outing',
        'route',
        'topo_map',
        'user_profile',
        'waypoint',
        'xreport',
        ):
    submodule = 'fields_' + document_type
    module_name = 'c2corg_common.' + submodule
    module = importlib.import_module(module_name)
    fields = getattr(module, submodule)
    json_root['document_fields'][document_type] = fields

# sortable_search_attributes
import c2corg_common.sortable_search_attributes
json_root['sortable_search_attributes'] = {
    obj_name:obj
    for obj_name, obj in IT.yield_dict_in_module(c2corg_common.sortable_search_attributes)}

####################################################################################################
#
# All
#

with open('camptocamp-definitions.json', 'w') as fd:
    json.dump(json_root, fd, indent=4, sort_keys=True)

with open('camptocamp-definitions-min.json', 'w') as fd:
    json.dump(json_root, fd, sort_keys=True)

####################################################################################################
#
# Attributes
#

# size = 9.7k
with open('camptocamp-attributes.js', 'w') as fd:
    fd.write("var camptocamp_attributes = ")
    json.dump(json_root['attributes'], fd, indent=2, sort_keys=True)
    fd.write(";\n")

# size = 6.6k
with open('camptocamp-attributes-min.js', 'w') as fd:
    fd.write("var camptocamp_attributes = {\n")
    d = json_root['attributes']
    keys = sorted(d)
    for key, last in iterator_with_last(keys):
        values = '[' + ','.join(["'{}'".format(x) for x in d[key]]) + ']'
        fd.write("'{}':{}{}\n".format(key, values, '' if last else ','))
    fd.write("};\n")

####################################################################################################
#
# Documents Fields
#

# Fixme:
#   Sort fields
#   field -> required ???
#   sometimes root object is listed e.g. locales locales.xxx

with open('camptocamp-document-fields.js', 'w') as fd:
    fd.write("var camptocamp_document_fields = ")
    json.dump(json_root['document_fields'], fd, indent=2, sort_keys=True)
    fd.write(";\n")
