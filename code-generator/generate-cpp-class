#! /usr/bin/env python3
# -*- Python -*-

####################################################################################################
#
# This file is part of the Alpine Toolkit software.
# Copyright (C) 2017 Fabrice Salvaire
# Contact: http://www.fabrice-salvaire.fr
# SPDX-License-Identifier: GPL-3.0-only
#
####################################################################################################

####################################################################################################

import os
import sys

code_generator_path = os.path.dirname(os.path.abspath(__file__))
source_path = os.path.dirname(code_generator_path)
# print(source_path)

sys.path.insert(0, code_generator_path)

####################################################################################################

import argparse

from CodeGenerator.CppType import Variable

from CodeGenerator.Template import TemplateEnvironment, TemplateAggregator

####################################################################################################
#
# Options
#

argument_parser = argparse.ArgumentParser(description='Generate CPP Class',
                                          formatter_class=argparse.ArgumentDefaultsHelpFormatter)

argument_parser.add_argument('--property', action='store_true')
argument_parser.add_argument('--inline-setter', action='store_true')
argument_parser.add_argument('--inline-getter', action='store_true')
argument_parser.add_argument('--suffix', default='-generated', help='file suffix')

argument_parser.add_argument('class_definition_path', metavar='class_def_file',
                             help='class_definition_path')

argument_parser.add_argument('class_file_name', metavar='class_file_name',
                             help='class_definition_path')

args = argument_parser.parse_args()

####################################################################################################

with open(args.class_definition_path) as f:
    class_definition = f.readlines()

class_line = class_definition[0]
if ':' in class_line:
    class_name, parent_class = [x.strip() for x in class_line.split(':')]
    if not parent_class:
        parent_class = None
else:
    class_name = class_line
    parent_class = None

members = []
ctor_members = []
for line in class_definition[1:]:
    line = line.strip()
    pragma_position = line.find('//')
    if pragma_position != -1:
        directive = line[pragma_position +2:]
        line = line[:pragma_position].strip()
    else:
        directive = None
    if line.endswith(';'):
        line = line[:-1]
    l = line.rfind(' ')
    type_ = line[:l].strip()
    name = line[l:].strip()
    if name.startswith('m_'):
        name = name[2:]
    member = Variable(name, type_)
    members.append(member)
    if directive == 'c':
        ctor_members.append(member)

####################################################################################################

template_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'code-generator-templates')
template_environment = TemplateEnvironment(template_path)

class_definition = dict(
    filename=os.path.basename(args.class_file_name),
    class_name=class_name,
    base_classes=(parent_class,) if parent_class is not None else (),
    has_property=args.property,
    has_inline_getter=args.inline_getter,
    has_inline_setter=args.inline_setter,
    members=members,
    ctor_members=ctor_members,
)

header = TemplateAggregator(template_environment).render('class-header.jinja', **class_definition)
source = TemplateAggregator(template_environment).render('class-source.jinja', **class_definition)

with open(args.class_file_name + '.h' + args.suffix, 'w') as f:
    f.write(str(header))

with open(args.class_file_name + '.cpp' + args.suffix, 'w') as f:
    f.write(str(source))
